<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.7.13" created="2019-08-13 12:06" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>A Blog</title>
	<link>http://106.53.21.5</link>
	<description>By wzx,zzj,lty,lxl</description>
	<pubDate>Tue, 13 Aug 2019 12:06:40 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://106.53.21.5</wp:base_site_url>
	<wp:base_blog_url>http://106.53.21.5</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[admin]]></wp:author_login><wp:author_email><![CDATA[xinxizhijiaguanfang@vip.qq.com]]></wp:author_email><wp:author_display_name><![CDATA[A Blog开发维护团队]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login><![CDATA[zhongzijun]]></wp:author_login><wp:author_email><![CDATA[1174973100@qq.com]]></wp:author_email><wp:author_display_name><![CDATA[zhongzijun]]></wp:author_display_name><wp:author_first_name><![CDATA[梓俊]]></wp:author_first_name><wp:author_last_name><![CDATA[钟]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>3</wp:author_id><wp:author_login><![CDATA[weizexin]]></wp:author_login><wp:author_email><![CDATA[2564092179@qq.com]]></wp:author_email><wp:author_display_name><![CDATA[weizexin]]></wp:author_display_name><wp:author_first_name><![CDATA[泽鑫]]></wp:author_first_name><wp:author_last_name><![CDATA[韦]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>6</wp:author_id><wp:author_login><![CDATA[lutaiye]]></wp:author_login><wp:author_email><![CDATA[208805818@qq.com]]></wp:author_email><wp:author_display_name><![CDATA[lutaiye]]></wp:author_display_name><wp:author_first_name><![CDATA[泰烨]]></wp:author_first_name><wp:author_last_name><![CDATA[卢]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>11</wp:author_id><wp:author_login><![CDATA[sun*]]></wp:author_login><wp:author_email><![CDATA[1260779759@qq.com]]></wp:author_email><wp:author_display_name><![CDATA[sun*]]></wp:author_display_name><wp:author_first_name><![CDATA[畅]]></wp:author_first_name><wp:author_last_name><![CDATA[孙]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>2</wp:term_id>
		<wp:category_nicename><![CDATA[bfs]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[BFS]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>18</wp:term_id>
		<wp:category_nicename><![CDATA[dfs]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[DFS]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>5</wp:term_id>
		<wp:category_nicename><![CDATA[dp]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[DP]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>20</wp:term_id>
		<wp:category_nicename><![CDATA[%e4%b8%bb%e5%b8%ad%e6%a0%91]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[主席树]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>12</wp:term_id>
		<wp:category_nicename><![CDATA[%e4%ba%8c%e5%88%86]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[二分]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>34</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%80%8d%e5%a2%9e]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[倍增]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>19</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%88%86%e6%b2%bb]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[分治]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>25</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%8c%ba%e9%97%b4dp]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[区间DP]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>8</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%8d%95%e8%b0%83%e6%a0%88]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[单调栈]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>11</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%8d%9a%e5%bc%88%e8%ae%ba]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[博弈论]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>4</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%a0%86]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[堆]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>28</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[学习笔记]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>13</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%ae%b9%e6%96%a5]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[容斥]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>22</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%b9%b3%e8%a1%a1%e6%a0%91]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[平衡树]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>6</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%89%be%e8%a7%84%e5%be%8b]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[找规律]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>9</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%96%9c%e7%8e%87%e4%bc%98%e5%8c%96]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[斜率优化]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>33</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%9a%b4%e5%8a%9b]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[暴力]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>3</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%9c%80%e7%9f%ad%e8%b7%af]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[最短路]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[未分类]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>31</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%a0%88]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[栈]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>29</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[树状数组]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>32</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%a1%b6]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[桶]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>23</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%a8%a1%e6%8b%9f]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[模拟]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>16</wp:term_id>
		<wp:category_nicename><![CDATA[%e7%8a%b6%e5%8e%8bdp]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[状压DP]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>30</wp:term_id>
		<wp:category_nicename><![CDATA[%e7%a6%bb%e6%95%a3%e5%8c%96]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[离散化]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>21</wp:term_id>
		<wp:category_nicename><![CDATA[%e7%ba%bf%e6%ae%b5%e6%a0%91]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[线段树]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>24</wp:term_id>
		<wp:category_nicename><![CDATA[%e8%ae%b0%e5%bf%86%e5%8c%96%e6%90%9c%e7%b4%a2]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[记忆化搜索]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>14</wp:term_id>
		<wp:category_nicename><![CDATA[%e8%b4%aa%e5%bf%83]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[贪心]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>15</wp:term_id>
		<wp:category_nicename><![CDATA[%e9%93%be%e8%a1%a8]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[链表]]></wp:cat_name>
	</wp:category>
	<wp:tag>
		<wp:term_id>7</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%89%be%e8%a7%84%e5%be%8b]]></wp:tag_slug>
		<wp:tag_name><![CDATA[找规律]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>10</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%96%9c%e7%8e%87%e4%bc%98%e5%8c%96]]></wp:tag_slug>
		<wp:tag_name><![CDATA[斜率优化]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>17</wp:term_id>
		<wp:tag_slug><![CDATA[%e7%8a%b6%e5%8e%8bdp]]></wp:tag_slug>
		<wp:tag_name><![CDATA[状压DP]]></wp:tag_name>
	</wp:tag>
	<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bfs]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[BFS]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[18]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dfs]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[DFS]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[5]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[DP]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[20]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e4%b8%bb%e5%b8%ad%e6%a0%91]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[主席树]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e4%ba%8c%e5%88%86]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[二分]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[34]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%80%8d%e5%a2%9e]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[倍增]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[19]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%88%86%e6%b2%bb]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[分治]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[25]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8c%ba%e9%97%b4dp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[区间DP]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[8]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8d%95%e8%b0%83%e6%a0%88]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[单调栈]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[11]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8d%9a%e5%bc%88%e8%ae%ba]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[博弈论]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%a0%86]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[堆]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[28]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[学习笔记]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[13]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%ae%b9%e6%96%a5]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[容斥]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[22]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%b9%b3%e8%a1%a1%e6%a0%91]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[平衡树]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[6]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%89%be%e8%a7%84%e5%be%8b]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[找规律]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[7]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%89%be%e8%a7%84%e5%be%8b]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[找规律]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%96%9c%e7%8e%87%e4%bc%98%e5%8c%96]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[斜率优化]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[10]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%96%9c%e7%8e%87%e4%bc%98%e5%8c%96]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[斜率优化]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[33]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%9a%b4%e5%8a%9b]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[暴力]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[3]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%9c%80%e7%9f%ad%e8%b7%af]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[最短路]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[未分类]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[31]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%a0%88]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[栈]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[29]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[树状数组]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[32]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%a1%b6]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[桶]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[23]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%a8%a1%e6%8b%9f]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[模拟]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[16]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%8a%b6%e5%8e%8bdp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[状压DP]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[17]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%8a%b6%e5%8e%8bdp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[状压DP]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[30]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%a6%bb%e6%95%a3%e5%8c%96]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[离散化]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[21]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%ba%bf%e6%ae%b5%e6%a0%91]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[线段树]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[24]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%ae%b0%e5%bf%86%e5%8c%96%e6%90%9c%e7%b4%a2]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[记忆化搜索]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[14]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%b4%aa%e5%bf%83]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[贪心]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[15]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%93%be%e8%a1%a8]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[链表]]></wp:term_name>
	</wp:term>

	<generator>https://wordpress.org/?v=4.7.13</generator>

<image>
	<url>http://106.53.21.5/wp-content/uploads/2019/08/cropped-cropped-图片2-1-150x150-1-32x32.png</url>
	<title>A Blog</title>
	<link>http://106.53.21.5</link>
	<width>32</width>
	<height>32</height>
</image> 

	<item>
		<title>20150506015016_zQjdr-1024x576</title>
		<link>http://106.53.21.5/20150506015016_zqjdr-1024x576/</link>
		<pubDate>Sat, 10 Aug 2019 10:27:49 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/20150506015016_zQjdr-1024x576.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:27:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:27:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[20150506015016_zqjdr-1024x576]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/20150506015016_zQjdr-1024x576.jpeg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/20150506015016_zQjdr-1024x576.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:576;s:4:"file";s:42:"2019/08/20150506015016_zQjdr-1024x576.jpeg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:42:"20150506015016_zQjdr-1024x576-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:42:"20150506015016_zQjdr-1024x576-300x169.jpeg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:42:"20150506015016_zQjdr-1024x576-768x432.jpeg";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:43:"20150506015016_zQjdr-1024x576-1024x576.jpeg";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:42:"20150506015016_zQjdr-1024x576-825x510.jpeg";s:5:"width";i:825;s:6:"height";i:510;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
			<wp:meta_value><![CDATA[twentyfifteen]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>4e17b1d643b2e191865282ea4d0af17a</title>
		<link>http://106.53.21.5/4e17b1d643b2e191865282ea4d0af17a/</link>
		<pubDate>Sat, 10 Aug 2019 10:53:33 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/4e17b1d643b2e191865282ea4d0af17a.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:53:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:53:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[4e17b1d643b2e191865282ea4d0af17a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/4e17b1d643b2e191865282ea4d0af17a.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/4e17b1d643b2e191865282ea4d0af17a.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:132;s:6:"height";i:132;s:4:"file";s:44:"2019/08/4e17b1d643b2e191865282ea4d0af17a.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>下载-2-150x150</title>
		<link>http://106.53.21.5/%e4%b8%8b%e8%bd%bd-2-150x150/</link>
		<pubDate>Sat, 10 Aug 2019 10:53:49 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/下载-2-150x150.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:53:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:53:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%8b%e8%bd%bd-2-150x150]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/下载-2-150x150.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/下载-2-150x150.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:150;s:6:"height";i:150;s:4:"file";s:28:"2019/08/下载-2-150x150.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>信息学思维能力考察答案</title>
		<link>http://106.53.21.5/%e4%bf%a1%e6%81%af%e5%ad%a6%e6%80%9d%e7%bb%b4%e8%83%bd%e5%8a%9b%e8%80%83%e5%af%9f%e7%ad%94%e6%a1%88/</link>
		<pubDate>Sat, 10 Aug 2019 10:53:50 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/信息学思维能力考察答案.docx</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:53:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:53:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bf%a1%e6%81%af%e5%ad%a6%e6%80%9d%e7%bb%b4%e8%83%bd%e5%8a%9b%e8%80%83%e5%af%9f%e7%ad%94%e6%a1%88]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/信息学思维能力考察答案.docx]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/信息学思维能力考察答案.docx]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>由感性认识到理性认识——透析一类搏弈游戏的解答过程</title>
		<link>http://106.53.21.5/%e7%94%b1%e6%84%9f%e6%80%a7%e8%ae%a4%e8%af%86%e5%88%b0%e7%90%86%e6%80%a7%e8%ae%a4%e8%af%86-%e9%80%8f%e6%9e%90%e4%b8%80%e7%b1%bb%e6%90%8f%e5%bc%88%e6%b8%b8%e6%88%8f%e7%9a%84%e8%a7%a3/</link>
		<pubDate>Sat, 10 Aug 2019 10:53:51 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/由感性认识到理性认识——透析一类搏弈游戏的解答过程.doc</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:53:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:53:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%94%b1%e6%84%9f%e6%80%a7%e8%ae%a4%e8%af%86%e5%88%b0%e7%90%86%e6%80%a7%e8%ae%a4%e8%af%86-%e9%80%8f%e6%9e%90%e4%b8%80%e7%b1%bb%e6%90%8f%e5%bc%88%e6%b8%b8%e6%88%8f%e7%9a%84%e8%a7%a3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/由感性认识到理性认识——透析一类搏弈游戏的解答过程.doc]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/由感性认识到理性认识——透析一类搏弈游戏的解答过程.doc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>组合游戏略述——浅谈SG游戏的若干拓展及变形</title>
		<link>http://106.53.21.5/%e7%bb%84%e5%90%88%e6%b8%b8%e6%88%8f%e7%95%a5%e8%bf%b0-%e6%b5%85%e8%b0%88sg%e6%b8%b8%e6%88%8f%e7%9a%84%e8%8b%a5%e5%b9%b2%e6%8b%93%e5%b1%95%e5%8f%8a%e5%8f%98%e5%bd%a2/</link>
		<pubDate>Sat, 10 Aug 2019 10:53:52 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/组合游戏略述——浅谈SG游戏的若干拓展及变形.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:53:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:53:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%bb%84%e5%90%88%e6%b8%b8%e6%88%8f%e7%95%a5%e8%bf%b0-%e6%b5%85%e8%b0%88sg%e6%b8%b8%e6%88%8f%e7%9a%84%e8%8b%a5%e5%b9%b2%e6%8b%93%e5%b1%95%e5%8f%8a%e5%8f%98%e5%bd%a2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/组合游戏略述——浅谈SG游戏的若干拓展及变形.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/组合游戏略述——浅谈SG游戏的若干拓展及变形.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2019.8暑假</title>
		<link>http://106.53.21.5/2019-8%e6%9a%91%e5%81%87/</link>
		<pubDate>Sat, 10 Aug 2019 10:53:55 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/2019.8暑假.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:53:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:53:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2019-8%e6%9a%91%e5%81%87]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/2019.8暑假.zip]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/2019.8暑假.zip]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1563028459921-193x300-1</title>
		<link>http://106.53.21.5/1563028459921-193x300-1/</link>
		<pubDate>Sat, 10 Aug 2019 10:53:56 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/1563028459921-193x300-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:53:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:53:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1563028459921-193x300-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/1563028459921-193x300-1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/1563028459921-193x300-1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:115;s:6:"height";i:115;s:4:"file";s:35:"2019/08/1563028459921-193x300-1.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vitrite（精简）</title>
		<link>http://106.53.21.5/vitrite%ef%bc%88%e7%b2%be%e7%ae%80%ef%bc%89/</link>
		<pubDate>Sat, 10 Aug 2019 10:54:10 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/Vitrite（精简）.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:54:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:54:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[vitrite%ef%bc%88%e7%b2%be%e7%ae%80%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/Vitrite（精简）.zip]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/Vitrite（精简）.zip]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>管道图2-150x144</title>
		<link>http://106.53.21.5/%e7%ae%a1%e9%81%93%e5%9b%be2-150x144/</link>
		<pubDate>Sat, 10 Aug 2019 10:54:11 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/管道图2-150x144.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:54:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:54:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%ae%a1%e9%81%93%e5%9b%be2-150x144]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/管道图2-150x144.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/管道图2-150x144.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:150;s:6:"height";i:144;s:4:"file";s:30:"2019/08/管道图2-150x144.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"管道图2-150x144-150x144.jpg";s:5:"width";i:150;s:6:"height";i:144;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>信息学思维能力考察答案</title>
		<link>http://106.53.21.5/%e4%bf%a1%e6%81%af%e5%ad%a6%e6%80%9d%e7%bb%b4%e8%83%bd%e5%8a%9b%e8%80%83%e5%af%9f%e7%ad%94%e6%a1%88-2/</link>
		<pubDate>Sat, 10 Aug 2019 10:55:04 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/信息学思维能力考察答案-1.docx</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:55:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:55:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bf%a1%e6%81%af%e5%ad%a6%e6%80%9d%e7%bb%b4%e8%83%bd%e5%8a%9b%e8%80%83%e5%af%9f%e7%ad%94%e6%a1%88-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/信息学思维能力考察答案-1.docx]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/信息学思维能力考察答案-1.docx]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>由感性认识到理性认识——透析一类搏弈游戏的解答过程</title>
		<link>http://106.53.21.5/%e7%94%b1%e6%84%9f%e6%80%a7%e8%ae%a4%e8%af%86%e5%88%b0%e7%90%86%e6%80%a7%e8%ae%a4%e8%af%86-%e9%80%8f%e6%9e%90%e4%b8%80%e7%b1%bb%e6%90%8f%e5%bc%88%e6%b8%b8%e6%88%8f%e7%9a%84%e8%a7%a3-2/</link>
		<pubDate>Sat, 10 Aug 2019 10:55:05 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/由感性认识到理性认识——透析一类搏弈游戏的解答过程-1.doc</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:55:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:55:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%94%b1%e6%84%9f%e6%80%a7%e8%ae%a4%e8%af%86%e5%88%b0%e7%90%86%e6%80%a7%e8%ae%a4%e8%af%86-%e9%80%8f%e6%9e%90%e4%b8%80%e7%b1%bb%e6%90%8f%e5%bc%88%e6%b8%b8%e6%88%8f%e7%9a%84%e8%a7%a3-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/由感性认识到理性认识——透析一类搏弈游戏的解答过程-1.doc]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/由感性认识到理性认识——透析一类搏弈游戏的解答过程-1.doc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>组合游戏略述——浅谈SG游戏的若干拓展及变形</title>
		<link>http://106.53.21.5/%e7%bb%84%e5%90%88%e6%b8%b8%e6%88%8f%e7%95%a5%e8%bf%b0-%e6%b5%85%e8%b0%88sg%e6%b8%b8%e6%88%8f%e7%9a%84%e8%8b%a5%e5%b9%b2%e6%8b%93%e5%b1%95%e5%8f%8a%e5%8f%98%e5%bd%a2-2/</link>
		<pubDate>Sat, 10 Aug 2019 10:55:05 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/组合游戏略述——浅谈SG游戏的若干拓展及变形-1.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:55:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:55:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%bb%84%e5%90%88%e6%b8%b8%e6%88%8f%e7%95%a5%e8%bf%b0-%e6%b5%85%e8%b0%88sg%e6%b8%b8%e6%88%8f%e7%9a%84%e8%8b%a5%e5%b9%b2%e6%8b%93%e5%b1%95%e5%8f%8a%e5%8f%98%e5%bd%a2-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/组合游戏略述——浅谈SG游戏的若干拓展及变形-1.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/组合游戏略述——浅谈SG游戏的若干拓展及变形-1.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-图片2-1-150x150</title>
		<link>http://106.53.21.5/cropped-%e5%9b%be%e7%89%872-1-150x150/</link>
		<pubDate>Sat, 10 Aug 2019 10:55:06 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/cropped-图片2-1-150x150.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:55:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:55:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-%e5%9b%be%e7%89%872-1-150x150]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/cropped-图片2-1-150x150.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/cropped-图片2-1-150x150.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:150;s:6:"height";i:150;s:4:"file";s:37:"2019/08/cropped-图片2-1-150x150.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IOI2019中国国家候选队论文集</title>
		<link>http://106.53.21.5/ioi2019%e4%b8%ad%e5%9b%bd%e5%9b%bd%e5%ae%b6%e5%80%99%e9%80%89%e9%98%9f%e8%ae%ba%e6%96%87%e9%9b%86/</link>
		<pubDate>Sat, 10 Aug 2019 10:55:06 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/IOI2019中国国家候选队论文集.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:55:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:55:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ioi2019%e4%b8%ad%e5%9b%bd%e5%9b%bd%e5%ae%b6%e5%80%99%e9%80%89%e9%98%9f%e8%ae%ba%e6%96%87%e9%9b%86]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/IOI2019中国国家候选队论文集.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/IOI2019中国国家候选队论文集.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mm_facetoface_collect_qrcode_1563028389819-219x300-1</title>
		<link>http://106.53.21.5/mm_facetoface_collect_qrcode_1563028389819-219x300-1/</link>
		<pubDate>Sat, 10 Aug 2019 10:55:07 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/mm_facetoface_collect_qrcode_1563028389819-219x300-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:55:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:55:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mm_facetoface_collect_qrcode_1563028389819-219x300-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/mm_facetoface_collect_qrcode_1563028389819-219x300-1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/mm_facetoface_collect_qrcode_1563028389819-219x300-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:124;s:6:"height";i:124;s:4:"file";s:64:"2019/08/mm_facetoface_collect_qrcode_1563028389819-219x300-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>QQ浏览器截图20190801201439</title>
		<link>http://106.53.21.5/qq%e6%b5%8f%e8%a7%88%e5%99%a8%e6%88%aa%e5%9b%be20190801201439/</link>
		<pubDate>Sat, 10 Aug 2019 10:55:20 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/QQ浏览器截图20190801201439.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:55:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:55:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e6%b5%8f%e8%a7%88%e5%99%a8%e6%88%aa%e5%9b%be20190801201439]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/QQ浏览器截图20190801201439.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/QQ浏览器截图20190801201439.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:426;s:6:"height";i:223;s:4:"file";s:43:"2019/08/QQ浏览器截图20190801201439.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"QQ浏览器截图20190801201439-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:43:"QQ浏览器截图20190801201439-300x157.png";s:5:"width";i:300;s:6:"height";i:157;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>博弈by高嘉煊-1</title>
		<link>http://106.53.21.5/%e5%8d%9a%e5%bc%88by%e9%ab%98%e5%98%89%e7%85%8a-1/</link>
		<pubDate>Sat, 10 Aug 2019 10:55:21 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/博弈by高嘉煊-1.pptx</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:55:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:55:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8d%9a%e5%bc%88by%e9%ab%98%e5%98%89%e7%85%8a-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/博弈by高嘉煊-1.pptx]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/博弈by高嘉煊-1.pptx]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>捕获-300x134</title>
		<link>http://106.53.21.5/%e6%8d%95%e8%8e%b7-300x134/</link>
		<pubDate>Sat, 10 Aug 2019 10:55:23 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/捕获-300x134-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:55:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:55:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8d%95%e8%8e%b7-300x134]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/捕获-300x134-1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/捕获-300x134-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:300;s:6:"height";i:134;s:4:"file";s:28:"2019/08/捕获-300x134-1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"捕获-300x134-1-150x134.png";s:5:"width";i:150;s:6:"height";i:134;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"捕获-300x134-1-300x134.png";s:5:"width";i:300;s:6:"height";i:134;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>谷歌访问助手_v2.3.0</title>
		<link>http://106.53.21.5/%e8%b0%b7%e6%ad%8c%e8%ae%bf%e9%97%ae%e5%8a%a9%e6%89%8b_v2-3-0/</link>
		<pubDate>Sat, 10 Aug 2019 10:55:23 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/谷歌访问助手_v2.3.0.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:55:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:55:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%b0%b7%e6%ad%8c%e8%ae%bf%e9%97%ae%e5%8a%a9%e6%89%8b_v2-3-0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/谷歌访问助手_v2.3.0.zip]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/谷歌访问助手_v2.3.0.zip]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hello,world!</title>
		<link>http://106.53.21.5/index.php/2019/07/07/hello-world/</link>
		<pubDate>Sat, 06 Jul 2019 23:00:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[<p>开站大吉！ </p>
<!--more-->
<p>2019.7.15</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date><![CDATA[2019-07-07 07:00:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-06 23:00:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-world]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dwqr_like]]></wp:meta_key>
			<wp:meta_value><![CDATA[101]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dwqr_like]]></wp:meta_key>
			<wp:meta_value><![CDATA[101]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dwqr_like]]></wp:meta_key>
			<wp:meta_value><![CDATA[101]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[weizexin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[2564092179@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://106.53.21.5</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[61.142.103.98]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-11 20:13:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-11 12:13:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[您好，关于您说的这个问题，我可以为您作出以下解答：
该网站需要一个良好的网络环境，所以网站需要作出对用户的一定的限制，现只有管理员才有直接发表文章的资格，评论需要审核。
虽然其他用户不能直接发表文章，但可以投稿（投稿方式在主页上有），通过审核后，经过一定的修改美化才出现在公众的视野中。
关于管理员，管理员是加入了A Blog团队，经过一定的培训才能开始管理，我们欢迎各位加入A Blog团队，详情请发邮件咨询，邮件地址：xinxizhijiaguanfang@vip.qq.com。
关于A Blog，由于A Blog是小网站，没有任何赞助商资助，维护服务器需要一定费用，管理员需要倒贴钱（省吃俭用）去维护自己的纯洁（无任何商业利益）的兴趣爱好，故每位管理员都有义务地去为网站捐献自己一份力。（若想资助，可在每篇文章下面用微信支付（腾讯云只支持微信和QQ支付）赞赏给我们，所有的钱将直接入进腾讯云的服务器维护账号中，备注姓名即可将名字放到资助墙上）]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>11</wp:comment_parent>
			<wp:comment_user_id>3</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[钟, 梓俊]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[1174973100@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://106.53.21.5</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[61.142.103.98]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-10 19:28:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-10 11:28:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[开站大吉！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[sun*]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[1260779759@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[61.142.103.98]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-11 19:24:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-11 11:24:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[强烈谴责：无法发表文章！！！！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>11</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>wzx 的分站</title>
		<link>http://106.53.21.5/index.php/wzx/</link>
		<pubDate>Sat, 10 Aug 2019 10:11:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>名言区：</h1>
<ul>
<li>模拟只会猜题意,贪心只能过样例。数学上来先打表,DP一般看规律。组合数学靠运气,计算几何瞎暴力。图论一顿套模板,数论只会GCD。</li>
<li>世界上没有一个人能代替另一个人。</li>
<li>每个人都有不愿回想的……记忆，而我能感知到这些。</li>
<li>只有不怕死的人才配活着。</li>
<li>整个物理学就像是一个大谜，走到它的尽头，连整个世界是否存在都成了问题。</li>
<li>If you can't win the game, change the rules.</li>
<li>你的无畏来源于无知。</li>
<li>数学和物理，就是把看不见的星星写在了纸上。</li>
<li>我曾经失落失望失掉所有方向，直到看见平凡才是唯一的答案。</li>
</ul>
<h1>娱乐区：</h1>
<ul>
<li><a href="https://slay.one/">Slay one</a></li>
</ul>
<h1>共享区：</h1>
<h2>比赛答案：</h2>
<ul>
<li><a href="http://106.53.21.5/wp-content/uploads/2019/08/信息学思维能力考察答案.docx">2019纪中信息学思维能力考察答案</a></li>
</ul>
<h2>实用程序：</h2>
<ul>
<li>
<p><a href="http://106.53.21.5/wp-content/uploads/2019/08/Vitrite（精简）.zip">Vitrite（精简）</a></p>
</li>
<li>
<p><a href="http://106.53.21.5/wp-content/uploads/2019/08/谷歌访问助手_v2.3.0.zip">谷歌访问助手_v2.3.0</a></p>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:11:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:11:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wzx]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Social - 登录</title>
		<link>http://106.53.21.5/index.php/login/</link>
		<pubDate>Sat, 10 Aug 2019 10:32:42 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/index.php/login/</guid>
		<description></description>
		<content:encoded><![CDATA[[xh_social_page_login]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:32:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:32:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[login]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[account/login.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Social - 注册</title>
		<link>http://106.53.21.5/index.php/register/</link>
		<pubDate>Sat, 10 Aug 2019 10:32:42 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/index.php/register/</guid>
		<description></description>
		<content:encoded><![CDATA[[xh_social_page_register]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:32:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:32:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[register]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[account/register.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Social - 找回密码</title>
		<link>http://106.53.21.5/index.php/findpassword/</link>
		<pubDate>Sat, 10 Aug 2019 10:32:42 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/index.php/findpassword/</guid>
		<description></description>
		<content:encoded><![CDATA[[xh_social_page_findpassword]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:32:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:32:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[findpassword]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[account/findpassword.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>管道图-300x45-300x45</title>
		<link>http://106.53.21.5/index.php/2019/08/07/gmoj-p1432%e3%80%90%e8%be%93%e6%b2%b9%e7%ae%a1%e9%81%93%e3%80%91/%e7%ae%a1%e9%81%93%e5%9b%be-300x45-300x45/</link>
		<pubDate>Sat, 10 Aug 2019 10:55:25 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/管道图-300x45-300x45-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:55:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:55:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%ae%a1%e9%81%93%e5%9b%be-300x45-300x45]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>264</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/管道图-300x45-300x45-1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/管道图-300x45-300x45-1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:300;s:6:"height";i:45;s:4:"file";s:37:"2019/08/管道图-300x45-300x45-1.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:36:"管道图-300x45-300x45-1-150x45.jpg";s:5:"width";i:150;s:6:"height";i:45;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:36:"管道图-300x45-300x45-1-300x45.jpg";s:5:"width";i:300;s:6:"height";i:45;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>图教1-825x510</title>
		<link>http://106.53.21.5/%e5%9b%be%e6%95%991-825x510/</link>
		<pubDate>Sat, 10 Aug 2019 10:55:27 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/图教1-825x510-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:55:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:55:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%9b%be%e6%95%991-825x510]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/图教1-825x510-1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/图教1-825x510-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:825;s:6:"height";i:510;s:4:"file";s:29:"2019/08/图教1-825x510-1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"图教1-825x510-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"图教1-825x510-1-300x185.png";s:5:"width";i:300;s:6:"height";i:185;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"图教1-825x510-1-768x475.png";s:5:"width";i:768;s:6:"height";i:475;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>图教2</title>
		<link>http://106.53.21.5/%e5%9b%be%e6%95%992/</link>
		<pubDate>Sat, 10 Aug 2019 10:55:27 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/图教2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:55:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:55:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%9b%be%e6%95%992]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/图教2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/图教2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:960;s:6:"height";i:540;s:4:"file";s:19:"2019/08/图教2.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"图教2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"图教2-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"图教2-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"图教2-825x510.png";s:5:"width";i:825;s:6:"height";i:510;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>管道图2-150x144-150x144</title>
		<link>http://106.53.21.5/index.php/2019/08/07/gmoj-p1432%e3%80%90%e8%be%93%e6%b2%b9%e7%ae%a1%e9%81%93%e3%80%91/%e7%ae%a1%e9%81%93%e5%9b%be2-150x144-150x144/</link>
		<pubDate>Sat, 10 Aug 2019 10:55:29 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/管道图2-150x144-150x144-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:55:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:55:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%ae%a1%e9%81%93%e5%9b%be2-150x144-150x144]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>264</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/管道图2-150x144-150x144-1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/管道图2-150x144-150x144-1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:150;s:6:"height";i:144;s:4:"file";s:40:"2019/08/管道图2-150x144-150x144-1.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:40:"管道图2-150x144-150x144-1-150x144.jpg";s:5:"width";i:150;s:6:"height";i:144;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>下载-2-150x150</title>
		<link>http://106.53.21.5/%e4%b8%8b%e8%bd%bd-2-150x150-2/</link>
		<pubDate>Sat, 10 Aug 2019 10:55:30 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/下载-2-150x150-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 18:55:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:55:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%8b%e8%bd%bd-2-150x150-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/下载-2-150x150-1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/下载-2-150x150-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:150;s:6:"height";i:150;s:4:"file";s:30:"2019/08/下载-2-150x150-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wp-posts</title>
		<link>http://106.53.21.5/wp-posts/</link>
		<pubDate>Sat, 10 Aug 2019 13:21:43 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/wp-posts.txt</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 21:21:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 13:21:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wp-posts]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/wp-posts.txt]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/wp-posts.txt]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-cropped-图片2-1-150x150.png</title>
		<link>http://106.53.21.5/cropped-cropped-%e5%9b%be%e7%89%872-1-150x150-png/</link>
		<pubDate>Sat, 10 Aug 2019 23:46:19 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/cropped-cropped-图片2-1-150x150.png</guid>
		<description></description>
		<content:encoded><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/cropped-cropped-图片2-1-150x150.png]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date><![CDATA[2019-08-11 07:46:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 23:46:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-cropped-%e5%9b%be%e7%89%872-1-150x150-png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/cropped-cropped-图片2-1-150x150.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/cropped-cropped-图片2-1-150x150.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-logo]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:248;s:6:"height";i:248;s:4:"file";s:45:"2019/08/cropped-cropped-图片2-1-150x150.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:45:"cropped-cropped-图片2-1-150x150-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-cropped-图片2-1-150x150-1.png</title>
		<link>http://106.53.21.5/cropped-cropped-%e5%9b%be%e7%89%872-1-150x150-1-png/</link>
		<pubDate>Sat, 10 Aug 2019 23:46:31 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/cropped-cropped-图片2-1-150x150-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/cropped-cropped-图片2-1-150x150-1.png]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date><![CDATA[2019-08-11 07:46:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 23:46:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-cropped-%e5%9b%be%e7%89%872-1-150x150-1-png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/cropped-cropped-图片2-1-150x150-1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:47:"2019/08/cropped-cropped-图片2-1-150x150-1.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:47:"cropped-cropped-图片2-1-150x150-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:47:"cropped-cropped-图片2-1-150x150-1-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:47:"cropped-cropped-图片2-1-150x150-1-512x510.png";s:5:"width";i:512;s:6:"height";i:510;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-270";a:4:{s:4:"file";s:47:"cropped-cropped-图片2-1-150x150-1-270x270.png";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-192";a:4:{s:4:"file";s:47:"cropped-cropped-图片2-1-150x150-1-192x192.png";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-180";a:4:{s:4:"file";s:47:"cropped-cropped-图片2-1-150x150-1-180x180.png";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}s:12:"site_icon-32";a:4:{s:4:"file";s:45:"cropped-cropped-图片2-1-150x150-1-32x32.png";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/cropped-cropped-图片2-1-150x150-1.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【教程】BFS学习笔记</title>
		<link>http://106.53.21.5/index.php/2019/07/12/%e3%80%90%e6%95%99%e7%a8%8b%e3%80%91bfs%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/</link>
		<pubDate>Fri, 12 Jul 2019 15:42:27 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=126</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
<li>例子(已被授予主人公的名字使用权) </li>
</ul>
<p>ZZJ 进入了一个 n × m 的迷宫矩阵，执着的他表示要穿过迷宫。  </p>
<p>ZZJ 在地图的左上角，而迷宫出口在右下角，设进入每个房间都需要 1 的时间，他在入口的地面上捡到一张迷宫地图，发现有一些障碍物（图中以“障碍”表示，代码中以“#”表示，存在map数组中），于是他决定计算出自己到终点最少需要时间（请思考后再往下看）。 </p>
<table>
<thead>
<tr>
<th>\</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>起点</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>障碍</td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td></td>
<td></td>
<td>障碍</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>4</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>障碍</td>
<td></td>
<td></td>
</tr>
<tr>
<td>5</td>
<td></td>
<td>障碍</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>终点</td>
</tr>
</tbody>
</table>
<!--more-->
<ul>
<li>
<p>思路：</p>
</li>
<li>
<p>首先，我们需要一个小本本存ZZJ到达的地方及步数： </p>
</li>
</ul>
<pre><code>struct nod{int x,y,t;}f[100001];//x,y表示位置，t表示ZZJ到达此点需要的步数</code></pre>
<ul>
<li>
<p>其次，我们需要一个bool数组存i,j这个位置是否被走过以及一个map数组存地图：</p>
<pre><code>bool bz[101][101];//这里以0&lt;n,m&lt;=100为数据范围，实际情况请以题面修改数组范围
char map[101][101]; </code></pre>
</li>
<li>
<p>再次，我们需要一个方向数组，使ZZJ能上、下、左、右移动：</p>
</li>
</ul>
<pre><code>int dx[4]={0,1,0,-1};
int dy[4]={1,0,-1,0}; </code></pre>
<ul>
<li>准备完毕了，ZZJ可以出发啦!</li>
<li>首先，ZZJ将自己的位置存进小本本的第一格里：</li>
</ul>
<pre><code>tou=1,wei=2;//用两个指针指向小本本队头和队尾
f[tou].x=1;
f[tou].y=1;
f[tou].t=0;</code></pre>
<ul>
<li>接着，ZZJ通过方向数组到达一个新位置：</li>
</ul>
<pre><code>int nx=f[tou].x+dx[i];
int ny=f[tou].y+dy[i];</code></pre>
<ul>
<li>但是ZZJ有可能跑出了迷宫，掉下悬崖了，所以我们要判断一下ZZJ站在的位置是否在迷宫内：</li>
</ul>
<pre><code>if(nx&lt;1||nx&gt;n||ny&lt;1||ny&gt;m)continue;//跑出去就不要他了</code></pre>
<ul>
<li>
<p>如果ZZJ已经到了终点，那就是最短到达的距离啦（因为在这个地图中到达每一个点距离都为1），输出小本本的当前的 <code class="language-katex katex-inline">t+1</code> ，退出搜索就好啦就好啦：</p>
<pre><code>if(nx==n&amp;&amp;ny==m) 
{
printf(&quot;ZZJ到达终点的最短距离是：%d&quot;,f[tou].t+1);
return;
} </code></pre>
</li>
<li>
<p>如果ZZJ到达的是一个新的非障碍的点，并且没来过，ZZJ就在他的小本本上记录下他的位置：</p>
</li>
</ul>
<pre><code>if(map[nx][ny]==&#039;.&#039;&amp;&amp;bz[nx][ny]==false)
{
    bz[nx][ny]=true;
    f[wei].x=nx;
    f[wei].y=ny;
    f[wei].t=f[tou].t+1;
    wei++;
}</code></pre>
<ul>
<li>ZZJ走过了（遍历）周围可走的点后，就将小本本的队头往后挪一个，开始了新的遍历（直到没有点可以更新出新的点时停止，即 $tou=wei$ ）： </li>
</ul>
<pre><code>tou++;</code></pre>
<ul>
<li>这就是整个bfs的完整过程啦，上完整代码：</li>
</ul>
<pre><code>#include&lt;cstdio&gt;
int n,m,tou,wei;
int dx[4]={0,1,0,-1};
int dy[4]={1,0,-1,0};
bool bz[101][101];
char map[101][102];
struct nod{int x,y,t;} f[10001];
void bfs(int sx,int sy)
{
    tou=1,wei=2;
    f[tou].x=sx;
    f[tou].y=sy;
    f[tou].t=0;
    while(tou&lt;wei)
    {
        for(int i=0;i&lt;3;i++)
        {
            int nx=f[tou].x+dx[i];
            int ny=f[tou].y+dy[i];
            if(nx&lt;1 || nx&gt;n || ny&lt;1 || ny&gt;m)
                continue;
            if(nx==n &amp;&amp; ny==m)
            {
                printf(&quot;ZZJ到达终点的最短距离是：%d&quot;,f[tou].t+1);
                return;
            }
            if(map[nx][ny]==&#039;.&#039;&amp;&amp;bz[nx][ny]==false)
            {
                bz[nx][ny]=true;
                f[wei].x=nx;
                f[wei].y=ny;
                f[wei].t=f[tou].t+1;
                wei++;
            }
        }
        tou++;
    }
}
int main()
{
    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
    for(int i=1;i&lt;=n;i++)
    {
        for(int j=1;j&lt;=m+1;j++)
        {
            scanf(&quot;%c&quot;,&amp;map[i][j]);//结尾要多读一个换行符
        }
    }
    bfs(1,1);
    return 0;
}</code></pre>
<ul>
<li>
<p>如果理解透了这道题，就练练手吧：</p>
</li>
<li>
<p><a href="http://noi.openjudge.cn/ch0205/2753/">题目练习</a></p>
</li>
<li>
<p>鸣谢： @<code class="language-katex katex-inline">\text{zhongzijun}</code> 。</p>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>126</wp:post_id>
		<wp:post_date><![CDATA[2019-07-12 23:42:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-12 15:42:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e6%95%99%e7%a8%8b%e3%80%91bfs%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bfs"><![CDATA[BFS]]></category>
		<category domain="category" nicename="%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0"><![CDATA[学习笔记]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90%e6%95%99%e7%a8%8b%e3%80%91dfs%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>迷宫图片</title>
		<link>http://106.53.21.5/index.php/2019/07/12/%e3%80%90%e6%95%99%e7%a8%8b%e3%80%91bfs%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/%e8%bf%b7%e5%ae%ab%e5%9b%be%e7%89%87/</link>
		<pubDate>Sun, 11 Aug 2019 07:39:45 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/迷宫图片.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date><![CDATA[2019-08-11 15:39:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-11 07:39:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bf%b7%e5%ae%ab%e5%9b%be%e7%89%87]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>126</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/迷宫图片.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/迷宫图片.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:339;s:6:"height";i:247;s:4:"file";s:24:"2019/08/迷宫图片.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"迷宫图片-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"迷宫图片-300x219.png";s:5:"width";i:300;s:6:"height";i:219;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>捕获-300x134</title>
		<link>http://106.53.21.5/index.php/2019/08/04/class-game-theory/%e6%8d%95%e8%8e%b7-300x134-2/</link>
		<pubDate>Sun, 11 Aug 2019 08:31:21 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/捕获-300x134.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date><![CDATA[2019-08-11 16:31:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-11 08:31:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8d%95%e8%8e%b7-300x134-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>137</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/捕获-300x134.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/捕获-300x134.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:300;s:6:"height";i:134;s:4:"file";s:26:"2019/08/捕获-300x134.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"捕获-300x134-150x134.png";s:5:"width";i:150;s:6:"height";i:134;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"捕获-300x134-300x134.png";s:5:"width";i:300;s:6:"height";i:134;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P1241【PermRLE】</title>
		<link>http://106.53.21.5/index.php/2019/07/13/gmoj-p1241%e3%80%90permrle%e3%80%91/</link>
		<pubDate>Fri, 12 Jul 2019 22:14:54 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=142</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>给你一个长度为 <code class="language-katex katex-inline">n</code> 的字符串，和一个正整数 <code class="language-katex katex-inline">m</code> ，其中 <code class="language-katex katex-inline">m</code> 能整除 <code class="language-katex katex-inline">n</code> ，现有一算法就是把整个字符串分成 <code class="language-katex katex-inline">\dfrac{n}{m}</code> 段，然后每一段按照一个相同的 <code class="language-katex katex-inline">1</code> ~ <code class="language-katex katex-inline">m</code> 的排列方式进行重新排列，然后把这 <code class="language-katex katex-inline">\dfrac{n}{m}</code> 段合并，算法把字符串中连续相同的字符合并成一个字符，得到一个新字符串。</p>
<p>请你求出新的字符串可能的最短长度。</p>
<p><code class="language-katex katex-inline">1 \leq m \leq 16,1 \leq n \leq 5 \leq 10^4</code> 。</p>
<p>时间限制为 4s ，空间限制为 65536 KB 。</p>
<!--more-->
<h2>Solution</h2>
<p>发现 <code class="language-katex katex-inline">m</code> 很小，考虑使用 <strong>状压 DP</strong> 来解题 。</p>
<p>设 <code class="language-katex katex-inline">f[S][i][j]</code> 表示当前已经选的数的状态为 <code class="language-katex katex-inline">S</code> ，排列中的第一个数是 <code class="language-katex katex-inline">i</code> ， <strong>当前</strong> 已经选择的最后一个数是 <code class="language-katex katex-inline">j</code> 的情况下的新字符串可能的最小长度。</p>
<p>但是我们发现这样会空超。</p>
<p>考虑删掉一维，于是我们得到了下面的定义：</p>
<p>设 <code class="language-katex katex-inline">f[S][i]</code> 表示当前已经选的数的状态为 <code class="language-katex katex-inline">S</code> ， <strong>当前</strong> 已经选择的最后一个数是 i 的情况下的新字符串可能的最小长度。</p>
<p>然后枚举 <strong>排列中的第一个数</strong> 即可。</p>
<p>这样就不会空超了。</p>
<p>然后我们设 <code class="language-katex katex-inline">sum[i][j]</code> 表示如果在排列中， <code class="language-katex katex-inline">i</code> 在 <code class="language-katex katex-inline">j</code> 的后面一个位置，那么所新产生的长度为 <code class="language-katex katex-inline">sum[i][j]</code> 。</p>
<p>这个是可以用 <code class="language-katex katex-inline">O(nm)</code> 的时间复杂度预处理出来的。</p>
<p>并且设 <code class="language-katex katex-inline">same(x,y)</code> 表示当排列中的第 <code class="language-katex katex-inline">m</code> 个数为 <code class="language-katex katex-inline">x</code> ，排列中的第一个数为 <code class="language-katex katex-inline">y</code> 时能够消掉的长度为 <code class="language-katex katex-inline">same(x,y)</code> 。</p>
<p>这个是可以用 <code class="language-katex katex-inline">O(\dfrac{n}{m})</code> 的时间复杂度求出来的，然后就可以利用它们来转移了。</p>
<p>转移方程如下：</p>
<pre><code class="language-katex">f[S|2^j][j]=\begin{cases} \min\{f[S][i]+sum[i][j]\}\quad\quad\quad\quad\quad\quad\quad\quad\; (S|2^j) \not= 2^m-1 \\ \min\{f[S][i]+sum[i][j]+same(j,he)\} \quad\quad (S|2^j) \not= 2^m-1 \end{cases}</code></pre>
<p>。</p>
<p>其中 <code class="language-katex katex-inline">he</code> 表示的是排列中的第一个数。</p>
<ul>
<li>
<p>时间复杂度</p>
<pre><code class="language-katex">O(2^mm^2+nm)</code></pre>
</li>
<li>
<p>，记得注意位运算的优先级！</p>
</li>
<li>
<p>然后这道题目就做完啦。</p>
</li>
</ul>
<h2>Code</h2>
<pre><code class="language-cpp">#include &lt;cstdio&gt;
#include &lt;cstring&gt;
int f[ 65537 ][ 17 ] , sum[ 17 ][ 17 ] ;
char st[ 1000001 ] ;
int ans = 2147483647 , n = 0 , m = 0 ;
int min( int x , int y )
{
    return x &lt; y ? x : y ;
}
int same( int x , int y )
{
    int da = 0 ;
    for(int i = 1 ; i &lt;= n / m - 1 ; i ++ )
    {
        char tx = st[ ( i - 1 ) * m + x ] ;
        char ty = st[ i * m + y ] ;
        if( tx == ty )
        {
            da ++ ;
        }
    }
    return da ;
}
void work( int he )
{
    memset( f , 127 / 3 , sizeof( f ) ) ;
    f[ 1 &lt;&lt; ( he - 1 ) ][ he ] = n / m ;
    int ma = ( 1 &lt;&lt; m ) - 1 ;
    for(int S = 1 ; S &lt;= ma ; S ++ )
    {
        if( ( S &amp; ( 1 &lt;&lt; ( he - 1 ) ) ) == 0 )
        {
            continue ;
        }
        for(int i = 1 ; i &lt;= m ; i ++ )
        {
            if( ( S &amp; ( 1 &lt;&lt; ( i - 1 ) ) ) == 0 )
            {
                continue ;
            }
            for(int j = 1 ; j &lt;= m ; j ++ )
            {
                if( ( S &amp; ( 1 &lt;&lt; ( j - 1 ) ) ) != 0 )
                {
                    continue ;
                }
                if( ( S | ( 1 &lt;&lt; ( j - 1 ) ) ) != ma )
                {
                    f[ S | ( 1 &lt;&lt; ( j - 1 ) ) ][ j ] = min( f[ S | ( 1 &lt;&lt; ( j - 1 ) ) ][ j ] , f[ S ][ i ] + sum[ i ][ j ] ) ;
                }
                else
                {
                    f[ S | ( 1 &lt;&lt; ( j - 1 ) ) ][ j ] = min( f[ S | ( 1 &lt;&lt; ( j - 1 ) ) ][ j ] , f[ S ][ i ] + sum[ i ][ j ] - same( j , he ) ) ;
                }
            }
        }
    }
    for(int i = 1 ; i &lt;= m ; i ++ )
    {
        if( he == i )
        {
            continue ;
        }
        ans = min( ans , f[ ma ][ i ] ) ;
    }
}
int main()
{
    scanf(&quot;%d&quot; , &amp;m ) ;
    scanf(&quot;%s&quot; , st + 1 ) ;
    n = strlen( st + 1 ) ;
    for(int i = 1 ; i &lt;= m ; i ++ )
    {
        for(int j = 1 ; j &lt;= m ; j ++ )
        {
            if( i == j )
            {
                continue ;
            }
            for(int k = 1 ; k &lt;= n / m ; k ++ )
            {
                if( st[ ( k - 1 ) * m + i ] != st[ ( k - 1 ) * m + j ] )
                {
                    sum[ i ][ j ] ++ ;
                }
            }
        }
    }
    for(int i = 1 ; i &lt;= m ; i ++ )
    {
        work( i ) ;
    }
    printf(&quot;%d&quot; , ans ) ;
    return 0 ;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date><![CDATA[2019-07-13 06:14:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-12 22:14:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p1241%e3%80%90permrle%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dp"><![CDATA[DP]]></category>
		<category domain="category" nicename="%e7%8a%b6%e5%8e%8bdp"><![CDATA[状压DP]]></category>
		<category domain="post_tag" nicename="%e7%8a%b6%e5%8e%8bdp"><![CDATA[状压DP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[142]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[gmoj-p1241%e3%80%90number%e3%80%91]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[cpp,c]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hello,world!</title>
		<link>http://106.53.21.5/index.php/helloworld__trashed/</link>
		<pubDate>Sun, 11 Aug 2019 23:18:51 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?page_id=251</guid>
		<description></description>
		<content:encoded><![CDATA[<p>23333333333333</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date><![CDATA[2019-08-12 07:18:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-11 23:18:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[helloworld__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1565565598]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[helloworld]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>T1</title>
		<link>http://106.53.21.5/t1/</link>
		<pubDate>Mon, 12 Aug 2019 07:51:15 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/wp-content/uploads/2019/08/T1.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>286</wp:post_id>
		<wp:post_date><![CDATA[2019-08-12 15:51:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-12 07:51:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[t1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://106.53.21.5/wp-content/uploads/2019/08/T1.zip]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2019/08/T1.zip]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[SDOI2011]染色</title>
		<link>http://106.53.21.5/?p=301</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[sun*]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=301</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Description</h1>
<p>题目大意：给你一棵树，并给出相应的树中父子关系以及每个点的权值，并给出<code class="language-katex katex-inline">m</code>个操作。
操作一：将节点<code class="language-katex katex-inline">a</code>到节点<code class="language-katex katex-inline">b</code>路径上所有点的权值改为<code class="language-katex katex-inline">c</code>。
操作二：查询节点<code class="language-katex katex-inline">a</code>到节点<code class="language-katex katex-inline">b</code>路径上数字段数量。（连续并相等的数字认为是一段的）</p>
<p>数据保证<code class="language-katex katex-inline">O(nm)</code>不能过，一般情况下<code class="language-katex katex-inline">n \leq 10^4</code>,<code class="language-katex katex-inline">m\leq10^5</code>。</p>
<h2>Solution</h2>
<p>这是一道很裸的树链剖分题目。
~树链剖分怎么做别问我~，好吧我就是来写怎么做的……</p>
<p>~树剖很简单，你们应该都会才对~。
我来讲树链剖分的其中一个做法：实链剖分。
我们先对于每个点为根的子树，找出这个点的重儿子以及重链（重儿子就是这个点的儿子中，所在子树节点最多的那个点；重链就是将这个点一直连向重儿子的边所构成的一条链），以及这个点所在的重链的顶端的点。（一个点也算一条重链）如图所示，紫色为重儿子，红色为重链。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>301</wp:post_id>
		<wp:post_date><![CDATA[2019-08-12 21:30:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【教程】博弈论学习笔记</title>
		<link>http://106.53.21.5/index.php/2019/08/04/class-game-theory/</link>
		<pubDate>Sun, 04 Aug 2019 08:34:59 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=137</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
<p>博弈论又被称为对策论（Game Theory）既是现代数学的一个新分支，也是运筹学的一个重要学科。
博弈论主要研究公式化了的激励结构间的相互作用。是研究具有斗争或竞争性质现象的数学理论和方法。 博弈论考虑游戏中的个体的预测行为和实际行为，并研究它们的优化策略。生物学家使用博弈理论来理解和预测进化论的某些结果。
博弈论已经成为经济学的标准分析工具之一。在金融学、证券学、生物学、经济学、国际关系、计算机科学、政治学、军事战略和其他很多学科都有广泛的应用。</p>
</blockquote>
<!--more-->
<h1>一、Nim游戏和巴什博弈</h1>
<p>先来观察两个游戏。</p>
<h4>游戏 A （Nim游戏）</h4>
<blockquote>
<p>甲乙两人面对若干堆石子，其中每一堆石子的数目可以任意确定。
例如  <code><code>【 图 1 】</code><code> 所示的初始局面：共 </code><code>n=3</code><code> 堆，其中第一堆的石子数 </code><code>a1=3</code><code> ，第二堆石子数 </code><code>a2=3</code><code> ，第三堆石子数 </code><code>a3=1</code></code> 。两人轮流按下列规则取走一些石子，游戏的规则如下：
每一步应取走至少一枚石子；
每一步只能从某一堆中取走部分或全部石子；
如果谁无法按规则取子，就输了。</p>
</blockquote>
<h4>游戏 B （巴什博弈）</h4>
<blockquote>
<p>甲乙双方事先约定一个数 <code><code>m</code><code> ，并且每次取石子的数目不能超过 </code><code>m</code></code> 个，其余规则同 <strong>游戏 A</strong> 。</p>
</blockquote>
<p><img src="http://106.53.21.5/wp-content/uploads/2019/08/捕获-300x134-300x134.png" alt="" /></p>
<p>我们关心的是，对于一个初始局面，究竟是 <code><code>先行者（甲）</code><code> 有必胜策略，还是 </code><code>后行者（乙）</code></code> 有必胜策略。</p>
<p>下面，我们从简单入手，先来研究研究这个游戏的一些性质。</p>
<ul>
<li>
<p>用一个 <code><code>n</code><code> 元组 </code><code>(a1, a2, …, an)</code></code> ，来描述游戏过程中的一个局面。</p>
</li>
<li>
<h3>局面的加法</h3>
<p><code class="language-katex katex-inline">(a_1, a_2, …, a_n) + (b_1, b_2, …, b_m) = (a_1, a_2, …, a_n, b_1, b_2, …, b_m)</code> 。
对于 局面A , B , S ，若 <code><code>S=A+B</code></code> ，则称局面 S 可以分解为“子局面” A 和 B 。
<code><code>局面(3, 3, 1)</code><code> 可以分解为 </code><code>(3, 3)</code><code> 和 </code><code>(1)</code></code> 。
如果初始局面可以分成两个相同的“子局面”，则乙有必胜策略。</p>
</li>
<li>
<p>对于局面S，若先行者有必胜策略，则称“ <strong>S胜</strong> ”。
对于局面S，若后行者有必胜策略，则称“ <strong>S负</strong> ”。
若 <code><code>A=(1)</code><code> ， </code><code>B=(3, 3)</code><code> ， </code><code>C=(2, 2, 5, 5, 5, 5, 7, 7)</code><code> ，则我们称 </code><code>A胜</code><code> ， </code><code>B负</code><code> ， </code><code>C负</code></code> 。</p>
</li>
<li>
<p><strong>如果 <code><code>局面S</code><code> 胜，则必存在取子的方法 </code><code>S→T</code><code> ，且 </code><code>T负</code></code> 。</strong>
<strong>如果 <code><code>局面S</code><code> 负，则对于任意取子方法 </code><code>S→T</code><code> ，有 </code><code>T胜</code></code> 。</strong></p>
</li>
<li>
<p>设 <code><code>初始局面S</code><code> 可以分解成两个子局面 </code><code>A</code><code> 和 </code><code>B</code></code> <strong>（分解理论）</strong> 。</p>
</li>
<li>
<p><strong>若 <code><code>A</code><code> 和 </code><code>B</code><code> 一胜一负，则 </code><code>S胜</code></code> 。</strong>
<strong>若 <code><code>A</code><code> 负 </code><code>B</code><code> 负，则 </code><code>S负</code></code> 。</strong>
<strong>若 <code><code>A</code><code> 胜 </code><code>B</code><code> 胜，则 </code><code>有时S胜，有时S负</code></code> 。</strong>
<strong>如果 <code><code>S=A+C+C</code><code> ，则 </code><code>S</code><code> 的胜负情况 与 </code><code>A</code></code> 相同。</strong>
<strong>即当 <code><code>S=A+B</code><code> 且 </code><code>B</code><code> 负时 </code><code>S</code><code> 的胜负情况与 </code><code>A</code></code> 相同。</strong>
【 图 1 】所示的初始局面 <code><code>(3, 3, 1) = (3) + (3) + (1)</code><code> ，与局面 </code><code>(1)</code><code> 的 </code><code>胜负情况相同</code></code> 。</p>
</li>
</ul>
<p><strong>请认真思考一下这是为什么。</strong></p>
<ul>
<li>
<p>图1中所示的初始局面 <code><code>(3, 3, 1)</code></code> 是“胜”局面，甲有必胜策略。
称一个石子也没有的局面为“空局面”。
空局面是“负”局面。</p>
</li>
<li>
<p>如果 <code><code>局面S</code><code> 中，存在两堆石子，它们的数目相等。用 </code><code>T</code><code> 表示从 </code><code>S</code><code> 中把这两堆石子拿掉之后的局面，则称“ </code><code>S可以简化为T</code></code> ”。
局面 <code><code>(2, 2, 2, 7, 9, 9)</code><code> 可以简化为 </code><code>(2, 2, 2, 7)</code><code> ，还可以进一步简化为 </code><code>(2, 7)</code></code> 。</p>
</li>
<li>
<p><strong>一个局面的胜负情况，与其简化后的局面相同。</strong>
例如三个局面 <code><code>(2, 2, 2, 7, 9, 9)</code><code> 、 </code><code>(2, 2, 2, 7)</code><code> 和 </code><code>(2, 7)</code></code> ，胜负情况都相同。</p>
</li>
<li>
<p>不能简化的局面称为“最简局面”。
局面 <code><code>(2, 7)</code></code> 是最简局面。
最简局面中不会有两堆相同的石子，故可以用一个集合来表示最简局面。
最简局面 <code><code>(2, 7)</code><code> 可以用 </code><code>集合{2, 7}</code></code> 来表示。</p>
</li>
<li>
<p>如果只关心局面的胜负，则一个局面可以用一个集合来描述。
图1所示的局面 <code><code>(3, 3, 1)</code><code> ，可以用 </code><code>集合{1}</code></code> 来描述。</p>
</li>
<li>
<p>如果用搜索（博弈树）的方法来解这个游戏，则采用集合来表示一个局面，比采用多元组来表示一个局面，搜索量将有所减少，但时间复杂度仍然很高。</p>
</li>
<li>
<p>能不能进一步简化一个局面的表示呢？</p>
</li>
<li>
<h3>类比与联想</h3>
</li>
</ul>
<p><strong>注意，这里的二进制加法指的是不进位的二进制加法。</strong></p>
<blockquote>
<p>二进制数的加法 VS 局面的加法
<code><code>大写字母AB</code><code> 表示 </code><code>局面</code><code> ， </code><code>小写字母ab</code></code> 表示二进制数。
若 <code><code>A和B相同</code><code> ，则 </code><code>A+B</code><code> 负；若 </code><code>a和b相等</code><code> ，则 </code><code>a+b为0</code></code> 。
若 <code><code>A胜B负</code><code> ，则 </code><code>A+B胜</code><code> ；若 </code><code>a≠0</code><code> 且 </code><code>b=0</code><code> ，则 </code><code>a+b≠0</code></code> 。
若 <code><code>B胜A负</code><code> ，则 </code><code>A+B胜</code><code> ；若 </code><code>b≠0</code><code> 且 </code><code>a=0</code><code> ，则 </code><code>a+b≠0</code></code> 。
若 <code><code>A负B负</code><code> ，则 </code><code>A+B负</code><code> ；若 </code><code>a=0</code><code> 且 </code><code>b=0</code><code> ，则 </code><code>a+b=0</code></code> 。
若 <code><code>A胜B胜</code><code> ，则 </code><code>A+B有时胜，有时负</code></code> 。
若 <code><code>a≠0</code><code> 且 </code><code>b≠0</code><code> ，则有时 </code><code>a+b≠0</code><code> ，有时 </code><code>a+b=0</code></code> 。
……</p>
</blockquote>
<ul>
<li>
<p>如果用 <code><code>二进制数s</code><code> 来表示一个 </code><code>局面S</code><code> 的 </code><code>胜或负</code><code> ， </code><code>S胜</code><code> 则 </code><code>s≠0</code><code> ， </code><code>S负</code><code> 则 </code><code>s=0</code></code> 。
局面的加法，与二进制数的加法，性质完全相同。
能否用一个二进制数，来表示一个局面呢？
用 <code><code>符号#S</code></code> ，表示局面S所对应的二进制数。</p>
</li>
<li>
<p>如果 <code><code>局面S</code><code> 只有一堆石子，则用这一堆石子数目所对应的 </code><code>二进制数</code><code> 来表示 </code><code>S</code></code> 。</p>
</li>
<li>
<p>例如 <code><code>#(5)=5=101</code></code> 。</p>
</li>
<li>
<p>若局面 <code><code>S=A+B</code><code> ，则 </code><code>#S=#A+#B</code></code> 。
局面 <code><code>(3, 3)=(3)+(3)</code><code> ，所以 </code><code>#(3, 3)=#(3)+#(3)=11+11=0</code></code> 。
局面 <code><code>(3, 3, 1)=(3, 3)+(1)</code><code> ，所以 </code><code>#(3, 3, 1)=#(3, 3)+#(1)=0+1=1</code></code> 。</p>
</li>
<li>
<p>函数f ：若 <code><code>局面S</code><code> 只有一堆石子，设 </code><code>S={a1}</code><code> ，则 </code><code>f(a1)=#S</code><code> ，即 </code><code>f(a1)=#(a1)</code></code> 。
对于 <code><code>游戏A</code><code> 来说， </code><code>#(5)=101</code><code> ，所以 </code><code>f(5)=101</code></code> 。
对于 <code><code>游戏A</code><code> 来说， </code><code>f(x)</code><code> 就是 </code><code>x</code><code> 所对应的 </code><code>二进制数</code><code> 。换句话说， </code><code>f(x)=x</code></code> 。
<code><code>游戏B</code><code> 的 </code><code>f函数</code><code> 则为 ： </code><code>f(x)=x mod (m+1)</code></code> 。</p>
</li>
<li>
<p>设局面 <code><code>S=(a1, a2, …, an)</code><code> ，即 </code><code>S=(a1)+(a2)+…+(an)</code><code> ，则 </code><code>#S=f(a1)+f(a2)+…+f(an)</code><code> 。例如 </code><code>#(3, 3, 1)=#((3)+(3)+(1))=#(3)+#(3)+#(1)=f(3)+f(3)+f(1)=11+11+1=1</code></code> 。 </p>
</li>
<li>
<p><strong>对于局面S，若#S=0，则S负；若#S≠0，则S胜。</strong></p>
</li>
<li>
<p><strong>二进制数 a, b ，若 a + b = 0 ，当且仅当 a = b 。</strong>
<strong>二进制数 a, b, s ，若 a + b = s ，则 a = b + s 。</strong></p>
</li>
<li>
<p><strong>二进制数 <code><code>a1+a2+…+an=p≠0</code><code> ，则</code><code>必存在 k</code><code> ，使得 </code><code>ak+p &lt; ak</code></code></strong> 。
因为 <code><code>p≠0</code><code> ，所以 </code><code>p</code><code> 的最高位是 </code><code>1</code></code> ；
设 <code><code>p</code><code> 的 </code><code>最高位</code><code> 是 </code><code>第q位</code></code> ；
<code><code>至少存在一个k</code><code> ，使得 </code><code>ak</code><code> 的 </code><code>第q位</code><code> 也是 </code><code>1</code></code> ；
<code><code>ak+p</code><code> 的 </code><code>第q位</code><code> 为 </code><code>0</code><code> ，所以 </code><code>ak+p &lt; ak</code></code> 。</p>
</li>
<li>
<p><strong>若 <code><code>#S=0</code><code> ，则无论先行者如何取子 </code><code>S→T</code><code> ，都有 </code><code>#T≠0</code></code></strong> 。
先行者只能从某一堆中取若干石子，不妨设他选择的就是第1堆；
设先行者从第1堆中取了x个石子，用T表示取完之后的局面；
设S=(a1, a2, …, an)，则T=(a1–x, a2, …, an)；
<code><code>#S=f(a1)+#(a2, …, an)=0</code></code>，故f(a1)=#(a2, …, an)；
<code><code>#T=f(a1–x)+#(a2, …, an)=f(a1–x)+f(a1)</code></code>；
x&gt;0→f(a1)≠f(a1–x)→f(a1)+f(a1–x)≠0→#T≠0。</p>
</li>
<li>
<p><strong>若 <code><code>#S≠0</code><code> ，则先行者必然存在一种取子方法 </code><code>S→T</code><code> ，且 </code><code>#T=0</code></code></strong> 。
设 <code><code>S=(a1, a2, …, an)</code><code> ， </code><code>p=#S=f(a1)+f(a2)+…+f(an)</code></code> ；
因为 <code><code>p≠0</code><code> ，所以 </code><code>必然存在k</code><code> ，使得 </code><code>f(ak)+p&lt;f(ak)</code><code> ，不妨设 </code><code>k=1</code><code> ， </code><code>f(a1)+p=x</code></code> ；
先行者将 <code><code>第1堆</code><code> 的石子的数目从 </code><code>a1</code><code> 变成 </code><code>x</code><code> ，用 </code><code>T</code><code> 表示 </code><code>这个局面</code></code> ；
<code><code>p=#S=f(a1)+#(a2, …, an)</code><code>，故 </code><code>#(a2, …, an)+2f(a1)=#(a2, …, an)=f(a1)+p=x</code></code> （两个相同的数相加等于 0 ）；
<code><code>#T=f(x)+#(a2, …, an)=f(x)+x=0</code></code> 。</p>
</li>
<li>
<p>若 <code><code>S</code><code> 是 </code><code>空局面</code><code> ，则 </code><code>#S=0</code></code> 。</p>
</li>
<li>
<p>若 <code><code>#S=0</code><code> ，则 </code><code>S负</code><code> ；若 </code><code>#S≠0</code><code> ，则 </code><code>S胜</code></code> 。</p>
</li>
<li>
<p><code><code>#(1, 2, 3)=01+10+11=0</code><code>，故 </code><code>局面(1, 2, 3)负</code></code> 。
<code><code>#(1, 2, 3, 4)=001+010+011+100=100</code><code>，故 </code><code>局面(1, 2, 3, 4)胜</code></code> 。</p>
</li>
<li>
<p>对于 <code><code>游戏A</code><code> 来说，任意的一个 </code><code>初始局面S=(a1, a2, …, an)</code><code> ，我们把这里的 </code><code>ai</code><code> 都看成是 </code><code>二进制数</code><code> 。令 </code><code>#S=a1+a2+…+an</code><code> 。若 </code><code>#S≠0</code><code> ，则 </code><code>先行者（甲）</code><code> 有必胜策略；否则 </code><code>#S=0</code><code> ，这时 </code><code>后行者（乙）</code></code> 有必胜策略。
下面把这个结论推广到 <code><code>游戏B</code></code> 。</p>
</li>
<li>
<p>对于任意初始局面 <code><code>S=(a1, a2, …, an)</code><code> ，令 </code><code>#S=f(a1)+f(a2)+…+f(an)</code></code> 。
若 <code><code>#S≠0</code><code> ，则 </code><code>先行者（甲）</code><code> 有必胜策略；否则 </code><code>后行者（乙）</code></code> 有必胜策略。
类似 <code><code>游戏A</code></code> 的证明。
<code><code>游戏B</code><code> 的解法与 </code><code>游戏A</code></code> 十分类似。这是因为两个游戏的规则相当类似。</p>
</li>
</ul>
<h1>二、威佐夫博奕</h1>
<h4>例题</h4>
<blockquote>
<p>有两堆各若干个物品，两个人轮流从某一堆或同时从两堆中取同样多的物品，规定每次至少取一个，多者不限，最后取光者得胜。</p>
</blockquote>
<ul>
<li>
<p>关键在于判断初始局面是不是奇异局势。是则先手输，否则先手赢。</p>
</li>
<li>
<p><strong>定义</strong>：对于形如 <code class="language-katex katex-inline">(a_k,b_k)(a_k ≤ b_k ,k=0，1，2，…,n)</code> ， <code class="language-katex katex-inline">a_k</code> 是前面没有出现过的最小的自然数 ， <code class="language-katex katex-inline">b_k=a_k+k</code> 的局势叫做奇异局势。</p>
</li>
<li>
<p><strong>例子</strong>：例如 <code class="language-katex katex-inline">(0,0)</code> 、 <code class="language-katex katex-inline">(1,2)</code> 、 <code class="language-katex katex-inline">(3,5)</code> 、 <code class="language-katex katex-inline">(4,7)</code> 、 <code class="language-katex katex-inline">(6,10)</code> 、 <code class="language-katex katex-inline">(8,13)</code> 、 <code class="language-katex katex-inline">(9,15)</code> 、 <code class="language-katex katex-inline">(11,18)</code> 、 <code class="language-katex katex-inline">(12,20)</code> 都是奇异局势。</p>
</li>
<li>
<p><strong>判断</strong>：当 <code class="language-katex katex-inline">\min(a,b)=\frac{1}{2}|b-a|(\sqrt{5}+1)</code> 时，局面 <code class="language-katex katex-inline">(a,b)</code> 是奇异局势。</p>
</li>
<li>
<p><strong>性质</strong></p>
</li>
</ul>
<ol>
<li>
<p>任何自然数都包含在一个且仅有一个奇异局势中。
由于 <code class="language-katex katex-inline">a[k]</code> 是未在前面出现过的最小自然数，所以有 <code class="language-katex katex-inline">a[k] > a[k-1]</code> ，而 <code class="language-katex katex-inline">b[k]= a[k] + k > a[k-1] + k > a[k-1] + k - 1 = b[k-1] > a[k-1]</code> 。所以 <code><code>性质1</code></code> 成立。</p>
</li>
<li>
<p>任意操作都可将奇异局势变为非奇异局势。
事实上，若只改变奇异局势 <code class="language-katex katex-inline">(a[k],b[k])</code> 的某一个分量，那么另一个分量不可能在其他奇异局势中，所以必然是非奇异局势。如果使 <code class="language-katex katex-inline">(a[k]，b[k])</code> 的两个分量同时减少，则由于其差不变，且不可能是其他奇异局势的差，因此也是非奇异局势。</p>
</li>
<li>
<p>采用适当的方法，可以将非奇异局势变为奇异局势。
假设面对的局势是 <code class="language-katex katex-inline">(a,b)</code> ，若 <code class="language-katex katex-inline">b = a</code> ，则同时从两堆中取走 <code class="language-katex katex-inline">a</code> 个物体，就变为了奇异局势 <code class="language-katex katex-inline">(0,0)</code> ；如果 <code class="language-katex katex-inline">a = a[k] , b > b[k]</code> 那么，取走 <code class="language-katex katex-inline">(b - b[k])</code> 个物体，即变为奇异局势；如果 <code class="language-katex katex-inline">a = a[k] , b < b[k]</code> 则同时从两堆中拿走 <code class="language-katex katex-inline">a-a[b-a]</code>（注：这里 <code class="language-katex katex-inline">(b-a)</code> 是 <code class="language-katex katex-inline">a</code> 的下标） 个物体变为奇异局势（ <code class="language-katex katex-inline">a[b-a] , b-a+a[b-a]</code> ）；如果 <code class="language-katex katex-inline">a > a[k] , b= a[k] + k</code> 则从第一堆中拿走多余的数量 <code class="language-katex katex-inline">(a - a[k])</code> 即可；如果 <code class="language-katex katex-inline">a < a[k] , b= a[k] + k</code> ，分两种情况，第一种， <code class="language-katex katex-inline">a=a[j] (j < k)</code> 从第二堆里面拿走 <code class="language-katex katex-inline">(b - b[j])</code> 即可；第二种，<code class="language-katex katex-inline">a=b[j] (j < k)</code> 从第二堆里面拿走 <code class="language-katex katex-inline">(b - a[j])</code> 即可。</p>
</li>
</ol>
<h1>三、SG函数</h1>
<p><code class="language-katex katex-inline">sg函数</code> 是定义在组合游戏上的函数，用 <code class="language-katex katex-inline">g(X)</code> 表示 <code class="language-katex katex-inline">状态X</code> 的函数值, <code class="language-katex katex-inline">F(\text{x})</code> 表示 <code class="language-katex katex-inline">局面X</code> 的后继状态，即如果能够通过 <code class="language-katex katex-inline">局面X</code> 直接到达 <code class="language-katex katex-inline">局面Y</code> ，那么 <code class="language-katex katex-inline">Y \in F(\text{x})</code> 。它的定义如下：</p>
<blockquote>
<p>mex(minimal excludant)运算，这是施加于一个集合的运算，表示最小的不属于这个集合的非负整数。例如 mex{0,1,2,4}=3 、 mex{2,3,5}=0 、 mex{}=0 。</p>
<p>“?”符号指的是补集。补集一般指绝对补集，即一般地，设 S 是一个集合， A 是 S 的一个子集，由 S 中所有不属于 A 的元素组成的集合，叫做子集 A 在 S 中的绝对补集。在集合论和数学的其他分支中，存在补集的两种定义：相对补集和绝对补集。</p>
</blockquote>
<p><code class="language-katex katex-inline">g(X)=\text{mex}(F(\text{x})) =\min(n|n∈?NF(\text{x}))</code></p>
<ul>
<li><strong>定理和证明1</strong>：</li>
</ul>
<p>对于 <code class="language-katex katex-inline">X=X_1+X_2+...+X_n</code> ，有 <code class="language-katex katex-inline">g(X)=g(X_1)⊕g(X_2)⊕...⊕g(X_n)</code> 。</p>
<p>令 <code class="language-katex katex-inline">b=g1(X_1)⊕g2(X_2)⊕...⊕gn(X_n)</code> ，那么我们需要证明：
1）对于任意 <code class="language-katex katex-inline">a∈N</code> 且 <code class="language-katex katex-inline">a < b</code>，一定存在 <code class="language-katex katex-inline">X'∈F(X)</code> 使 <code class="language-katex katex-inline">g(X')=a</code> 。
2）对于任意 <code class="language-katex katex-inline">X'∈F(X)</code> ，那么 <code class="language-katex katex-inline">G(X')≠b</code> 。</p>
<ul>
<li><strong>定理和证明2</strong></li>
</ul>
<p>对于任意 <code class="language-katex katex-inline">X'∈F(X)</code> ，那么 <code class="language-katex katex-inline">G(X')≠b</code> 。
对于一个任意的的 <code class="language-katex katex-inline">X</code> 存在 <code class="language-katex katex-inline">X’∈F(X)</code> 使 <code class="language-katex katex-inline">g(X’)=b</code> 。</p>
<p>那么令 <code class="language-katex katex-inline">X’=(X_1,…,X_i’,…,X_n),g(X’)=g1(X_1)⊕ …gi(X_i’)…gn(X_n)=b</code> 。
因此 <code class="language-katex katex-inline">gi(X_i’)=gi(X_i)</code> ，与SG函数的定义矛盾，得证。</p>
<p>下面就让我们看一下 <code class="language-katex katex-inline">SG函数</code> 的应用。</p>
<h4>例题</h4>
<blockquote>
<p>有一堆石子共 <code class="language-katex katex-inline">n</code> 个石子，两个人轮流取，每次都只能取 2 的幂次方的个数的石子，取到最后一颗石子的人是胜者。给出你 <code class="language-katex katex-inline">n</code> 的值，请你判断先手是否有必胜策略。
<code class="language-katex katex-inline">1 \leq n \leq 10^3</code> 。
题目来源：HDU 1847（Good Luck in CET-4 Everybody!）</p>
</blockquote>
<h4>例题代码</h4>
<pre><code class="language-cpp">//HDU 1847 -- Good Luck in CET-4 Everybody!
#include &lt;iostream&gt;
#include &lt;cstring&gt;
#define MAXN 1010
#define MAXM 11
using namespace std;
int sg[MAXN], f[MAXM];
bool Hash[MAXN];

void getSG(int m)
{
    memset(sg, 0, sizeof(sg));
    for (int i = 1; i &lt; MAXN; i++)//枚举石子的个数
    {
        memset(Hash, false, sizeof(Hash));
        for (int j = 0; j &lt; m &amp;&amp; f[j] &lt;= i; j++)
            Hash[sg[i-f[j]]] = true;//枚举每次拿走的个数并标记 
        for (int j = 0; j &lt; MAXN; j++)
        {
            if (!Hash[j])
            {
                sg[i] = j;//找到这个F[](该状态可以达到的状态)中不存在的最小的数
                break;
            }
        }
    }
}

int main()
{
    int n, num = 1;
    for (int i = 0; i &lt; MAXM; num &lt;&lt;= 1, i++)
        f[i] = num;//这里的F数组就是可以移动的步数，每次都是2的幂次
    getSG(MAXM);
    for(int i=1;i&lt;=100;i++)
    {
        printf(&quot;%d &quot;,sg[i]);
    }
    return 0;
    while (cin &gt;&gt; n)
    {
        if (sg[n])
            cout &lt;&lt; &quot;Kiki&quot; &lt;&lt; endl;
        else
            cout &lt;&lt; &quot;Cici&quot; &lt;&lt; endl;
    }
    return 0;
}</code></pre>
<p>可以通过 <strong>模拟</strong> 和 <strong>下面的两句话</strong> 来理解例题的 <strong>代码</strong> 。</p>
<ol>
<li><strong>若 <code><code>#S=0</code><code> ，则无论先行者如何取子 </code><code>S→T</code><code> ，都有 </code><code>#T≠0</code></code></strong> 。</li>
<li><strong>若 <code><code>#S≠0</code><code> ，则先行者必然存在一种取子方法 </code><code>S→T</code><code> ，且 </code><code>#T=0</code></code></strong> 。</li>
</ol>
<p>此外，求 <strong>SG函数</strong> 的值还可以用深搜来求，但是没有前面所说的方法那么方便。</p>
<ul>
<li><strong>求 SG函数的值 的深搜代码</strong></li>
</ul>
<pre><code class="language-cpp">//注意 S数组要按从小到大排序 SG函数要初始化为-1 对于每个集合只需初始化1遍
//n是集合s的大小 S[i]是定义的特殊取法规则的数组
int s[110],sg[10010],n;
int SG_dfs(int x)
{
    int i;
    if(sg[x]!=-1)
        return sg[x];
    bool vis[110];
    memset(vis,0,sizeof(vis));
    for(i=0;i&lt;n;i++)
    {
        if(x&gt;=s[i])
        {
            SG_dfs(x-s[i]);
            vis[sg[x-s[i]]]=1;
        }
    }
    int e;
    for(i=0;;i++)
        if(!vis[i])
        {
            e=i;
            break;
        }
    return sg[x]=e;
}</code></pre>
<h4>更多的例题</h4>
<ul>
<li><strong>题目1</strong></li>
</ul>
<blockquote>
<p>有三堆石子共 <code class="language-katex katex-inline">n,m,p</code> 个石子，两个人轮流取，每次都只能取斐波那契数列上的个数的石子，取到最后一颗石子的人是胜者。给出你 <code class="language-katex katex-inline">n,m,p</code> 的值，请你判断先手是否有必胜策略。
为了方便，我们用 <code class="language-katex katex-inline">f_i</code> 来表示斐波那契数列的第 <code class="language-katex katex-inline">i</code> 项，那么有 <code class="language-katex katex-inline">f_1=1,f_2=2</code> ， <code class="language-katex katex-inline">f_i=f_{i-1}+f_{i-2}(i \geq 3)</code> 。
共有 <code class="language-katex katex-inline">T</code> 组数据。
<code class="language-katex katex-inline">1 \leq n,m,p \leq 10^3,1 \leq T \leq 10^5</code>
题目来源：HDU P1848（Fibonacci again and again）</p>
</blockquote>
<ul>
<li><strong>代码1</strong></li>
</ul>
<pre><code class="language-cpp">//HDU 1848 -- Fibonacci again and again
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
int bj[1001],g[1001];
int f[101]={0,1,2};
void sg()
{
    for(int i=1;i&lt;=1000;i++)
    {
        memset(bj,0,sizeof(bj));
        for(int j=1;j&lt;=16;j++)
        {
            if(f[j]&gt;i)
            {
                break;
            }
            bj[g[i-f[j]]]=1;
        }
        for(int j=0;j&lt;=1000;j++)
        {
            if(bj[j]==0)
            {
                g[i]=j;
                break;
            }
        }
    }
}
int main()
{
    for(int i=3;i&lt;=16;i++)
    {
        f[i]=f[i-1]+f[i-2];
    }
    sg();
    while(true)
    {
        int n=0,m=0,p=0;
        scanf(&quot;%d %d %d&quot;,&amp;n,&amp;m,&amp;p);
        if(n==0 &amp;&amp; m==0 &amp;&amp; p==0)
        {
            break;
        }
        printf(&quot;%s\n&quot;,(g[n]^g[m]^g[p])!=0?&quot;Fibo&quot;:&quot;Nacci&quot;);
    }
    return 0;
}</code></pre>
<ul>
<li><strong>题目2</strong></li>
</ul>
<blockquote>
<p>有一堆共 <code class="language-katex katex-inline">n</code> 个石子，每次取的个数要在 <code class="language-katex katex-inline">[p,q]</code> 内，当式子个数不足 <code class="language-katex katex-inline">p</code> 个时要一次将剩下的所有石子取完，取完最后一个石子的人输 ，问你先手是否有必胜策略。
<code class="language-katex katex-inline">1 \leq n \leq 2^{16},1 \leq p,q \leq 2^{16}</code> 。
题目来源：HDU P2897（邂逅明下）</p>
</blockquote>
<ul>
<li><strong>分析</strong></li>
</ul>
<p>这是一道 <strong>打表找规律求SG值</strong> ：这类题目可以通过暴力求得小范围的SG值，再通过找规律得到SG值取值的规律来求解。</p>
<ul>
<li><strong>用于找规律的SG函数代码</strong></li>
</ul>
<pre><code class="language-cpp">#include &lt;cstdio&gt;
#include &lt;cstring&gt;
int bj[1001],g[1001];
int f[101]={0,1,2};
int len=0;
void sg()
{
    for(int i=1;i&lt;=1000;i++)
    {
        memset(bj,0,sizeof(bj));
        if(i&lt;f[1])
        {
            bj[g[0]]=1;
        }
        for(int j=1;j&lt;=len;j++)
        {
            if(f[j]&gt;i)
            {
                break;
            }
            bj[g[i-f[j]]]=1;
        }
        for(int j=0;j&lt;=1000;j++)
        {
            if(bj[j]==0)
            {
                g[i]=j;
                break;
            }
        }
    }
}
int main()
{
    int n=0,p=0,q=0;
    scanf(&quot;%d %d %d&quot;,&amp;n,&amp;p,&amp;q);
    for(int i=p;i&lt;=q;i++)
    {
        f[++len]=i;
    }
    sg();
    for(int i=1;i&lt;=n;i++)
    {
        printf(&quot;%d &quot;,g[i]);
    }
//  if(g[n]!=0)
//  {
//      printf(&quot;LOST&quot;);
//  }
//  else
//  {
//      printf(&quot;WIN&quot;);
//  }
    return 0;
}</code></pre>
<ul>
<li><strong>代码2</strong></li>
</ul>
<pre><code class="language-cpp">//HDOJ 2897 -- 邂逅明下
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
using namespace std;

int main()
{
    int n,q,p;
    while ( scanf(&quot;%d%d%d&quot;,&amp;n,&amp;p,&amp;q)!=EOF ) {
        n%=(p+q);
        if ( n&gt;p || n==0 ) printf(&quot;WIN\n&quot;);
        else printf(&quot;LOST\n&quot;);
    }
    return 0;
}</code></pre>
<ul>
<li><strong>题目3</strong></li>
</ul>
<blockquote>
<p>给 <code class="language-katex katex-inline">n</code> 个点，然后给定这 <code class="language-katex katex-inline">n</code> 个点的拓补图，有向无环。
然后给出你一个正整数 <code class="language-katex katex-inline">m</code> ，表示图上有 <code class="language-katex katex-inline">m</code> 个棋子，这 <code class="language-katex katex-inline">m</code> 个棋子在哪几个点上。
现在有两个玩家来轮流移动这些棋子，谁先没办法移动所有的棋子谁输，问你先手是否有必胜策略。共有 <code class="language-katex katex-inline">T</code> 组测试数据。
<code class="language-katex katex-inline">1 \leq T \leq 10^5,1 \leq n \leq 1000,1 \leq m \leq 10</code>
题目来源：POJ P2425（A Chess Game）</p>
</blockquote>
<ul>
<li><strong>代码3</strong></li>
</ul>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;string&gt;
#include &lt;string.h&gt;
#include &lt;vector&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;queue&gt;
#include &lt;set&gt;
#include &lt;stack&gt;
using namespace std;

int map[1010][1010];
int SG[1010];
int N;

int DFS(int n)
{
    int i;
    if(SG[n]!=-1) return SG[n];
    bool used[1010];
    memset(used,0,sizeof(used));
    for(i=0; i&lt;N; i++)
    {
        if(map[n][i] != -1)
            used[DFS(i)]=true;
    }
    i=0;
    while(used[i]) i++;
    return SG[n]=i;
}

int main()
{
    int i,j,k,t;
    int X;
    int tp,ans;
    while(scanf(&quot;%d&quot;,&amp;N) != EOF)
    {
        memset(map,255,sizeof(map));
        memset(SG,255,sizeof(SG));
        for(i=0; i&lt;N; i++)
        {
            scanf(&quot;%d&quot;,&amp;k);
            if(k == 0)
            {
                SG[i] = 0;
            }
            for(j=0; j&lt;k; j++)
            {
                scanf(&quot;%d&quot;,&amp;t);
                map[i][t] = 1;
            }
        }

        while(scanf(&quot;%d&quot;,&amp;X) != EOF)
        {
            if(X == 0) break;
            ans = 0;
            for(i=0; i&lt;X; i++)
            {
                scanf(&quot;%d&quot;,&amp;tp);
                ans = ans ^DFS(tp);
            }
            if(ans != 0)
                printf(&quot;WIN\n&quot;);
            else
                printf(&quot;LOSE\n&quot;);
        }
    }
    return 0;
}</code></pre>
<h1>三、取硬币游戏</h1>
<ul>
<li>
<h3>模型</h3>
</li>
</ul>
<blockquote>
<p><code class="language-katex katex-inline">n</code> 枚硬币排成一排，有的正面朝上，有的反面朝上。我们从左开始对硬币按 <code class="language-katex katex-inline">1</code> 到 <code class="language-katex katex-inline">n</code> 编号。
游戏者根据某些约束翻硬币，但他所翻动的硬币中，最右边那个硬币的必须是从正面翻到反面，谁不能翻谁就输，问你先手是否有必胜策略。</p>
</blockquote>
<ul>
<li><strong>约束条件 1 ：每次只能翻一个硬币</strong></li>
</ul>
<blockquote>
<p><code class="language-katex katex-inline">n</code> 枚硬币排成一排，有的正面朝上，有的反面朝上。我们从左开始对硬币按 <code class="language-katex katex-inline">1</code> 到 <code class="language-katex katex-inline">n</code> 编号。游戏者所翻动的硬币必须是从正面翻到反面，谁不能翻谁就输。问你先手是否有必胜策略。</p>
</blockquote>
<ul>
<li>
<p>因为这题是只能翻一个硬币，那么这个硬币就是最右边的硬币，所以，每次操作是挑选一个正面的硬币翻成背面。
对于任意一个正面的硬币，SG值为1。
有 <code><code>奇数个正面硬币</code><code> ，局面的 </code><code>SG值=1</code><code> ，先手 </code><code>必胜</code><code> ，有 </code><code>偶数个正面硬币</code><code> ，局面的 </code><code>SG值=0</code><code> ，先手 </code><code>必败</code></code> 。</p>
</li>
<li>
<p><strong>约束条件 2 ：每次能翻转一个或两个硬币（不用连续）</strong></p>
</li>
<li>
<p>每个硬币的 <code><code>SG值</code><code> 为它的编号，初始编号为 </code><code>0</code><code> ，与 </code><code>NIM游戏</code></code> 是一样的。
如果对于一个局面，把 <code class="language-katex katex-inline">正面硬币的SG值异或起来不等于0</code> ，即 <code class="language-katex katex-inline">a_1 ⊕ a_2 ⊕ a_3 ⊕ … ⊕ a_n = \text{x}</code> ,对于 <code class="language-katex katex-inline">a_n</code> 来说一定有 <code class="language-katex katex-inline">a_n' = a_n ⊕ \text{x} < a_n</code> 。</p>
<p>如果 <code class="language-katex katex-inline">a_n'=0</code> ，意思就是说，把 <code class="language-katex katex-inline">a_n</code> 这个值从式子中去掉就可以了。对应游戏，就是把编号为 <code class="language-katex katex-inline">a_n</code> 的正面硬币翻成背面就可以了。因为 <code class="language-katex katex-inline">a_n ⊕ \text{x} =0</code>，而 <code class="language-katex katex-inline">a_1 ⊕ a_2 ⊕ a_3 ⊕ … ⊕ a_n=x</code> ，即 <code class="language-katex katex-inline">a_n ⊕ a_1 ⊕ a_2 ⊕ a_3 ⊕ … ⊕ a_n=0</code> ，即 <code class="language-katex katex-inline">a_1 ⊕ a_2 ⊕ a_3 ⊕ … ⊕ a_{n-1} = 0</code> ，只要在原来的 <code class="language-katex katex-inline">\text{x}</code> 里面去掉 <code class="language-katex katex-inline">a_n</code> 就可以了。</p>
<p>如果 <code class="language-katex katex-inline">an' \not = 0</code> ，意思就是说，把 <code class="language-katex katex-inline">a_n</code> 这个值从式子中去掉后再在式子中加上 <code class="language-katex katex-inline">a_n'</code> ， <code class="language-katex katex-inline">a_n' < a_n</code> 。对应游戏，去掉 <code class="language-katex katex-inline">a_n</code> 就是把编号为 <code class="language-katex katex-inline">a_n</code> 的正面硬币翻成背面，加上 <code class="language-katex katex-inline">a_n'</code> ，如果编号为 <code class="language-katex katex-inline">a_n'</code> 的硬币是正面，我们就把它翻成背面，是背面就翻成正面，总之，就是翻转编号为 <code class="language-katex katex-inline">a_n'</code> 的硬币。因为 <code class="language-katex katex-inline">an ⊕ x \not= 0</code> ，所以 <code class="language-katex katex-inline">a_n ⊕ a_1 ⊕ a_2 ⊕ a_3 ⊕ … ⊕ a_n \not= 0</code> ，即 <code class="language-katex katex-inline">a_1 ⊕ a_2 ⊕ a_3 ⊕ … ⊕ a_{n-1} \not= 0</code> ，而这里的 <code class="language-katex katex-inline">a_n'=a_1 ⊕ a_2 ⊕ a_3 ⊕ … ⊕ a_{n-1}</code> ，所以在 <code class="language-katex katex-inline">x</code> 中去掉 <code class="language-katex katex-inline">a_n</code> 后，要对 <code class="language-katex katex-inline">a_n'</code> 进行异或，也就是翻转，正转反，反转正。</p>
</li>
<li>
<p><strong>约束条件 3 ：每次必须连续翻转 k 个硬币</strong></p>
<p>我们以 <code class="language-katex katex-inline">k=3</code> 为例。</p>
<p>我们计算的是个数为 <code class="language-katex katex-inline">n</code> 的硬币中，其中最后一个硬币为正面朝上,的 <code><code>sg值</code></code> 。</p>
<p>当 <code class="language-katex katex-inline">n=1</code> 时，硬币为：正，先手必输，所以 <code class="language-katex katex-inline">sg[1]=0</code> 。</p>
<p>当 <code class="language-katex katex-inline">n=2</code> 时，硬币为：反正，先手必输，所以 <code class="language-katex katex-inline">sg[2]=0</code> 。</p>
<p>当 <code class="language-katex katex-inline">n=3</code> 时，硬币为：反反正，先手必胜，所以 <code class="language-katex katex-inline">sg[3]=1</code> 。</p>
<p>当 <code class="language-katex katex-inline">n=4</code> 时，硬币为：反反反正，先手操作后为：反正正反，子状态局面的 <code class="language-katex katex-inline">SG=0 ⊕ 1=1</code> ，那么 <code class="language-katex katex-inline">sg[4]=0</code> 。</p>
<p>当 <code class="language-katex katex-inline">n=5</code> 时，硬币为：反反反反正，先手操作后为：反反正正反，子状态局面的 <code class="language-katex katex-inline">SG=1 ⊕ 0 = 1</code> ，那么 <code class="language-katex katex-inline">sg[5] = 0</code> 。</p>
<p>当 <code class="language-katex katex-inline">n=6</code> 时，硬币为：反反反反反正，先手操作后为：反反反正正反，子状态局面的 <code class="language-katex katex-inline">SG=0 ⊕ 0 = 0</code> ，那么 <code class="language-katex katex-inline">sg[6] = 1</code> 。</p>
<p>......</p>
<p>然后我们得到了下面的这个表格：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align: center;">n</th>
<th style="text-align: center;">1</th>
<th style="text-align: center;">2</th>
<th style="text-align: center;">3</th>
<th style="text-align: center;">4</th>
<th style="text-align: center;">5</th>
<th style="text-align: center;">6</th>
<th style="text-align: center;">7</th>
<th style="text-align: center;">8</th>
<th style="text-align: center;">9</th>
<th style="text-align: center;">10</th>
<th style="text-align: center;">11</th>
<th style="text-align: center;">12</th>
<th style="text-align: center;">13</th>
<th style="text-align: center;">14</th>
<th style="text-align: center;">15</th>
<th style="text-align: center;">...</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">sg值</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">...</td>
</tr>
</tbody>
</table>
<p>由此我们可以知道，从编号为 <code class="language-katex katex-inline">1</code> 开始， <code class="language-katex katex-inline">sg</code> 值为：<code><code>001 001 001 001......</code></code> 。</p>
<p>通过继续观察，我们可以知道， <code class="language-katex katex-inline">sg</code> 的形式为 <code class="language-katex katex-inline">000…01000…01</code> ，其中每一段  的个数都为 <code class="language-katex katex-inline">(k-1)</code> 。</p>
<ul>
<li>
<p><strong>约束条件 4 ：每次翻动一个硬币后，必须翻动其左侧最近三个硬币中的一个，即翻动第 x 个硬币后，必须选择 (x-1) 、 (x-2) 、 (x-3) 中的其中一个硬币进行翻动，除非 x 是小于等于 3 的 （Subtraction Games）</strong></p>
<p>当 <code class="language-katex katex-inline">n=1</code> 时，硬币为：正，先手必赢，所以 <code class="language-katex katex-inline">sg[1]=1</code> 。</p>
<p>当 <code class="language-katex katex-inline">n=2</code> 时，硬币为：反正，先手必赢，因为先手可以翻成反反或正反，可能性为 <code class="language-katex katex-inline">2</code> ，所以 <code class="language-katex katex-inline">sg[2]=2</code> 。</p>
<p>......</p>
<p>然后我们得到了下面的这个表格：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align: center;">n</th>
<th style="text-align: center;">1</th>
<th style="text-align: center;">2</th>
<th style="text-align: center;">3</th>
<th style="text-align: center;">4</th>
<th style="text-align: center;">5</th>
<th style="text-align: center;">6</th>
<th style="text-align: center;">7</th>
<th style="text-align: center;">8</th>
<th style="text-align: center;">9</th>
<th style="text-align: center;">10</th>
<th style="text-align: center;">11</th>
<th style="text-align: center;">12</th>
<th style="text-align: center;">13</th>
<th style="text-align: center;">14</th>
<th style="text-align: center;">15</th>
<th style="text-align: center;">...</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">sg值</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">...</td>
</tr>
</tbody>
</table>
<p>这个与每次最多只能取 <code class="language-katex katex-inline">3</code> 个石子的取石子游戏的 <code class="language-katex katex-inline">SG</code> 分布一样，同样还有相似的这类游戏， <code><code>约束条件5</code></code> 也是一样。</p>
<ul>
<li><strong>约束条件 5 ：每次必须翻动两个硬币，而且这两个硬币的距离要在可行集 S={1,2,3} 中，硬币序号从 0 开始 （Twins游戏）</strong></li>
</ul>
<p>当 <code class="language-katex katex-inline">n=1</code> 时，硬币为：正，先手必输，所以 <code class="language-katex katex-inline">sg[0]=0</code> 。</p>
<p>当 <code class="language-katex katex-inline">n=2</code> 时，硬币为：反正，先手必赢，所以 <code class="language-katex katex-inline">sg[1]=1</code> 。</p>
<p>当 <code class="language-katex katex-inline">n=3</code> 时，硬币为：反反正，先手必赢，所以 <code class="language-katex katex-inline">sg[2]=2</code> 。</p>
<p>当 <code class="language-katex katex-inline">n=4</code> 时，硬币为：反反反正，先手必赢，所以 <code class="language-katex katex-inline">sg[3]=3</code> 。</p>
<p>当 <code class="language-katex katex-inline">n=5</code> 时，硬币为：反反反反正，先手必输，所以 <code class="language-katex katex-inline">sg[4]=0</code> 。</p>
<p>......</p>
<p>然后我们得到了下面的这个表格：</p>
<table>
<thead>
<tr>
<th style="text-align: center;">n</th>
<th style="text-align: center;">0</th>
<th style="text-align: center;">1</th>
<th style="text-align: center;">2</th>
<th style="text-align: center;">3</th>
<th style="text-align: center;">4</th>
<th style="text-align: center;">5</th>
<th style="text-align: center;">6</th>
<th style="text-align: center;">7</th>
<th style="text-align: center;">8</th>
<th style="text-align: center;">9</th>
<th style="text-align: center;">10</th>
<th style="text-align: center;">11</th>
<th style="text-align: center;">12</th>
<th style="text-align: center;">13</th>
<th style="text-align: center;">14</th>
<th style="text-align: center;">15</th>
<th style="text-align: center;">...</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">sg值</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">...</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>约束条件6：每次可以翻动一个、二个或三个硬币 （Mock Turtles游戏）</strong></li>
</ul>
<p>初始编号从 <code><code>0</code></code> 开始。</p>
<table>
<thead>
<tr>
<th style="text-align: center;">n</th>
<th style="text-align: center;">0</th>
<th style="text-align: center;">1</th>
<th style="text-align: center;">2</th>
<th style="text-align: center;">3</th>
<th style="text-align: center;">4</th>
<th style="text-align: center;">5</th>
<th style="text-align: center;">6</th>
<th style="text-align: center;">7</th>
<th style="text-align: center;">8</th>
<th style="text-align: center;">9</th>
<th style="text-align: center;">10</th>
<th style="text-align: center;">11</th>
<th style="text-align: center;">12</th>
<th style="text-align: center;">13</th>
<th style="text-align: center;">14</th>
<th style="text-align: center;">15</th>
<th style="text-align: center;">...</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">sg值</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">7</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">11</td>
<td style="text-align: center;">13</td>
<td style="text-align: center;">14</td>
<td style="text-align: center;">16</td>
<td style="text-align: center;">19</td>
<td style="text-align: center;">21</td>
<td style="text-align: center;">22</td>
<td style="text-align: center;">25</td>
<td style="text-align: center;">26</td>
<td style="text-align: center;">28</td>
<td style="text-align: center;">31</td>
<td style="text-align: center;">...</td>
</tr>
</tbody>
</table>
<p>看上去 <code class="language-katex katex-inline">sg值</code> 为 <code class="language-katex katex-inline">2 \text{x}</code> 或者 <code class="language-katex katex-inline">(2 \text{x} +1)</code> 。我们称一个非负整数为 <code><code>odious</code><code> ，当且仅当该数的二进制形式的 </code><code>1</code><code> 出现的次数是奇数，否则称作 </code><code>evil</code><code> 。所以 </code><code>1</code><code> ， </code><code>2</code><code> ， </code><code>4</code><code> ， </code><code>7</code><code> 是 </code><code>odious</code><code> 因为它们的二进制形式是 </code><code>1,10,100,111</code><code> 。而 </code><code>0,3,5,6</code><code> 是 </code><code>evil</code><code> ，因为它们的二进制形式是 </code><code>0,11,101,110</code><code> 。而上面那个表中，貌似 </code><code>sg值</code><code> 都是 </code><code>odious数</code></code> 。</p>
<p>所以当 <code class="language-katex katex-inline">2 \text{x}</code> 为 odious 时， sg值 是 <code class="language-katex katex-inline">2 \text{x}</code>，当 <code class="language-katex katex-inline">2 \text{x}</code> 是 evil 时， sg值 是 <code class="language-katex katex-inline">(2 \text{x} +1)</code> 。</p>
<ul>
<li><strong>对于约束条件 7、8 有兴趣的读者可以在 “参考资料 [9]” 中继续阅读</strong> 。</li>
</ul>
<h1>参考资料</h1>
<p><a href="http://118.89.20.3/wp-content/uploads/2019/08/由感性认识到理性认识——透析一类搏弈游戏的解答过程.doc">[1]</a> 由感性认识到理性认识——透析一类搏弈游戏的解答过程。</p>
<p><a href="http://118.89.20.3/wp-content/uploads/2019/08/组合游戏略述——浅谈SG游戏的若干拓展及变形.pdf">[2]</a> 组合游戏略述——浅谈SG游戏的若干拓展及变形。</p>
<p><a href="https://blog.csdn.net/qq_41722217/article/details/84679389">[3]</a> 博弈论。</p>
<p><a href="https://www.cnblogs.com/aiguona/p/9126324.html">[4]</a> SG函数。</p>
<p><a href="https://blog.csdn.net/zzzanj/article/details/82795426">[5]</a> hdu 1848Fibonacci again and again。</p>
<p><a href="https://www.cnblogs.com/HDUjackyan/p/8858774.html">[6]</a> 专题训练之博弈。</p>
<p><a href="http://118.89.20.3/wp-content/uploads/2019/08/博弈by高嘉煊.pptx">[7]</a> 博弈by高嘉煊。</p>
<p><a href="https://blog.csdn.net/u013508213/article/details/47035547">[8]</a> sg函数入门题。</p>
<p><a href="https://www.cnblogs.com/kuangbin/p/3218060.html">[9]</a> 【转】博弈-翻硬币游戏。</p>
<p><a href="https://blog.csdn.net/code92007/article/details/87892307">[10]</a> 博弈:关于SG函数的一些心得（知识总结+叙述证明+例题）。</p>
<p><a href="https://blog.csdn.net/acm_zl/article/details/9448041">[11]</a> POJ2425（树形，无向无环图博弈）。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date><![CDATA[2019-08-04 16:34:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-04 08:34:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[class-game-theory]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%8d%9a%e5%bc%88%e8%ae%ba"><![CDATA[博弈论]]></category>
		<category domain="category" nicename="%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0"><![CDATA[学习笔记]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[cpp,c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P1241【Number】</title>
		<link>http://106.53.21.5/index.php/2019/08/02/gmoj-p1241%e3%80%90number%e3%80%91/</link>
		<pubDate>Fri, 02 Aug 2019 02:36:36 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=151</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>有 <code class="language-katex katex-inline">n</code> 个数 <code class="language-katex katex-inline">a_1,a_2,...,a_{n-1},a_n</code> ，如果在这 <code class="language-katex katex-inline">n</code> 个数中，有且仅有一个数能整除 <code class="language-katex katex-inline">m</code> ，那么正整数 <code class="language-katex katex-inline">m</code> 就是一个幸运数，你的任务就是在给定 <code class="language-katex katex-inline">a_1,a_2,...,a_{n-1},a_n</code> 的情况下，求出第 <code class="language-katex katex-inline">k</code> 小的幸运数。 </p>
<p><code class="language-katex katex-inline">2 \leq n \leq 15,1 \leq k \leq 2^{31}-1</code> 。</p>
<p>保证答案小于等于 <code class="language-katex katex-inline">10^{15}</code> ，时限 <code class="language-katex katex-inline">2s</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>二分答案</strong> 和 <strong>容斥</strong> 来解题。</p>
<p>为了方便，我们将用 <code class="language-katex katex-inline">d(r)</code> 来表示 <code class="language-katex katex-inline">1</code> 到 <code class="language-katex katex-inline">r</code> 中幸运数的 <strong>个数</strong> 。</p>
<p>发现当 <code class="language-katex katex-inline">a \leq b</code> 时，<code class="language-katex katex-inline">d(a) \leq d(b)</code> ，所以答案显然是有单调性的。</p>
<p>考虑对于当前二分到的一个答案 <code class="language-katex katex-inline">mid</code> ，怎么去求 <code class="language-katex katex-inline">d(mid)</code> 。</p>
<p>考虑使用 <strong>容斥原理</strong> ，即 <strong>奇加偶减</strong> 。</p>
<p>意思是当它处在奇数个 <code class="language-katex katex-inline">a_i</code> 的重叠部分时，答案加上它，当它处在偶数个 $a_i$ 的重叠部分时，答案减去。</p>
<p>然后所有的组合经过加加减减后得到的答案就是互不重叠的部分的和。 时间复杂度为 <code><code>katex O(2^n\\;\\log\\;ans) </code></code> 。</p>
<p>其中 <code class="language-katex katex-inline">ans</code> 为答案。</p>
<p>具体的一些细节见 <strong>Code</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<pre><code class="language-cpp">#include &lt; cstdio &gt;
long long a[ 1000001 ] ;
long long ans = 0 , n = 0 , k = 0 ;
long long gcd( long long x , long long y )
{
    if( y == 0 )
    {
        return x ;
    }
    else
    {
        return gcd( y , x % y ) ;
    }
}
long long lcm( long long x , long long y )
{
    return x / gcd( x , y ) * y ;
}
void dfs( long long x , long long da , long long lc , long long cs )
{
    if( da &lt; lc  || lc &lt; 0 )
    {
        return ;
    }
    if( x == n + 1 )
    {
        if( cs % 2 == 1 )
        {
            ans += da / lc * cs ;
        }
        else
        {
            ans -= da / lc * cs ;
        }
        return ;
    }
    dfs( x + 1 , da , lc , cs ) ;
    dfs( x + 1 , da , lcm( lc , a[ x ] ) , cs + 1 ) ;
}
int main()
{
    scanf(&quot;%lld %lld&quot;,&amp;n , &amp;k ) ;
    for(long long i = 1 ; i &lt;= n ; i ++ )
    {
        scanf(&quot;%lld&quot;, &amp;a[ i ] ) ;
    }
    long long l = 1 , r = 1 ;
    for(long long i = 1 ; i &lt;= 15 ; i ++ )
    {
        r *= 10 ;
    }
    while( l &lt; r )
    {
        long long mid = ( l + r ) / 2 ;
        ans = 0 ;
        dfs( 1 , mid , 1 , 0 ) ;
        if( ans &lt; k )
        {
            l = mid + 1 ;
        }
        else
        {
            r = mid ;
        }
    }
    printf( &quot;%lld&quot; , l ) ;
    return 0 ;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>151</wp:post_id>
		<wp:post_date><![CDATA[2019-08-02 10:36:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-02 02:36:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p1241%e3%80%90number%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e4%ba%8c%e5%88%86"><![CDATA[二分]]></category>
		<category domain="category" nicename="%e5%ae%b9%e6%96%a5"><![CDATA[容斥]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[cpp,c]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LGOJ P5462 【X龙珠】</title>
		<link>http://106.53.21.5/index.php/2019/07/16/lgoj-p5462-%e3%80%90x%e9%be%99%e7%8f%a0%e3%80%91/</link>
		<pubDate>Tue, 16 Jul 2019 03:15:10 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=202</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p><code class="language-katex katex-inline">n(2|n)</code> 个编号互不相同龙珠按照给定的顺序排成一个队列，龙珠的编号为 <code class="language-katex katex-inline">1</code> ~ <code class="language-katex katex-inline">n</code> 的排列。每次选择并取出龙珠队列中 <strong>相邻</strong> 的两个龙珠，放到目标队列的末尾（目标队列最开始是空的，且这两个龙珠的前后顺序不变），然后去除原龙珠队列的空隙。反复多次，直到原龙珠队列为空。现在请你求出所有方案中目标队列字典序最大的的排列。</p>
<p><code class="language-katex katex-inline">1 \leq n \leq 10^5</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>重新排版： <code class="language-katex katex-inline">\text{weizexin}</code> 。</p>
<p>这是 <strong>洛谷7月月赛</strong> 的题目，因为比赛时间和上课时间刚好冲突于是就没有参加，所以在赛后来补题。</p>
<p>看到这道题目直接就一眼切掉了，但是因为细节问题导致我骗了一个数据点下了，还拿了一个题解来对拍（没看题解和题解代码）才过去的......</p>
<p>考虑使用 <strong>贪心</strong> 和 <strong>数组模拟链表</strong> 来解题。</p>
<p>因为要使字典序最大，所以我们要 <strong>让大的数尽量靠前</strong> 。但是显然当当前龙珠队列中剩下的最大的数在最后一个位置的时候，不能够达到 <strong>让大的数尽量靠前</strong> ，为了方便表述，不妨设当前最大的数为 <code class="language-katex katex-inline">i</code> ，它左边的数为 <code class="language-katex katex-inline">j</code> （ <code class="language-katex katex-inline">i</code> 没有右边的数 ）。</p>
<p>那么当<code class="language-katex katex-inline">j\leq (i-1)</code>时，让<code class="language-katex katex-inline">(j+1)</code> ~ <code class="language-katex katex-inline">(i-1)</code>先放入目标队列是一个更优的选择。</p>
<p>于是我们就得到了一个很粗暴的做法：当 <code class="language-katex katex-inline">i</code> 在最右边时，先跳过  <code class="language-katex katex-inline">i</code> ，然后让去处理 <code class="language-katex katex-inline">(i-1)</code> ，我们定义 <code class="language-katex katex-inline">p</code> 为当前要处理的数。</p>
<p>那么当 <code class="language-katex katex-inline">p \leq 0</code> 时检测一下是否所有数都到了目标队列即可，如果没有就让 <code class="language-katex katex-inline">p=n</code> ，然后再做一遍即可，以此类推。</p>
<p>因为上述过程最多执行两次，所以时间复杂度是 <code class="language-katex katex-inline">O(n)</code> 的，可以 A 掉本题。</p>
<p>注意要在中途检测 <code class="language-katex katex-inline">p</code> 是否 <code class="language-katex katex-inline">\leq 0</code> 。</p>
<p>具体的细节见 <strong>代码</strong> 部分。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
int l[1000001],r[1000001];
int wz[1000001],a[1000001];
int main()
{
    int n=0;
    scanf(&quot;%d&quot;,&amp;n);
    for(int i=1;i&lt;=n;i++)
    {
        scanf(&quot;%d&quot;,&amp;a[i]);
        wz[a[i]]=i;
        l[i]=i-1,r[i]=i+1;
    }
    int p=0;
    while(true)
    {
        p=n;
        while(p&gt;=1)
        {
            while(wz[p]==0)
            {
                p--;
                if(p&lt;=0)
                {
                    break;
                }
            }
            if(p&lt;=0)
            {
                break;
            }
            while(r[wz[p]]==n+1)
            {
                p--;
                if(p&lt;=0)
                {
                    break;
                }
            }
            if(p&lt;=0)
            {
                break;
            }
            while(wz[p]==0)
            {
                p--;
                if(p&lt;=0)
                {
                    break;
                }
            }
            if(p&lt;=0)
            {
                break;
            }
            int x=wz[p],y=r[wz[p]];
            printf(&quot;%d %d &quot;,p,a[y]);
            int ta=l[x],tb=r[y];
            int dta=r[y],dtb=l[x];
            l[dta]=ta;
            r[dtb]=tb;
            wz[p]=wz[a[y]]=0;
            a[x]=a[y]=0;
        }
        bool flag=true;
        for(int i=1;i&lt;=n;i++)
        {
            if(wz[i]!=0)
            {
                flag=false;
            }
        }
        if(flag==true)
        {
            break;
        }
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date><![CDATA[2019-07-16 11:15:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-16 03:15:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lgoj-p5462-%e3%80%90x%e9%be%99%e7%8f%a0%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e8%b4%aa%e5%bf%83"><![CDATA[贪心]]></category>
		<category domain="category" nicename="%e9%93%be%e8%a1%a8"><![CDATA[链表]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LGOJ P5461 【赦免战俘】</title>
		<link>http://106.53.21.5/index.php/2019/07/31/lgoj-p5461-%e3%80%90%e8%b5%a6%e5%85%8d%e6%88%98%e4%bf%98%e3%80%91/</link>
		<pubDate>Wed, 31 Jul 2019 08:19:37 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>一个<code class="language-katex katex-inline">2^n \times2^n</code>的矩阵，每个位置站着一个作弊者，每次将正方形矩阵 <strong>分割</strong> 成4个更小的正方形矩阵，每个矩阵的边长是原矩阵的 <strong>一半</strong> 。其中 <strong>左上角</strong> 那一个矩阵的所有作弊者都将得到 <strong>赦免</strong> ，剩下的三个矩阵中，每一个矩阵继续分为 4 个更小的矩阵，然后以 <strong>同样的方式</strong> 分割矩阵，以同样的方式 <strong>赦免</strong> ，直到矩阵不能再分割为止，剩下的作弊者将会被惩罚。求这个矩阵每个作弊者的命运，赦免为  <strong>0</strong> ，惩罚为 <strong>1</strong> 。</p>
<p><code class="language-katex katex-inline">n\leq 10</code></p>
<!--more-->
<h2>Solution</h2>
<p>这是 <strong>洛谷七月月赛</strong> 的题目，由于比赛当天发烧，几乎睡了一整天，比赛时只是坚持着做完了这题。</p>
<p>这题很快就码出来了，结果我的本地C++跑了四秒多（<code class="language-katex katex-inline">n=10</code>），以为要打表了，结果交上去就直接AC了。想了一下应该是电脑老旧（windows 7的笔记本，<del>装了一大堆的颓废软件</del>）的问题。</p>
<p>考虑使用 <strong>DFS（深度优先搜索）</strong> 和 <strong>分治</strong> 来做。</p>
<p>这道题就是求一个按题目描述处理后的矩阵，为了减小码量，我们直接设每个作弊者都要被惩罚，然后每次分割时只需要把4个被分割的正方形矩阵的左上角那个全部设为0即可。</p>
<p><strong>DFS</strong>时注意这个矩阵是否不能分割了，那剩下的那名作弊者就就要受到惩罚。</p>
<p>具体细节见 <strong>代码</strong> 。</p>
<h2>code</h2>
<pre><code>#include&lt;cmath&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;
int ma[1025][1025],n;
void dfs(int x1,int y1,int x2,int y2)
{
    if(x1==x2&amp;&amp;y1==y2)return;
    int x3=(x1+x2)/2;
    int y3=(y1+y2)/2;
    for(int i=x1;i&lt;=x3;i++)
    {
        for(int j=y1;j&lt;=y3;j++)
        {
            ma[i][j]=0;
        }
    }
    dfs(x3+1,y1,x2,y3);
    dfs(x1,y3+1,x3,y2);
    dfs(x3+1,y3+1,x2,y2);
}
int main()
{
    scanf(&quot;%d&quot;,&amp;n);
    n=(1&lt;&lt;n);
    for(int i=1;i&lt;=n;i++)
    {
        for(int j=1;j&lt;=n;j++)
        {
            ma[i][j]=1;
        }
    }
    dfs(1,1,n,n);
    for(int i=1;i&lt;=n;i++)
    {
        for(int j=1;j&lt;=n;j++)
        {
            printf(&quot;%d &quot;,ma[i][j]);
        }
        printf(&quot;\n&quot;);
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date><![CDATA[2019-07-31 16:19:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-31 08:19:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lgoj-p5461-%e3%80%90%e8%b5%a6%e5%85%8d%e6%88%98%e4%bf%98%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dfs"><![CDATA[DFS]]></category>
		<category domain="category" nicename="%e5%88%86%e6%b2%bb"><![CDATA[分治]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LGOJ P5020 【货币系统】</title>
		<link>http://106.53.21.5/index.php/2019/08/02/lgoj-p5020-%e3%80%90%e8%b4%a7%e5%b8%81%e7%b3%bb%e7%bb%9f%e3%80%91/</link>
		<pubDate>Fri, 02 Aug 2019 08:20:59 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=226</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>给你一个正整数 <code class="language-katex katex-inline">n</code> 和 <code class="language-katex katex-inline">n</code> 个正整数 <code class="language-katex katex-inline">a_1</code> ~ <code class="language-katex katex-inline">a_n</code> ，现在请你求一个最小的 <code class="language-katex katex-inline">m</code> ，使得存在一个长度为 <code class="language-katex katex-inline">m</code> 的数列，满足能用 <code class="language-katex katex-inline">a</code> 序列相加的得到的数都是 <code class="language-katex katex-inline">b</code> 序列能够相加得到的数，并且能用 <code class="language-katex katex-inline">b</code> 序列相加的得到的数都是 <code class="language-katex katex-inline">a</code> 序列能够相加得到的数。 </p>
<p>共有 <code class="language-katex katex-inline">T</code> 组询问，其中 <code class="language-katex katex-inline">1 \leq T \leq 20,1 \leq n \leq 100,1 \leq a_i \leq 2.5\times10^4</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>动态规划</strong> 来解题。</p>
<p>先把 <code class="language-katex katex-inline">a_i</code> 按照升序排好，然后做一遍背包。</p>
<p>为了方便，我们将用 <code class="language-katex katex-inline">f_i</code> 表示 <code class="language-katex katex-inline">i</code> 能否被组成。</p>
<p>那么当 <code class="language-katex katex-inline">f_{a_i}</code> 能够被组成时，说明比 <code class="language-katex katex-inline">a_i</code> 小的数能够组成 <code class="language-katex katex-inline">a_i</code> ，那么 <code class="language-katex katex-inline">a_i</code> 就不是新序列中所必然需要的数了，然后答案减一，注意一开始答案为 <code class="language-katex katex-inline">n</code> 。</p>
<p>正确性显然，证明见：<a href="https://www.luogu.org/blog/hookan/solution-p5020">https://www.luogu.org/blog/hookan/solution-p5020</a> 。</p>
<p>时间复杂度 <code class="language-katex katex-inline">O(\;Tn\;\times (\max_{i=1}^{n}a_i)\;)</code> ，具体的细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
int f[1000001],a[1000001];
void px(int l,int r)
{
    int x=l,y=r,mid=a[(l+r)/2];
    while(x&lt;=y)
    {
        while(a[x]&lt;mid)
        {
            x++;
        }
        while(a[y]&gt;mid)
        {
            y--;
        }
        if(x&lt;=y) 
        {
            int t=a[x];
            a[x]=a[y];
            a[y]=t;
            x++;
            y--;
        }
    }
    if(l&lt;y)
    {
        px(l,y);
    }
    if(x&lt;r)
    {
        px(x,r);
    }
}
int main()
{
    int ans=0,t=0;
    scanf(&quot;%d&quot;,&amp;t);
    while(t--)
    {
        int ans=0,n=0;
        memset(f,0,sizeof(f));
        scanf(&quot;%d&quot;,&amp;n);
        ans=n;
        for(int i=1;i&lt;=n;i++)
        {
            scanf(&quot;%d&quot;,&amp;a[i]);
        }
        px(1,n);
        f[0]=1;
        for(int i=1;i&lt;=n;i++)
        {
            if(f[a[i]])
            {
                ans--;
                continue;
            }
            for(int j=a[i];j&lt;=a[n];j++)
            {
                f[j]=f[j]|f[j-a[i]];
            }
        }
        printf(&quot;%d\n&quot;,ans);
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date><![CDATA[2019-08-02 16:20:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-02 08:20:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lgoj-p5020-%e3%80%90%e8%b4%a7%e5%b8%81%e7%b3%bb%e7%bb%9f%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dp"><![CDATA[DP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P2642 【游戏】</title>
		<link>http://106.53.21.5/index.php/2019/08/01/gmoj-p2642-%e3%80%90%e6%b8%b8%e6%88%8f%e3%80%91/</link>
		<pubDate>Thu, 01 Aug 2019 08:44:10 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=241</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>给你一个正整数 <code class="language-katex katex-inline">n</code> 和一个 <code class="language-katex katex-inline">n \times n</code> 的矩阵 <code class="language-katex katex-inline">a</code>，有两个人轮流对这个矩阵进行操作，每次可以删掉最后一行或最后一列，但必须要保证所删的行或列的和是偶数。当一个人无法操作时这个人就输了。</p>
<p>现在请你求出在双方都使用最优策略的情况下，先手是否有必胜策略，有则输出 <code><code>W</code><code> ，否则输出 </code><code>L</code></code> 。</p>
<p><code class="language-katex katex-inline">1 \leq n \leq 1000,1 \leq T \leq 5</code> 。</p>
<p><code class="language-katex katex-inline">\text{保证每一行或每一列的和不会超过}\;2 \times 10^9</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p><strong>By：</strong>钟梓俊 、 韦泽鑫 。</p>
<ul>
<li><strong>方法一</strong></li>
</ul>
<p>考虑使用 <strong>DP</strong> 来解题。</p>
<p>设 <code class="language-katex katex-inline">f[i][j]=0/1</code> 表示当剩下 <code class="language-katex katex-inline">i</code> 行 <code class="language-katex katex-inline">j</code> 列时先手 必败/必胜 。</p>
<p>为了方便，然后显然有转移方程：</p>
<p><code class="language-katex katex-inline">f[i][j]=f[i][j]|(!f[i-1][j])\quad\quad\quad((\sum_{k=1}^{j}a_{i,k})\;\mod\;2=0)</code></p>
<p><code class="language-katex katex-inline">f[i][j]=f[i][j]|(!f[i][j-1])\quad\quad\quad((\sum_{k=1}^{i}a_{k,j})\;\mod\;2=0)</code></p>
<p>。</p>
<p>求和那里可以初始化一下。</p>
<p>然后这道题目就做完了，时间复杂度 <code class="language-katex katex-inline">O(Tn^2)</code> 。</p>
<ul>
<li><strong>方法二</strong></li>
</ul>
<p>考虑使用 <strong>DFS</strong> 来解题。</p>
<p>先将整个图的横向和纵向做一遍前缀和，用 <strong>DFS</strong> 做一遍游戏过程即可。</p>
<p>时间复杂度 <code class="language-katex katex-inline">O(Tn^2)</code> ,具体的细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<ul>
<li><strong>方法一</strong></li>
</ul>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cstring&gt;
int f[1001][1001],a[1001][1001];
int sumx[1001][1001],sumy[1001][1001];
int main()
{
    int T=0;
    scanf(&quot;%d&quot;,&amp;T);
    while(T--)
    {
        int n=0;
        scanf(&quot;%d&quot;,&amp;n);
        for(int i=1;i&lt;=n;i++)
        {
            for(int j=1;j&lt;=n;j++)
            {
                int x=0;
                scanf(&quot;%d&quot;,&amp;x);
                a[i][j]=x;
                sumx[i][j]=sumx[i][j-1]+x;
                sumy[j][i]=sumy[j][i-1]+x;
            }
        }
        memset(f,0,sizeof(f));
        for(int i=1;i&lt;=n;i++)
        {
            for(int j=1;j&lt;=n;j++)
            {
                if( sumx[i][j]%2==0 )
                {
                    f[i][j]= f[i][j] | (!f[i-1][j]) ;
                }
                if( sumy[j][i]%2==0 )
                {
                    f[i][j]= f[i][j] | (!f[i][j-1]) ;
                }
            }
        }
        printf(&quot;%c\n&quot;,f[n][n]==1?&#039;W&#039;:&#039;L&#039;);
    }
    return 0;
}</code></pre>
<ul>
<li><strong>方法二</strong></li>
</ul>
<pre><code>#include&lt;cstdio&gt;
int t,n,a[1001][1001],sum[1001][1001][2];
inline bool dfs(int nx,int x,int y)
{
    if(nx==1)
    {
        if(x==0||y==0)return false;
        if(!sum[x][y][1])
            if(dfs(2,x-1,y)==true)return true;
        if(!sum[x][y][0])
            if(dfs(2,x,y-1)==true)return true;
        return false;
    }
    else
    {
        if(x==0||y==0)return true;
        if(!sum[x][y][1])
            if(dfs(1,x-1,y)==false)return false;
        if(!sum[x][y][0])
            if(dfs(1,x,y-1)==false)return false;
        return true;
    }
}
int main()
{
    scanf(&quot;%d&quot;,&amp;t);
    while(t--)
    {
        scanf(&quot;%d&quot;,&amp;n);
        for(int i=1;i&lt;=n;i++)
        {
            for(int j=1;j&lt;=n;j++)
            {
                scanf(&quot;%d&quot;,&amp;a[i][j]);
                sum[i][j][1]=(sum[i][j-1][1]+a[i][j])%2;
                sum[i][j][0]=(sum[i-1][j][0]+a[i][j])%2;
            }
        }
        if(dfs(1,n,n)==true)
        {
            printf(&quot;W\n&quot;);
        }
        else
        {
            printf(&quot;L\n&quot;);
        }
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date><![CDATA[2019-08-01 16:44:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-01 08:44:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p2642-%e3%80%90%e6%b8%b8%e6%88%8f%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dfs"><![CDATA[DFS]]></category>
		<category domain="category" nicename="dp"><![CDATA[DP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P2643 【六边形】</title>
		<link>http://106.53.21.5/index.php/2019/08/01/gmoj-p2643-%e3%80%90%e5%85%ad%e8%be%b9%e5%bd%a2%e3%80%91/</link>
		<pubDate>Thu, 01 Aug 2019 12:07:39 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=247</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>棋盘是由许多个六边形构成的，共有 <code class="language-katex katex-inline">5</code> 种不同的六边形，编号为 <code class="language-katex katex-inline">1</code> 到 <code class="language-katex katex-inline">5</code> ，棋盘的生成规则如下：</p>
<ol>
<li>
<p>从中心的一个六边形开始，逆时针向外生成一个个六边形。</p>
</li>
<li>
<p>对于刚生成的一个六边形，我们要确定它的种类，它的种类必须满足与已生成的相邻的六边形不同。</p>
</li>
<li>
<p>如果有多个种类可以选，我们选择出现次数最少的种类。</p>
</li>
<li>
<p>情况 <code class="language-katex katex-inline">3</code> 下还有多个种类可以选，我们选择数字编号最小的。</p>
</li>
</ol>
<p>现在要你求第 <code class="language-katex katex-inline">n</code> 个生成的六边形的编号。</p>
<p>其中 <code class="language-katex katex-inline">1 \leq T \leq 20,1 \leq n \leq 10^4</code> 。</p>
<!--more-->
<h2>Solution</h2>
<ul>
<li><strong>方法一</strong></li>
</ul>
<p><strong>By：</strong> 钟梓俊 。</p>
<p>考虑使用 <strong>找规律</strong> 和 <strong>模拟</strong> 来解题。</p>
<p>观察生成的图：</p>
<p><img src="https://i.loli.net/2019/08/01/5d42a978f22f153517.png" alt="" /></p>
<p>不妨设第 <code class="language-katex katex-inline">1</code> 个六边形为第 <code class="language-katex katex-inline">1</code> 圈，第 <code class="language-katex katex-inline">2</code> 个六边形到第 <code class="language-katex katex-inline">7</code> 为第 <code class="language-katex katex-inline">2</code> 圈，第 <code class="language-katex katex-inline">8</code> 个六边形到第 <code class="language-katex katex-inline">19</code> 为第 <code class="language-katex katex-inline">3</code> 圈......以此类推。 </p>
<p>通过继续画图，我们可以发现第 <code class="language-katex katex-inline">i</code> 圈先是有 <code class="language-katex katex-inline">(i-2)</code> 个与第 <code class="language-katex katex-inline">(i-1)</code> 圈的 <strong>两个</strong> 六边形有公共边，然后有 <code class="language-katex katex-inline">1</code> 个与第 <code class="language-katex katex-inline">(i-1)</code> 圈的 <strong>一个</strong> 六边形有公共边，然后不断循环。</p>
<p>然后显然第 <code class="language-katex katex-inline">i</code> 个六边形与第 <code class="language-katex katex-inline">(i-1)</code> 个六边形有公共边。
<strong>注意</strong>，每一圈的最后一个六边形 <strong>还与</strong> 这一圈的第一个六边形有公共边。 然后我们就可以知道一个六边形与哪些六边形有公共边啦。 然后就按照题意模拟就好啦。 时间复杂度 <code class="language-katex katex-inline">O(n)</code> 。</p>
<p>具体的细节见 <strong>代码</strong> 部分。 然后这道题目就做完了。 - <strong>方法二</strong> <strong>By：</strong> <code><code>forever_piano</code><code> 、 </code><code>zhoukaicheng</code></code> 。 <strong>若侵权将删除。</strong> 考虑使用 <strong>找规律</strong> 和 <strong>模拟</strong> 来解题。</p>
<p>| \ | 1 | 2 | 3 | 4 | 5 | 6 | 7 | | ------------ | ------------ | ------------ | ------------ | ------------ | ------------ | ------------ | ------------ | | <strong>1</strong> | 28 | 27 | 26 | 25 | | | | | <strong>2</strong> | 29 | 13 | 12 | 11 | 24 | | | | <strong>3</strong> | 30 | 14 | 4 | 3 | 10 | 23 | | | <strong>4</strong> | 31 | 15 | 5 | 1 | 2 | 9 | 22 | | <strong>5</strong> | | 32 | 16 | 6 | 7 | 8 | 21 | | <strong>6</strong> | | | 33 | 17 | 18 | 19 | 20 | | <strong>7</strong> | | | | 34 | 35 | 36 | 37 |</p>
<p>按照这个表进行储存，并且将关联的点的规律找出来，然后每一次搜一个点的时候判断他六个角的点，于是就很轻松的完成了。</p>
<h2>Code</h2>
<ul>
<li><strong>方法一</strong></li>
</ul>
<pre><code class="language-#include">int book[6];
int cnt[6]={0,1,2,2,1,1};
int f[100001]={0,1,2,3,4,5,2,3};
int la2[100001],la[100001]={0,2,3,4,5,2,3};
int main()
{
    int jl=0,n=7;
    for(int i=3;n&lt;=10000;i++)
    {
        int now=0,k=0;
        for(int j=1;j&lt;=6*(i-1);j++)
        {
            if(now==i-2)
            {
                book[1]=0;
                book[2]=0;
                book[3]=0;
                book[4]=0;
                book[5]=0;
                book[jl]=1;
                book[la[k]]=1;
                if(j==6*(i-1))
                {
                    book[la2[1]]=1;
                }
                int da=999999999,x=0;
                for(int i=1;i&lt;=5;i++)
                {
                    if(book[i]==0 &amp;&amp; cnt[i]&lt;da)
                    {
                        x=i;
                        da=cnt[i];
                    }
                }
                jl=x;
                la2[j]=x;
                f[++n]=x;
                cnt[x]++;
                now=0;
            }
            else
            {
                k++;
                book[1]=0;
                book[2]=0;
                book[3]=0;
                book[4]=0;
                book[5]=0;
                book[jl]=1;
                book[la[k]]=1;
                if(k==1)
                {
                    book[la[6*(i-2)]]=1;
                }
                else
                {
                    book[la[k-1]]=1;
                }
                int da=999999999,x=0;
                for(int i=1;i&lt;=5;i++)
                {
                    if(book[i]==0 &amp;&amp; cnt[i]&lt;da)
                    {
                        x=i;
                        da=cnt[i];
                    }
                }
                jl=x;
                la2[j]=x;
                f[++n]=x;
                cnt[x]++;
                now++;
            }
        }
        for(int j=1;j&lt;=6*(i-1);j++)
        {
            la[j]=la2[j];
            la2[j]=0;
        }
    }
    int T=0;
    scanf(&quot;%d&quot;,&amp;T);
    while(T--)
    {
        int x=0;
        scanf(&quot;%d&quot;,&amp;x);
        printf(&quot;%d\n&quot;,f[x]);
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date><![CDATA[2019-08-01 20:07:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-01 12:07:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p2643-%e3%80%90%e5%85%ad%e8%be%b9%e5%bd%a2%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%89%be%e8%a7%84%e5%be%8b"><![CDATA[找规律]]></category>
		<category domain="category" nicename="%e6%a8%a1%e6%8b%9f"><![CDATA[模拟]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P1308 【取数游戏】</title>
		<link>http://106.53.21.5/index.php/2019/08/02/gmoj-p1308-%e3%80%90%e5%8f%96%e6%95%b0%e6%b8%b8%e6%88%8f%e3%80%91/</link>
		<pubDate>Fri, 02 Aug 2019 11:34:43 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=249</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>本题是围绕一个游戏来开展的。 <code class="language-katex katex-inline">n</code> 个正整数 <code class="language-katex katex-inline">a_1</code> ~ <code class="language-katex katex-inline">a_n</code> 围成一圈，两个玩家轮流取数，最开始先手的玩家可以取任意位置上的一个数。 从第二步开始当前玩家只能取上一玩家刚刚取的数的位置的左右两边相邻的数，直到取完所有的数，游戏结束，此时取得较多奇数的玩家获胜。 问你先手第一步有多少种取法能够保证先手必胜。</p>
<p><code class="language-katex katex-inline">1 \leq n \leq 100,1 \leq a_i \leq 10^3</code> 。</p>
<!--more-->
<h2>Solution</h2>
<ul>
<li><strong>方法一</strong></li>
</ul>
<p>这是一道 <strong>博弈论</strong> 的题目，考虑使用 <strong>DP</strong> 来求解。</p>
<p>因为这是一个环，所以我们在读进来的时候要让 <code class="language-katex katex-inline">a_{i+n}=a_{i}</code> 。</p>
<p>我们在这里设 <code class="language-katex katex-inline">f[i][j]</code> 表示当取完了 <code class="language-katex katex-inline">[i,j]</code> 内的所有数时， <strong>先手/后手</strong> 比对方多取了 <code class="language-katex katex-inline">f[i][j]</code> 个奇数。</p>
<p>为了方便表述，我们用 <code class="language-katex katex-inline">a_{i}'</code> 来表示 <code class="language-katex katex-inline">(a_{i}\;\mod\;2)</code> 。</p>
<p>并且我们用 <code class="language-katex katex-inline">sum[i][j]</code> 来表示 <code class="language-katex katex-inline">\sum_{k=i}^{j} a_{i}'</code> 。</p>
<p>那么有转移方程：</p>
<pre><code class="language-katex">f[i][j]\\=sum[i][j]-\min(f[i+1][j],f[i][j-1])</code></pre>
<p>关于转移方程的理解？ 观察转移方程，在第一次 <code class="language-katex katex-inline">f[i][j]</code> 取到一个大的值，第二次则显然会取到一个小的值，这其实就是后手、先手轮流取数的过程。 这一段的伪代码是这样的：</p>
<pre><code>for k : 1 ~ n
{
    memset(f,0,sizeof(f));
    for i : 1 ~ 2n
        f[i][i]=a[i];
    for i : k+n-1 ~ k+1
        for j : i+1 ~ k+n-1
            f[i][j]=sum[i][j]-min(f[i+1][j],f[i][j-1]);
            if 2f[k+1][k+n-1]&lt;sum[k+1][k+n] : ans++;
}</code></pre>
<p>。</p>
<p>其中 <code class="language-katex katex-inline">k</code> 是用来枚举起点的， <code class="language-katex katex-inline">ans</code> 是用来存答案的。</p>
<p>时间复杂度 <code class="language-katex katex-inline">O(n^3)</code> ，具体细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<ul>
<li><strong>方法二</strong> 这是一道 <strong>博弈论</strong> 的题目，考虑使用 <strong>记忆化搜索</strong> 来求解。</li>
</ul>
<p>这个方法比较简单，就不在此赘述了，有兴趣的读者可以写一下这种做法。</p>
<h2>Code</h2>
<ul>
<li><strong>方法一</strong></li>
</ul>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cstring&gt;
int f[201][201],sum[201][201],a[101];
int min(int x,int y)
{
    return x&lt;y?x:y;
}
int main()
{
    int n=0;
    scanf(&quot;%d&quot;,&amp;n);
    for(int i=1;i&lt;=n;i++)
    {
        scanf(&quot;%d&quot;,&amp;a[i]);
        a[i]%=2;
        a[i+n]=a[i];
    }
    for(int i=1;i&lt;=2*n;i++)
    {
        sum[i][i]=a[i];
        for(int j=i+1;j&lt;=2*n;j++)
        {
            sum[i][j]=sum[i][j-1]+a[j];
        }
    }
    int ans=0;
    for(int k=1;k&lt;=n;k++)
    {
        memset(f,0,sizeof(f));
        for(int i=1;i&lt;=n*2;i++)
        {
            f[i][i]=a[i];
        }
        for(int i=k+n-1;i&gt;=k+1;i--)
        {
            for(int j=i+1;j&lt;=k+n-1;j++)
            {
                f[i][j]=sum[i][j]-min(f[i+1][j],f[i][j-1]);
            }
        }
        if(2*f[k+1][k+n-1]&lt;sum[k+1][k+n])
        {
            ans++;
        }
    }
    printf(&quot;%d&quot;,ans);
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>249</wp:post_id>
		<wp:post_date><![CDATA[2019-08-02 19:34:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-02 11:34:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p1308-%e3%80%90%e5%8f%96%e6%95%b0%e6%b8%b8%e6%88%8f%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dfs"><![CDATA[DFS]]></category>
		<category domain="category" nicename="dp"><![CDATA[DP]]></category>
		<category domain="category" nicename="%e5%8d%9a%e5%bc%88%e8%ae%ba"><![CDATA[博弈论]]></category>
		<category domain="category" nicename="%e8%ae%b0%e5%bf%86%e5%8c%96%e6%90%9c%e7%b4%a2"><![CDATA[记忆化搜索]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P1420 【佳肴】</title>
		<link>http://106.53.21.5/index.php/2019/08/02/gmoj-p1420-%e3%80%90%e4%bd%b3%e8%82%b4%e3%80%91/</link>
		<pubDate>Fri, 02 Aug 2019 10:11:59 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=254</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>有两个长度为 <code class="language-katex katex-inline">n</code> 的数组 <code class="language-katex katex-inline">s[]</code> 和 <code class="language-katex katex-inline">b[]</code> 。</p>
<p>现在有一个长度为 <code class="language-katex katex-inline">n</code> 的并且只含有 0 和 1 并且至少有一个 <code class="language-katex katex-inline">1</code> 的数组 <code class="language-katex katex-inline">k[]</code> ，使得 <code class="language-katex katex-inline">|\prod_{i=1}^{n}s_ik_i-\sum_{i=1}^{n}b_ik_i|</code> 的值最小。</p>
<p>现在请你求出这个最小值。</p>
<p><code class="language-katex katex-inline">1\leq n\leq 10,\prod_{i=1}^{n}s_i,\sum_{i=1}^{n}b_i\leq 10^{9}</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>DFS</strong> 来解题。</p>
<p>由于 <code class="language-katex katex-inline">1 \leq n \leq 10</code> ，直接 <strong>DFS</strong> 选择即可。</p>
<p>时间复杂度 <code class="language-katex katex-inline">O(2^{n})</code> ，具体细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<pre><code>#include&lt;cmath&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;
long long int n,a[11],b[11],ans=2147483647;
void dfs(long long int nx,long long int an,long long int bn)
{
    if(nx==n)
    {
        ans=min(ans,abs(an-bn));
        return;
    }
    dfs(nx+1,an,bn);
    dfs(nx+1,an*a[nx+1],bn+b[nx+1]);
}
int main()
{
    scanf(&quot;%lld&quot;,&amp;n);
    for(long long int i=1;i&lt;=n;i++)
    {
        scanf(&quot;%lld%lld&quot;,&amp;a[i],&amp;b[i]);
    }
    for(long long int i=1;i&lt;=n;i++)
    {
        dfs(i,a[i],b[i]);
    }
    printf(&quot;%lld&quot;,ans);
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date><![CDATA[2019-08-02 18:11:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-02 10:11:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p1420-%e3%80%90%e4%bd%b3%e8%82%b4%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dfs"><![CDATA[DFS]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P5935 【小凯学数学】</title>
		<link>http://106.53.21.5/index.php/2019/08/02/gmoj-p5935-%e3%80%90%e5%b0%8f%e5%87%af%e5%ad%a6%e6%95%b0%e5%ad%a6%e3%80%91/</link>
		<pubDate>Fri, 02 Aug 2019 11:34:18 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=255</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>有 <code class="language-katex katex-inline">n</code> 个整数 <code class="language-katex katex-inline">a_1</code> ~ <code class="language-katex katex-inline">a_n</code> ，每次可以选择两个相邻的数进行合并操作， 一个数 <code class="language-katex katex-inline">x</code> 和 <code class="language-katex katex-inline">y</code> 合并以后会得到一个新数：</p>
<pre><code class="language-katex">\dfrac{(a \land b)+(a \lor b)}{2}</code></pre>
<p>然后把新数插在 <code class="language-katex katex-inline">x</code> 和 <code class="language-katex katex-inline">y</code> 之间，接着把 <code class="language-katex katex-inline">x</code> 和 <code class="language-katex katex-inline">y</code> 删去，就这样不断操作，直到只剩下 <code class="language-katex katex-inline">1</code> 个数为止。</p>
<p>现在请你求出剩下的数可能是什么，现在请你把它们从小到大输出。</p>
<p><code class="language-katex katex-inline">1 \leq n \leq 150,0 \leq a_i \leq 7</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>区间DP</strong> 来解题。</p>
<p>设 <code class="language-katex katex-inline">f[i][j][k]=0/1</code> 表示区间 <code class="language-katex katex-inline">[i,j]</code> 不能/能 够通过合并来产生 <code class="language-katex katex-inline">k</code> 这个数。</p>
<p>转移方程和初始化显然：</p>
<ul>
<li>转移方程</li>
</ul>
<pre><code class="language-katex">f[l][r][\frac{1}{2}(x+y)]= \\ f[l][r][\frac{1}{2}(x+y)] \lor (f[l][k][x] \land f[k+1][r][y]) \lor (f[l][k][y] \land f[k+1][r][x])</code></pre>
<ul>
<li>初始化</li>
</ul>
<pre><code class="language-katex">f[i][i][a_i]=1\quad\quad\quad(1 \leq i \leq n)</code></pre>
<p>。</p>
<p>这一段的伪代码如下：</p>
<pre><code>for i : 2 ~ n
    for j : 1 ~ n-i+1
    {
        l=j,r=j+i-1;
        for k : l ~ r-1
            for x : 0 ~ 7
                for y : x ~ 7
                    f[l][r][(x+y)/2]= f[l][r][(x+y)/2] |(f[l][k][x]&amp;f[k+1][r][y]) |(f[l][k][y]&amp;f[k+1][r][x]);
    }</code></pre>
<p>。</p>
<p><strong>区间DP</strong> 的套路：</p>
<pre><code>for i : 1 ~ n //枚举区间长度
    for j : 1 ~ n-i+1 //枚举区间起点
    {
        l=j,r=j+i-1; //计算出转移的左边界和右边界
        for k : l ~ r-1 //枚举中间点
            f[l][r]= min/max/...(f[l][r], f[l][k] +/-/... f[k+1][r] +/-/... xxx );
    }</code></pre>
<p>。</p>
<p>上面的模板的时间复杂度是 <code class="language-katex katex-inline">O(n^3)</code> ，其中 <code class="language-katex katex-inline">n</code> 表示的是区间的长度。</p>
<p>本题的时间复杂度为 <code class="language-katex katex-inline">O(n^3)</code> ，具体细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<pre><code class="language-#include">int f[151][151][8],a[1000001];
int min(int x,int y)
{
    return x&lt;y?x:y;
}
int main()
{
    freopen(&quot;math.in&quot;,&quot;r&quot;,stdin);
    freopen(&quot;math.out&quot;,&quot;w&quot;,stdout);
    int n=0;
    scanf(&quot;%d&quot;,&amp;n);
    for(int i=1;i&lt;=n;i++)
    {
        scanf(&quot;%d&quot;,&amp;a[i]);
        f[i][i][a[i]]=1;
    }
    for(int i=2;i&lt;=n;i++)
    {
        for(int j=1;j&lt;=n-i+1;j++)
        {
            int l=j,r=j+i-1;
            for(int k=l;k&lt;=r-1;k++)
            {
                for(int x=0;x&lt;=7;x++)
                {
                    for(int y=x;y&lt;=7;y++)
                    {
                        f[l][r][(x+y)/2]=f[l][r][(x+y)/2]|(f[l][k][x]&amp;f[k+1][r][y])|(f[l][k][y]&amp;f[k+1][r][x]);
                    }
                }
            }
        }
    }
    for(int i=0;i&lt;=7;i++)
    {
        if(f[1][n][i]==1)
        {
            printf(&quot;%d &quot;,i);
        }
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>255</wp:post_id>
		<wp:post_date><![CDATA[2019-08-02 19:34:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-02 11:34:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p5935-%e3%80%90%e5%b0%8f%e5%87%af%e5%ad%a6%e6%95%b0%e5%ad%a6%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dp"><![CDATA[DP]]></category>
		<category domain="category" nicename="%e5%8c%ba%e9%97%b4dp"><![CDATA[区间DP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LGOJ P5463 【小鱼比可爱】</title>
		<link>http://106.53.21.5/index.php/2019/07/16/lgoj-p5463-%e3%80%90%e5%b0%8f%e9%b1%bc%e6%af%94%e5%8f%af%e7%88%b1%e3%80%91/</link>
		<pubDate>Mon, 15 Jul 2019 23:37:16 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=265</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>这是 <strong>小鱼比可爱</strong> 的 <strong>加强版</strong> 。</p>
<p>给你一个正整数 <code class="language-katex katex-inline">n</code> 和一个序列 <code class="language-katex katex-inline">a_1</code> ~ <code class="language-katex katex-inline">a_n</code> 。</p>
<p>定义 <code class="language-katex katex-inline">f(i,j)</code> 表示序列 <code class="language-katex katex-inline">a</code> 在 <code class="language-katex katex-inline">[l,r]</code> 内的逆序对对数。 现在请你求出：</p>
<pre><code class="language-katex">\sum_{i=1}^n\sum_{j=i+1}^{n}f(i,j)</code></pre>
<p>。</p>
<p>其中 <code class="language-katex katex-inline">1 \leq n \leq 10^6,1 \leq a_i \leq 10^9</code> 。</p>
<p>时间限制 <code class="language-katex katex-inline">2s</code> ， 空间限制 <code class="language-katex katex-inline">256MB</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>离散化</strong> 和 <strong>权值线段树</strong> 来解题。</p>
<p>考虑一对逆序对 <code class="language-katex katex-inline">l</code> 和 <code class="language-katex katex-inline">r</code> ，它所产生的贡献是 <code class="language-katex katex-inline">l\times(n-r+1)</code> 。</p>
<p>显然所有 <code class="language-katex katex-inline">l</code> 的和可以用 <strong>权值线段树</strong> 来维护。</p>
<p>考虑到 <code class="language-katex katex-inline">1 \leq a_i \leq 10^9</code> ，所以要先把序列 <code class="language-katex katex-inline">a</code> <strong>离散化</strong> 一下。</p>
<p>考虑到答案会很大，所以存答案的那个变量要开 <code><code>__int128</code><code> ，其他的变量要开 </code><code>long long</code></code> 。</p>
<p>记得要注意 <code><code>__int128</code></code> 的输出。</p>
<p>时间复杂度 <code class="language-katex katex-inline">O(n\;\log\;n)</code> 。</p>
<p>然后这道题目就做完了，具体的细节见 <strong>代码</strong> 部分。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cctype&gt;
struct node{ long long l,r,lc,rc,c; } tree[2100001];
long long a[1000001],b[1000001],d[1000001];
long long lenb=0,lend=0,len=0;
inline long long read()
{
    long long X=0,w=0;
    char ch=0;
    while(!isdigit(ch))
    {
        w|=ch==&#039;-&#039;;
        ch=getchar();
    }
    while(isdigit(ch))
    X=(X&lt;&lt;3)+(X&lt;&lt;1)+(ch^48),ch=getchar();
    return w?-X:X;
}
inline void print(__int128 x)
{
    if(x&lt;0){putchar(&#039;-&#039;);x=-x;} if(x&gt;9) print(x/10); putchar(x%10+&#039;0&#039;); } void bt(long long l,long long r) { len++; tree[len].l=l; tree[len].r=r; tree[len].lc=0; tree[len].rc=0; tree[len].c=0; long long now=len; if(l&lt;r) { long long mid=(l+r)/2; tree[len].lc=len+1; bt(l,mid); tree[now].rc=len+1; bt(mid+1,r); } } void change(long long now,long long x,long long t) { if(tree[now].l==tree[now].r) { tree[now].c+=t; return ; } long long mid=(tree[now].l+tree[now].r)/2; if(x&lt;=mid) { change(tree[now].lc,x,t); } else { change(tree[now].rc,x,t); } tree[now].c=tree[tree[now].lc].c+tree[tree[now].rc].c; } long long findsum(long long now,long long l,long long r) { if(tree[now].l==l &amp;&amp; tree[now].r==r) { return tree[now].c; } long long mid=(tree[now].l+tree[now].r)/2; if(r&lt;=mid) { return findsum(tree[now].lc,l,r); } else if(mid+1&lt;=l) { return findsum(tree[now].rc,l,r); } else { return findsum(tree[now].lc,l,mid)+findsum(tree[now].rc,mid+1,r); } } void px(long long l,long long r) { long long x=l,y=r,mid=b[(l+r)/2]; while(x&lt;=y) { while(b[x]&lt;mid) { x++; } while(b[y]&gt;mid) { y--; } if(x&lt;=y) { long long t=b[x]; b[x]=b[y]; b[y]=t; x++; y--; } } if(l&lt;y) { px(l,y); } if(x&lt;r) { px(x,r); } } long long find(long long x) { long long l=1,r=lend; while(l&lt;r) { long long mid=(l+r)/2; if(d[mid]&lt;x) { l=mid+1; } else { r=mid; } } return l; } int main() { __int128 ans=0; long long ma=0,n=0; n=read(); for(long long i=1;i&lt;=n;i++) { a[i]=read(); a[i]++; b[++lenb]=a[i]; } px(1,lenb); for(long long i=1;i&lt;=lenb;i++) { if(b[i]!=b[i-1]) { d[++lend]=b[i]; } } for(long long i=1;i&lt;=n;i++) { a[i]=find(a[i]); if(a[i]&gt;ma) { ma=a[i]; } } bt(1,ma+1); change(1,a[1],1); for(long long i=2;i&lt;=n;i++) { ans+=(__int128)findsum(1,a[i]+1,ma+1)*(n-i+1); change(1,a[i],i); } print(ans); return 0; }</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date><![CDATA[2019-07-16 07:37:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-15 23:37:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lgoj-p5463-%e3%80%90%e5%b0%8f%e9%b1%bc%e6%af%94%e5%8f%af%e7%88%b1%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84"><![CDATA[树状数组]]></category>
		<category domain="category" nicename="%e7%a6%bb%e6%95%a3%e5%8c%96"><![CDATA[离散化]]></category>
		<category domain="category" nicename="%e7%ba%bf%e6%ae%b5%e6%a0%91"><![CDATA[线段树]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P3403 【数列变换】</title>
		<link>http://106.53.21.5/index.php/2019/08/04/gmoj-p3403-%e3%80%90%e6%95%b0%e5%88%97%e5%8f%98%e6%8d%a2%e3%80%91/</link>
		<pubDate>Sat, 03 Aug 2019 21:46:58 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=275</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>开始有一初始数列 <code class="language-katex katex-inline">a=[a_{1},a_{2},a_{3},···,a_{n}]</code> ,定义 <code class="language-katex katex-inline">f(a,k)=[a_{2},a_{3},···,a_{k},a_{1},a_{k+2},a_{k+3},···,a_{2k},a_{k+1}···]</code> ，也就是把 <code class="language-katex katex-inline">a</code> 分段，每段 <code class="language-katex katex-inline">k</code> 个，若最后不足 <strong>k</strong> 个时，将剩下的组成新的一段，每段第一个移成该段最后一个。</p>
<p>求 <code class="language-katex katex-inline">f(f(f(f(f(1,2,3,···,n),2),3),···),n)</code> 的结果。</p>
<p><code class="language-katex katex-inline">1\leq n\leq 10^{6}</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>模拟</strong> 和 <strong>找规律</strong> 来解题。</p>
<p>按题意所说，应该这样做：</p>
<p><img src="http://106.53.21.5/wp-content/uploads/2019/08/图教1-825x510-1.png" alt="附图1" /></p>
<p>但看图之后发现，似乎第二个和第三个格的前移操作似乎浪费了，于是我们可以开大数组，直接队列后移：</p>
<p><img src="http://106.53.21.5/wp-content/uploads/2019/08/图教2.png" alt="附图2" /></p>
<p>本题的时间复杂度 <code class="language-katex katex-inline">O(n \log n)</code> ，具体细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<pre><code>#include&lt;cstdio&gt;
int n,a[2000001],an,t;
int main()
{
    scanf(&quot;%d&quot;,&amp;n);
    for(int i=1;i&lt;=n;i++)
        a[i]=i;
    for(register int i=2;i&lt;=n;i++)
    {
        an=a[i-1];
        for(register int j=2*i-1;j&lt;=n+i-2;j+=i)
        {
            t=an;
            an=a[j];
            a[j]=t;
        }
        a[n+i-1]=an;
    }
    for(int i=n;i&lt;=2*n-1;i++)
    {
        printf(&quot;%d &quot;,a[i]);
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date><![CDATA[2019-08-04 05:46:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-03 21:46:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p3403-%e3%80%90%e6%95%b0%e5%88%97%e5%8f%98%e6%8d%a2%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%89%be%e8%a7%84%e5%be%8b"><![CDATA[找规律]]></category>
		<category domain="category" nicename="%e6%a8%a1%e6%8b%9f"><![CDATA[模拟]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P4546 【朗格拉日计数】</title>
		<link>http://106.53.21.5/index.php/2019/08/04/gmoj-p4546-%e3%80%90%e6%9c%97%e6%a0%bc%e6%8b%89%e6%97%a5%e8%ae%a1%e6%95%b0%e3%80%91/</link>
		<pubDate>Sat, 03 Aug 2019 21:46:43 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=312</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>给你一个正整数 <code class="language-katex katex-inline">n</code> 和由 <code class="language-katex katex-inline">n</code> 个正整数 <code class="language-katex katex-inline">a_1</code> ~ <code class="language-katex katex-inline">a_n</code> 构成的环，它们为 <code class="language-katex katex-inline">n</code> 的排列，问你有多少个三元组 <code class="language-katex katex-inline">(i,j,k)</code> 满足 <code class="language-katex katex-inline">a_i < a_j < a_k</code> ，且 <code class="language-katex katex-inline">i,j,k</code> 在环上是顺时针排列。</p>
<p><code class="language-katex katex-inline">3 \leq n \leq 2 \times 10^5</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>树状数组</strong> 来解题。</p>
<p>考虑怎么计算答案。</p>
<p>不难得出答案等于 <code class="language-katex katex-inline">123+231+312</code> 其中 <code class="language-katex katex-inline">1</code> 、 <code class="language-katex katex-inline">2</code> 、 <code class="language-katex katex-inline">3</code> 表示的是 <code class="language-katex katex-inline">a_i</code> 、 <code class="language-katex katex-inline">a_j</code> 、 <code class="language-katex katex-inline">a_k</code> 的大小关系。</p>
<p>那么显然答案等于：</p>
<p><code class="language-katex katex-inline">123+(\text{xx}1-321)+(3\text{xx}-321)</code> 。</p>
<p>然后我们只需要维护出在位置 <code class="language-katex katex-inline">i</code> 的前面比它 小/大 的数的个数和在位置 <code class="language-katex katex-inline">i</code> 的后面比它 小/大 的数的个数即可。</p>
<p>这个可以用 <strong>树状数组</strong> 来做。</p>
<p>时间复杂度 <code class="language-katex katex-inline">O(n \log n)</code> ，具体细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cstring&gt;
long long sum1[1000001],sum2[1000001];
long long lx[1000001],rx[1000001];
long long ld[1000001],rd[1000001];
long long a[1000001];
long long n=0;
long long lowbit(long long x)
{
    return x &amp; -x;
}
void update(long long x,long long k)
{
    long long now=x;
    while(x&lt;=n)
    {
        sum1[x]+=k;
        sum2[x]+=(now-1)*k;
        x+=lowbit(x);
    }
}
long long sum(long long x)
{
    long long res=0,now=x;
    while(x&gt;=1)
    {
        res+=sum1[x]*now-sum2[x];
        x-=lowbit(x);
    }
    return res;
}
int main()
{
    freopen(&quot;counter.in&quot;,&quot;r&quot;,stdin);
    freopen(&quot;counter.out&quot;,&quot;w&quot;,stdout);
    scanf(&quot;%lld&quot;,&amp;n);
    for(long long i=1;i&lt;=n;i++)
    {
        scanf(&quot;%lld&quot;,&amp;a[i]);
    }
    for(long long i=1;i&lt;=n;i++)
    {
        lx[i]=sum(a[i]);
        ld[i]=sum(n)-sum(a[i]);
        update(a[i],1);
        update(a[i]+1,-1);
    }
    memset(sum1,0,sizeof(sum1));
    memset(sum2,0,sizeof(sum2));
    for(long long i=n;i&gt;=1;i--)
    {
        rx[i]=sum(a[i]);
        rd[i]=sum(n)-sum(a[i]);
        update(a[i],1);
        update(a[i]+1,-1);
    }
    long long ans=0;
    for(long long i=1;i&lt;=n;i++)
    {
        ans+=lx[i]*rd[i];
        ans+=ld[i]*(ld[i]-1)/2;
        ans+=rx[i]*(rx[i]-1)/2;
        ans-=2*(ld[i]*rx[i]);
    }
    printf(&quot;%lld&quot;,ans);
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>312</wp:post_id>
		<wp:post_date><![CDATA[2019-08-04 05:46:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-03 21:46:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p4546-%e3%80%90%e6%9c%97%e6%a0%bc%e6%8b%89%e6%97%a5%e8%ae%a1%e6%95%b0%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84"><![CDATA[树状数组]]></category>
		<category domain="category" nicename="%e7%ba%bf%e6%ae%b5%e6%a0%91"><![CDATA[线段树]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P3035 【铁轨】</title>
		<link>http://106.53.21.5/index.php/2019/08/02/gmoj-p3035-%e3%80%90%e9%93%81%e8%bd%a8%e3%80%91/</link>
		<pubDate>Fri, 02 Aug 2019 11:42:03 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=327</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>给你一个正整数 <code class="language-katex katex-inline">n</code> ，然后给你 <code class="language-katex katex-inline">n</code> 个正整数 <code class="language-katex katex-inline">a_1</code> ~ <code class="language-katex katex-inline">a_n</code> ，问你是否有可能存在入栈顺序为 <code class="language-katex katex-inline">1,2,3,...,n</code> ，出栈顺序为 <code class="language-katex katex-inline">a_1</code> ~ <code class="language-katex katex-inline">a_n</code> 的情况，共有 <code class="language-katex katex-inline">T</code> 组数据。</p>
<p><code class="language-katex katex-inline">1 \leq n \leq 1000,1 \leq T \leq 10</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>模拟</strong> 和 <strong>栈</strong> 来解题。</p>
<p>直接模拟进栈和出栈，当当前进栈的数的编号为当前要出栈的数的编号时就出栈。这个过程可以用两个指针搞，一个在栈上，一个在指定顺序上，一旦当前两个指针指的位置相同时就要用一个 <code class="language-katex katex-inline">\text{while循环}</code> 来出 <strong>栈</strong> 。 <strong>注意</strong> ，有可能一次将多个数出栈，如果最后栈上还有数就不行，否则可以。</p>
<p>时间复杂度 <code class="language-katex katex-inline">O(n)</code> ，具体细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cstring&gt;
using namespace std;
int n,a[1001],wei,f[1001],tou;
inline int read()
{
    int s=0,f=1;
    char c=getchar();
    while (!(c&gt;=&#039;0&#039;)&amp;&amp;(c&lt;=&#039;9&#039;)) {
        if (c==&#039;-&#039;) f=-1;
        c=getchar();
    }
    while ((c&gt;=&#039;0&#039;)&amp;&amp;(c&lt;=&#039;9&#039;)) {
        s=s*10+c-&#039;0&#039;;
        c=getchar();
    }
    return s*f;
}
int main()
{
    while(1)
    {
        n=read();
        if(!n)break; 
        while(1)
        {
            a[1]=read();
            if(!a[1])break;
            for(int i=2;i&lt;=n;i++)a[i]=read();
            tou=0;wei=1;
            for(int i=1;i&lt;=n;i++)
            {
                f[++tou]=i;
                if(a[wei]==f[tou])
                {
                    while(a[wei]==f[tou]&amp;&amp;tou&gt;0)
                    {
                        wei++;tou--;
                    }
                }
            }
            if(tou)
            {
                printf(&quot;No\n&quot;);
            }
            else
            {
                printf(&quot;Yes\n&quot;);
            }
        }
        puts(&quot;&quot;);
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>327</wp:post_id>
		<wp:post_date><![CDATA[2019-08-02 19:42:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-02 11:42:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p3035-%e3%80%90%e9%93%81%e8%bd%a8%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%a0%88"><![CDATA[栈]]></category>
		<category domain="category" nicename="%e6%a8%a1%e6%8b%9f"><![CDATA[模拟]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P4811 【排队】</title>
		<link>http://106.53.21.5/index.php/2019/07/14/gmoj-p4811-%e3%80%90%e6%8e%92%e9%98%9f%e3%80%91/</link>
		<pubDate>Sat, 13 Jul 2019 23:32:33 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=330</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p><img src="https://i.loli.net/2019/07/04/5d1daa24b820012162.jpg" alt="" /></p>
<p><code class="language-katex katex-inline">1 \leq n,t \leq10^5</code></p>
<!--more-->
<h2>Solution</h2>
<p>我们可以先用深搜求出每一个点的 <strong>优先级</strong> 和 <strong>深度</strong> 。</p>
<p>优先级指的是来的人进入树的节点的顺序，值越小表示越早进入。</p>
<p>然后用一个堆来维护这个优先级。</p>
<p>这样子每次做 <code class="language-katex katex-inline">1</code> 操作的时候就可以直接在堆里取了。</p>
<p>然后我们用一个数组 <code class="language-katex katex-inline">bj[]</code> 来表示一个点是否有人。</p>
<p>当 <code class="language-katex katex-inline">bj[i]=1</code> 是表示 <code class="language-katex katex-inline">i</code> 号点有人，为  表示 <code class="language-katex katex-inline">i</code> 号点没有人。</p>
<p>对于 <code class="language-katex katex-inline">2</code> 操作，我们发现对于一个点 <code class="language-katex katex-inline">p</code> ，我们取完点 <code class="language-katex katex-inline">p</code> 移动完后的状态相当于拿掉从点 <code class="language-katex katex-inline">p</code> 到根节点的路径上有人的点中深度最小的那个点然后不移动。</p>
<p>我们不放设 <strong>从点 <code class="language-katex katex-inline">p</code> 到根节点的路径上有人的点中深度最小的那个点</strong> 为点 <code class="language-katex katex-inline">q</code> 。</p>
<p>如果我们设点 <code class="language-katex katex-inline">i</code> 的深度为 <code class="language-katex katex-inline">dep_i</code> ，那么这次 <code class="language-katex katex-inline">2</code> 操作的答案就是 <code class="language-katex katex-inline">(dep_p-dep_q)</code> 。求点 <code class="language-katex katex-inline">q</code> 是可以用倍增来做的。</p>
<p>注意在做完 <code class="language-katex katex-inline">2</code> 操作后把点 <code class="language-katex katex-inline">p</code> 放回堆中并且维护堆。</p>
<p>然后这道题就做完了。</p>
<p>时间复杂度 <code class="language-katex katex-inline">O((n+t)\;\log\;n)</code> 。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
struct node{ int x,y,g; } b[1000001];
int color[1000001],vis[1000001],dep[1000001],bj[1000001];
int h[1000001],d[1000001],u[1000001],f[500001][21];
int len=0,p=0,n=0,T=0;
inline int read()
{
    char c;
    while((c=getchar())&gt;&#039;9&#039; || c&lt;&#039;0&#039;);
    int ans=c-&#039;0&#039;;
    while((c=getchar())&gt;=&#039;0&#039; &amp;&amp; c&lt;=&#039;9&#039;)
    {
        ans=(ans&lt;&lt;3)+(ans&lt;&lt;1)+(c-&#039;0&#039;);
    }
    return ans;
}
inline int min(int x,int y)
{
    return x&lt;y?x:y;
}
inline void ins(int x,int y)
{
    len++;
    b[len].x=x;
    b[len].y=y;
    b[len].g=h[x];
    h[x]=len;
}
inline void dfs(int x)
{
    int dq=0;
    bool flag=false;
    vis[x]=1;
    while(true)
    {
        dq=n+1;
        for(int i=h[x];i&gt;0;i=b[i].g)
        {
            if(color[b[i].y]==0 &amp;&amp; vis[b[i].y]==0)
            {
                dq=min(dq,b[i].y);
            }
        }
        if(dq==n+1)
        {
            break;
        }
        vis[dq]=1;
        dfs(dq);
        d[++p]=dq;
        color[dq]=1;
    }
}
inline void dfs2(int x)
{
    for(int i=h[x];i&gt;0;i=b[i].g)
    {
        int y=b[i].y;
        if(dep[y]==0)
        {
            dep[y]=dep[x]+1;
            f[y][0]=x;
            dfs2(y);
        }
    }
}
inline void pushdown(int x)
{
    int lson=x*2,rson=x*2+1;
    if(x*2&gt;n)
    {
        return ;
    }
    if(x*2+1&gt;n)
    {
        if(u[d[x]]&gt;u[d[lson]])
        {
            int t=d[x];
            d[x]=d[lson];
            d[lson]=t;
            pushdown(lson);
        }
        return ;
    }
    if(u[d[x]]&gt;u[d[lson]] &amp;&amp; u[d[x]]&gt;u[d[rson]])
    {
        if(u[d[lson]]&lt;u[d[rson]])
        {
            int t=d[x];
            d[x]=d[lson];
            d[lson]=t;
            pushdown(lson);
        }
        else
        {
            int t=d[x];
            d[x]=d[rson];
            d[rson]=t;
            pushdown(rson);
        }
    }
    else if(u[d[x]]&gt;u[d[lson]])
    {
        int t=d[x];
        d[x]=d[lson];
        d[lson]=t;
        pushdown(lson);
    }
    else if(u[d[x]]&gt;u[d[rson]])
    {
        int t=d[x];
        d[x]=d[rson];
        d[rson]=t;
        pushdown(rson);
    }
}
inline void pushup(int x)
{
    if(x==1)
    {
        return ;
    }
    int fa=x/2;
    if(u[d[x]]&lt;u[d[fa]])
    {
        int t=d[x];
        d[x]=d[fa];
        d[fa]=t;
        pushup(fa);
    }
}
int main()
{
    scanf(&quot;%d %d&quot;,&amp;n,&amp;T);
    for(int i=1;i&lt;=n-1;i++)
    {
        int x=0,y=0;
        x=read(),y=read();
        ins(x,y),ins(y,x);
    }
    dfs(1);
    dep[1]=1;
    dfs2(1);
    for(int j=1;j&lt;=20;j++)
    {
        for(int i=1;i&lt;=n;i++)
        {
            f[i][j]=f[f[i][j-1]][j-1];
        }
    }
    d[n]=1;
    for(int i=1;i&lt;=n;i++)
    {
        u[d[i]]=i;
    }
    u[0]=999999999;
    while(T--)
    {
        int t=0,x=0;
        t=read(),x=read();
        if(t==1)
        {
            int dqans=0;
            for(int i=1;i&lt;=x;i++)
            {
                dqans=d[1];
                bj[d[1]]=1;
                d[1]=d[n];
                d[n]=0;
                n--;
                pushdown(1);
            }
            printf(&quot;%d\n&quot;,dqans);
        }
        else if(t==2)
        {
            int tx=x;
            for(int i=20;i&gt;=0;i--)
            {
                if(f[tx][i]!=0 &amp;&amp; bj[f[tx][i]]==1)
                {
                    tx=f[tx][i];
                }
            }
            bj[tx]=0;
            d[++n]=tx;
            pushup(n);
            printf(&quot;%d\n&quot;,dep[x]-dep[tx]);
        }
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>330</wp:post_id>
		<wp:post_date><![CDATA[2019-07-14 07:32:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-13 23:32:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p4811-%e3%80%90%e6%8e%92%e9%98%9f%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dfs"><![CDATA[DFS]]></category>
		<category domain="category" nicename="%e5%80%8d%e5%a2%9e"><![CDATA[倍增]]></category>
		<category domain="category" nicename="%e5%a0%86"><![CDATA[堆]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JSOJ 36675 【锈湖】</title>
		<link>http://106.53.21.5/index.php/2019/07/17/jsoj-36675-%e3%80%90%e9%94%88%e6%b9%96%e3%80%91/</link>
		<pubDate>Tue, 16 Jul 2019 22:33:34 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=332</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p><strong>JSOJ</strong> 为 <strong>计蒜客</strong> ，题目地址为： <a href="https://nanti.jisuanke.com/t/36675">https://nanti.jisuanke.com/t/36675</a> 。</p>
<p>给你一个正整数 <code class="language-katex katex-inline">n</code> 和 <code class="language-katex katex-inline">n</code> 个正整数 <code class="language-katex katex-inline">a_1</code> ~ <code class="language-katex katex-inline">a_n</code> ，请你求出：</p>
<p><code class="language-katex katex-inline">\max_{i=1}^{n}\max_{j=i+1}^n \gcd(i,j)</code></p>
<p><code class="language-katex katex-inline">1 \leq n,a_i \leq 5 \times 10^6</code></p>
<p><code class="language-katex katex-inline">\text{时间限制 2s，空间限制 524288K。 }</code></p>
<!--more-->
<h2>Solution</h2>
<p>想到了正解然而复杂度算错了以为过不去，一打开题解发现就是我这方法......</p>
<p>考虑使用 <strong>暴力</strong> 来解题。</p>
<p>发现一个数 <code class="language-katex katex-inline">k</code> 能成为答案时，显然在 <code class="language-katex katex-inline">a_1</code> ~ <code class="language-katex katex-inline">a_n</code> 中至少有 <code class="language-katex katex-inline">2</code> 个是 <code class="language-katex katex-inline">k</code> 的倍数。</p>
<p>那么我们把每个数的倍数处理出来就行啦。</p>
<p>当 <code class="language-katex katex-inline">(\max_{i=1}^n a_i)=n</code> 时，时间复杂度是 <code class="language-katex katex-inline">O(n\;\log\;n)</code> ，可以过掉这道题目。</p>
<p>具体的细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
#define N 5000000
int f[5000001],a[5000001];
int main()
{
    int n=0;
    scanf(&quot;%d&quot;,&amp;n);
    for(int i=1;i&lt;=n;i++)
    {
        int x=0;
        scanf(&quot;%d&quot;,&amp;x);
        a[x]++;
    }
    for(int i=1;i&lt;=N;i++)
    {
        for(int j=0;j&lt;=N;j+=i)
        {
            f[i]+=a[j];
        }
    }
    for(int i=N;i&gt;=1;i--)
    {
        if(f[i]&gt;=2)
        {
            printf(&quot;%d&quot;,i);
            break;
        }
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>332</wp:post_id>
		<wp:post_date><![CDATA[2019-07-17 06:33:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-16 22:33:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[jsoj-36675-%e3%80%90%e9%94%88%e6%b9%96%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9a%b4%e5%8a%9b"><![CDATA[暴力]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P1016 【苹果树】</title>
		<link>http://106.53.21.5/index.php/2019/08/01/gmoj-p1016-%e3%80%90%e8%8b%b9%e6%9e%9c%e6%a0%91%e3%80%91/</link>
		<pubDate>Thu, 01 Aug 2019 03:36:11 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=335</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>给你一棵有 <code class="language-katex katex-inline">n</code> 个节点的树，一开始第 <code class="language-katex katex-inline">i</code> 个点的点权为 <code class="language-katex katex-inline">q_i(1 \leq i \leq n)</code> 。</p>
<p>现在请你支持两种操作（一共有 <code class="language-katex katex-inline">m</code> 次操作）：</p>
<p>[1] 将 <code class="language-katex katex-inline">x</code> 号点的点权 <code class="language-katex katex-inline">q_x</code> 改为 <code class="language-katex katex-inline">(1-q_x)</code> 。</p>
<p>[2] 求出以 <code class="language-katex katex-inline">x</code> 号点为根的子树的所有点的点权和。</p>
<p><code class="language-katex katex-inline">1 \leq n,m \leq 10^5</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>DFS</strong> 和 <strong>线段树</strong> 来解题。</p>
<p>先求出 <strong>DFS序</strong> ，然后用 <strong>线段树</strong> 来维护区间和即可。</p>
<p>时间复杂度 <code class="language-katex katex-inline">O(m\;\log\;n)</code> ,具体细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
struct nodea{ int l,r,lc,rc,c; } a[1000001];
struct nodeb{ int x,y,g; } b[1000001];
int vis[1000001],q[1000001],h[1000001];
int ne[1000001],f[1000001];
int len=0,ti=0;
void ins(int x,int y)
{
    len++;
    b[len].x=x;
    b[len].y=y;
    b[len].g=h[x];
    h[x]=len;
}
int dfs(int x)
{
    vis[x]=1;
    f[x]=++ti;
    for(int i=h[x];i&gt;0;i=b[i].g)
    {
        int y=b[i].y;
        if(vis[y]==0)
        {
            ne[x]=dfs(y);
        }
    }
    if(ne[x]==0)
    {
        ne[x]=x;
    }
    return ne[x];
}
void bt(int l,int r)
{
    len++;
    a[len].l=l;
    a[len].r=r;
    a[len].lc=-1;
    a[len].rc=-1;
    a[len].c=0;
    int now=len;
    if(l&lt;r)
    {
        int mid=(l+r)/2;
        a[len].lc=len+1;
        bt(l,mid);
        a[now].rc=len+1;
        bt(mid+1,r);
    }
}
void change(int now,int x,int t)
{
    if(a[now].l==a[now].r)
    {
        a[now].c=t;
        return ;
    }
    int mid=(a[now].l+a[now].r)/2;
    if(x&lt;=mid)
    {
        change(a[now].lc,x,t);
    }
    else
    {
        change(a[now].rc,x,t);
    }
    a[now].c=a[a[now].lc].c+a[a[now].rc].c;
}
int findsum(int now,int l,int r)
{
    if(a[now].l==l &amp;&amp; a[now].r==r)
    {
        return a[now].c;
    }
    int mid=(a[now].l+a[now].r)/2;
    if(r&lt;=mid)
    {
        return findsum(a[now].lc,l,r);
    }
    else if(mid+1&lt;=l)
    {
        return findsum(a[now].rc,l,r);
    }
    else
    {
        return findsum(a[now].lc,l,mid)+findsum(a[now].rc,mid+1,r);
    }
}
int main()
{
    int n=0,T=0;
    scanf(&quot;%d&quot;,&amp;n);
    for(int i=1;i&lt;=n-1;i++)
    {
        int x=0,y=0;
        scanf(&quot;%d %d&quot;,&amp;x,&amp;y);
        ins(x,y);
        ins(y,x);
    }
    ne[1]=dfs(1);
    len=0;
    bt(1,n);
    for(int i=1;i&lt;=n;i++)
    {
        q[i]=1;
        change(1,i,1);
    }
    scanf(&quot;%d\n&quot;,&amp;T);
    while(T--)
    {
        char t[3];
        int x=0;
        scanf(&quot;%s %d&quot;,t+1,&amp;x);
        if(t[1]==&#039;Q&#039;)
        {
            printf(&quot;%d\n&quot;,findsum(1,f[x],f[ne[x]]));
        }
        else if(t[1]==&#039;C&#039;)
        {
            q[x]=1-q[x];
            change(1,f[x],q[x]);
        }
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date><![CDATA[2019-08-01 11:36:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-01 03:36:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p1016-%e3%80%90%e8%8b%b9%e6%9e%9c%e6%a0%91%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84"><![CDATA[树状数组]]></category>
		<category domain="category" nicename="%e7%ba%bf%e6%ae%b5%e6%a0%91"><![CDATA[线段树]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P1382 【区间】</title>
		<link>http://106.53.21.5/index.php/2019/08/02/gmoj-p1382-%e3%80%90%e5%8c%ba%e9%97%b4%e3%80%91/</link>
		<pubDate>Fri, 02 Aug 2019 06:26:35 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=337</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>给你 <code class="language-katex katex-inline">n</code> 个区间，第 <code class="language-katex katex-inline">i</code> 个区间为 <code class="language-katex katex-inline">[l_i,r_i]</code> 。</p>
<p>现在请你从中选出若干个区间组成一个队列，使得前一个区间包含后一个区间，求最多能够选出多少个区间。</p>
<p><code class="language-katex katex-inline">1 \leq n \leq 10^5,1 \leq l_i,r_i \leq 10^6</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>二分</strong> 来解题。</p>
<p><strong>注意</strong>，下文的 <code class="language-katex katex-inline">tl[]</code> 和 <code class="language-katex katex-inline">tr[]</code> 指的是选出来的区间，<code class="language-katex katex-inline">l[]</code> 和 <code class="language-katex katex-inline">r[]</code> 指的是原区间。</p>
<p>发现满足题目要求的序列在 <code class="language-katex katex-inline">i \geq 2</code> 的前提下必定会满足 <code class="language-katex katex-inline">tl_{i-1} \leq tl_i</code> 和 <code class="language-katex katex-inline">tr_{i-1} \geq tr_i</code> 。</p>
<p>那么显然以 <code class="language-katex katex-inline">l[]</code> 为关键字从小到大排序，那么 <code class="language-katex katex-inline">r[]</code> 的最长不上升子序列的长度就是答案了。</p>
<p>题目中的 <code class="language-katex katex-inline">n</code> 的范围是 <code class="language-katex katex-inline">1 \leq n \leq 10^5</code> ，考虑怎么用复杂度为 <code class="language-katex katex-inline">O(n\;\log\;n)</code> 的复杂度求出答案。</p>
<p>使用 <strong>二分</strong> 求解即可。</p>
<p>时间复杂度 <code class="language-katex katex-inline">O(n\;\log\;n)</code> ，具体细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
int f[1000001],a[1000001],b[1000001];
void px(int l,int r)
{
    int x=l,y=r,mid=a[(l+r)/2],mid2=b[(l+r)/2];
    while(x&lt;=y)
    {
        while(a[x]&lt;mid || (a[x]==mid &amp;&amp; b[x]&gt;mid2))
        {
            x++;
        }
        while(a[y]&gt;mid || (a[y]==mid &amp;&amp; b[y]&lt;mid2))
        {
            y--;
        }
        if(x&lt;=y)
        {
            int t=a[x];
            a[x]=a[y];
            a[y]=t;

            t=b[x];
            b[x]=b[y];
            b[y]=t;

            x++;
            y--;
        }
    }
    if(l&lt;y)
    {
        px(l,y);
    }
    if(x&lt;r)
    {
        px(x,r);
    }
}
int main()
{
    int n=0;
    scanf(&quot;%d&quot;,&amp;n);
    for(int i=1;i&lt;=n;i++)
    {
        scanf(&quot;%d %d&quot;,&amp;a[i],&amp;b[i]);
    }
    px(1,n);
    int len=0;
    f[0]=999999999;
    for(int i=1;i&lt;=n;i++)
    {
        if(b[i]&lt;=f[len])
        {
            f[++len]=b[i];
        }
        else
        {
            int l=1,r=len;
            while(l&lt;r)
            {
                int mid=(l+r)/2;
                if(f[mid]&gt;=b[i])
                {
                    l=mid+1;
                }
                else
                {
                    r=mid;
                }
            }
            if(b[i]&gt;f[l])
            {
                f[l]=b[i];
            }
        }
    }
    printf(&quot;%d&quot;,len);
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>337</wp:post_id>
		<wp:post_date><![CDATA[2019-08-02 14:26:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-02 06:26:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p1382-%e3%80%90%e5%8c%ba%e9%97%b4%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e4%ba%8c%e5%88%86"><![CDATA[二分]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P1381 【删除】</title>
		<link>http://106.53.21.5/index.php/2019/08/02/gmoj-p1381-%e3%80%90%e5%88%a0%e9%99%a4%e3%80%91/</link>
		<pubDate>Fri, 02 Aug 2019 07:37:22 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=339</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>给你 <code class="language-katex katex-inline">3</code> 个长度为 <code class="language-katex katex-inline">n</code> 的由正整数构成的数组 <code class="language-katex katex-inline">a[],b[],c[]</code> ，它们按顺序排成 <code class="language-katex katex-inline">3</code> 行共 <code class="language-katex katex-inline">n</code> 列的矩阵。其中 <code class="language-katex katex-inline">a[]</code> 为 <code class="language-katex katex-inline">1</code> ~ <code class="language-katex katex-inline">n</code> 的排列。并且 <code class="language-katex katex-inline">1 \leq b[i],c[i] \leq n</code> 。</p>
<p>现在想在删除若干列后使得 <code class="language-katex katex-inline">a[],b[],c[]</code> 在排完序后完全一样，求最少需要删除的列的数量。</p>
<p><code class="language-katex katex-inline">1 \leq n \leq 10^5</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>桶</strong> 来解题。</p>
<p>我们用 <code class="language-katex katex-inline">cnt1[i]</code> 来表示 <code class="language-katex katex-inline">b[]</code> 中 <strong>数值</strong> 为 <code class="language-katex katex-inline">i</code> 的数的 <strong>个数</strong> 。</p>
<p>并且我们用 <code class="language-katex katex-inline">cnt2[i]</code> 来表示 <code class="language-katex katex-inline">c[]</code> 中 <strong>数值</strong> 为 <code class="language-katex katex-inline">i</code> 的数的 <strong>个数</strong> 。</p>
<p>然后就枚举一个 <code class="language-katex katex-inline">i(1</code> ~ <code class="language-katex katex-inline">n)</code> ，然后看一下 <code class="language-katex katex-inline">cnt1[\;a[i]\;]</code> 和 <code class="language-katex katex-inline">cnt2[\;a[i]\;]</code> 是否 <strong>大于</strong>  ，如果不是就把<code class="language-katex katex-inline">cnt1[\;a[i]\;]</code> 和 <code class="language-katex katex-inline">cnt2[\;a[i]\;]</code> 都减去 <code class="language-katex katex-inline">1</code> 。然后通过标记的方式删掉第 <code class="language-katex katex-inline">i</code> 列。</p>
<p>如果这次循环删掉了 <strong>至少一列</strong> ，那么就再来一次循环，直到删不了为止。</p>
<p>这样做就是正确的了。</p>
<p>考虑为什么这样删是正确的。</p>
<p>如果原来排序不一样，那么至少有一行有一个数值的数没有出现。</p>
<p>那么必然这一行中有相同的数。</p>
<p>那么如果我们能够保证按照上面的删数方法删数完毕后没有一行有相同的数，那么这种方法就是正确的了。</p>
<p>考虑怎么说明按照上面的删数方法删数完毕后没有一行有相同的数。</p>
<p>我们假设相同的数所在的列不在 <strong>没有都在三行中出现的数值</strong> 所在的列。</p>
<p>那么必然会出现一个 <strong>恰好出现三次的数值的数</strong> 被删掉，从而引发一次删数，不断循环。</p>
<p>所以在删完之后不会出现一行中有重复的数值。</p>
<p>所以这样的方法就是对的了。</p>
<p>最坏时间复杂度 <code class="language-katex katex-inline">O(n^2)</code> ，可以通过在开始把数打乱的方式防止被卡掉，这样复杂度就是接近 <code class="language-katex katex-inline">O(n)</code> 的了。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
int book[1000001],cnt1[1000001],cnt2[1000001],bj[1000001],a[1000001],b[1000001],c[1000001];
int main()
{
    srand(19260817);
    int n=0;
    scanf(&quot;%d&quot;,&amp;n);
    for(int i=1;i&lt;=n;i++)
    {
        scanf(&quot;%d&quot;,&amp;a[i]);
    }
    for(int i=1;i&lt;=n;i++)
    {
        scanf(&quot;%d&quot;,&amp;b[i]);
    }
    for(int i=1;i&lt;=n;i++)
    {
        scanf(&quot;%d&quot;,&amp;c[i]);
    }
    for(int i=1;i&lt;=n;i++)
    {
        int x=rand()%n+1,y=rand()%n+1;
        if(x!=y)
        {
            int t=a[x];
            a[x]=a[y];
            a[y]=t;

            t=b[x];
            b[x]=b[y];
            b[y]=t;

            t=c[x];
            c[x]=c[y];
            c[y]=t;
        }
    }
    for(int i=1;i&lt;=n;i++)
    {
        cnt1[b[i]]++;
        cnt2[c[i]]++;
    }
    int ans=0;
    while(true)
    {
        bool flag=false;
        for(int i=1;i&lt;=n;i++)
        {
            if(bj[i]==0 &amp;&amp; (cnt1[a[i]]==0 || cnt2[a[i]]==0))
            {
                ans++;
                bj[i]=1;
                flag=true;
                cnt1[b[i]]--;
                cnt2[c[i]]--;
            }
        }
        if(flag==false)
        {
            break;
        }
    }
    printf(&quot;%d&quot;,ans);
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>339</wp:post_id>
		<wp:post_date><![CDATA[2019-08-02 15:37:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-02 07:37:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p1381-%e3%80%90%e5%88%a0%e9%99%a4%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%a1%b6"><![CDATA[桶]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P3033 【石子游戏】</title>
		<link>http://106.53.21.5/index.php/2019/08/04/gmoj-p3033-%e3%80%90%e7%9f%b3%e5%ad%90%e6%b8%b8%e6%88%8f%e3%80%91/</link>
		<pubDate>Sun, 04 Aug 2019 11:08:58 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=342</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>两人取一堆 <code class="language-katex katex-inline">n</code> 个石子，先手不能全部取完，之后每人取的个数不能超过另一个人上轮取的数乘 <code class="language-katex katex-inline">k</code> 。取完最后一个石子的人获胜。给 <code class="language-katex katex-inline">n,k</code> 判断先手是否有必胜策略，若有求第一次取的个数，若无，输出 “lose”（不包含引号） 。共有 <code class="language-katex katex-inline">T</code> 组数据。</p>
<p><code class="language-katex katex-inline">1 \leq T \leq 10,2 \leq n \leq 10^8,1 \leq k \leq 10^5</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑用 <strong>博弈论</strong> 来解题。</p>
<p>下附 <strong>@alpha1022 的题解</strong>，已获得原作者许可：</p>
<p>考虑 <code class="language-katex katex-inline">k = 1</code> 的情况，必败情况为 <code class="language-katex katex-inline">n = 2^i</code> 。其他情况可以取走最低位的 <code class="language-katex katex-inline">1</code> ，那样对手就没法取掉更高位的 <code class="language-katex katex-inline">1</code> ，所以肯定会被先手取走。</p>
<p>考虑 <code class="language-katex katex-inline">k = 2</code> 的情况，必败情况为 <code class="language-katex katex-inline">n</code> 为初始项为 <code class="language-katex katex-inline">1,2</code> 的斐波那契数列中的项。由于斐波那契数列有一个性质，就是任意正整数都能被分解为不相邻的斐波那契数之和。那么按照原来的思想，不相邻则说明小的乘二也达不到大的，最先取掉的就是分解中的最小项。</p>
<p>考虑 <code class="language-katex katex-inline">k > 2</code> 的情况，沿用以上思想，我们可以考虑构造一个数列 <code class="language-katex katex-inline">a</code>，使得 <code class="language-katex katex-inline">n</code> 可以被分解成 <code class="language-katex katex-inline">a</code> 中不相邻的项且使得分解出来的项中，<code class="language-katex katex-inline">\text{较小项} × k < \text{较大项}</code> （不然就可以被对手取掉）。</p>
<p>同时设 <code class="language-katex katex-inline">b_i</code> 表示 <code class="language-katex katex-inline">a_1</code> ~ <code class="language-katex katex-inline">a_i</code> 可以表示所有 <code class="language-katex katex-inline">1</code> ~ <code class="language-katex katex-inline">b_i</code> 中的数（ <code class="language-katex katex-inline">b_i</code> 最大）。注意根据定义，到 <code class="language-katex katex-inline">b_i</code> 必须用到 <code class="language-katex katex-inline">a_i</code> 。那么首先有 <code class="language-katex katex-inline">a_i = b_{i - 1} + 1</code> （否则找不到 <code class="language-katex katex-inline">(b_{i - 1} + 1)</code> 的其他构造方法）。</p>
<p>问题在于 <code class="language-katex katex-inline">b_i</code> 怎么求。首先 <code class="language-katex katex-inline">b_i = a_i + \text{某个数}</code> ，而根据定义，这个数应该是 <code class="language-katex katex-inline">b_j</code> ，其中 <code class="language-katex katex-inline">j</code> 是使得 <code class="language-katex katex-inline">a_j × k < b_i</code> 的 <strong>最大的</strong> <code class="language-katex katex-inline">j</code> 值。</p>
<p>于是构造出 <code class="language-katex katex-inline">a[]</code> 然后分解 <code class="language-katex katex-inline">n</code> 即可。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
long long a[1000001],b[1000001];
int main()
{
    freopen(&quot;stone10.in&quot;,&quot;r&quot;,stdin);
    long long T=0,dq=0;
    scanf(&quot;%lld&quot;,&amp;T);
    while(T--)
    {
        dq++;
        long long n=0,k=0,l=1;
        scanf(&quot;%lld %lld&quot;,&amp;n,&amp;k);
        a[1]=b[1]=1;
        bool flag=true;
        while(true)
        {
            a[l+1]=b[l]+1;
            l++;
            long long pl=0,pr=l-1;
            while(pl&lt;pr)
            {
                int mid=(pl+pr+1)/2;
                if(a[mid]*k&lt;a[l])
                {
                    pl=mid;
                }
                else
                {
                    pr=mid-1;
                }
            }
            if(pl==0)
            {
                b[l]=a[l];
            }
            else
            {
                b[l]=a[l]+b[pl];
            }
            if(n==a[l])
            {
                flag=false;
                break;
            }
            if(a[l]&gt;n)
            {
                break;
            }
        }
        if(flag==false)
        {
            printf(&quot;Case %lld: lose\n&quot;,dq);
            continue;
        }
        long long ans=0;
        for(long long i=l;i&gt;=1;i--)
        {
            if(n&gt;=a[i])
            {
                n-=a[i];
                ans=a[i];
            }
        }
        printf(&quot;Case %lld: %lld\n&quot;,dq,ans);
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>342</wp:post_id>
		<wp:post_date><![CDATA[2019-08-04 19:08:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-04 11:08:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p3033-%e3%80%90%e7%9f%b3%e5%ad%90%e6%b8%b8%e6%88%8f%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%8d%9a%e5%bc%88%e8%ae%ba"><![CDATA[博弈论]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P1235 【洪水】</title>
		<link>http://106.53.21.5/index.php/2019/08/10/gmoj-p1235-%e3%80%90%e6%b4%aa%e6%b0%b4%e3%80%91/</link>
		<pubDate>Sat, 10 Aug 2019 12:48:28 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=78</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>给你一个 <code class="language-katex katex-inline">n \times m</code> 的地图，一位画家要从点 <code class="language-katex katex-inline">(s_x,s_y)</code> 走到点 <code class="language-katex katex-inline">(e_x,e_y)</code> ，其中有一些点是岩石和洪水。</p>
<p>洪水每一秒会向四周蔓延一格，但是不能够跨过岩石和终点，画家不能够经过洪水同时蔓延到的位置，现在问你从起点到终点最少最多少步，若不可能则输出 “<code><code>KAKTUS</code></code>” 。</p>
<p><code class="language-katex katex-inline">1 \leq n,m \leq 50</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>BFS</strong> 和 <strong>最短路</strong> 来解题。</p>
<p>为了方便表述，我们设 <code class="language-katex katex-inline">dis[i][j]</code> 表示离点 <code class="language-katex katex-inline">(i,j)</code> 最近的一个洪水在 <code class="language-katex katex-inline">dis[i][j]</code> 个单位时间能够到达它，那么显然 <code class="language-katex katex-inline">dis[i][j]</code> 的值就是从最近的一个洪水到这个点的最短路的长度。</p>
<p>然后我们可以把这个抽象为图，跑一遍最短路就可以把 <code class="language-katex katex-inline">dis</code> 数组求出来啦， <strong>题解</strong> 中的 <strong>代码</strong> 用的是 <strong>SPFA</strong> 。</p>
<p>然后跑一遍 <strong>BFS</strong> 即可，以 <code class="language-katex katex-inline">dis</code> 数组为根据判断一个点能不能走即可，即这个点会不会在走到的时候会被水淹没。</p>
<p>用 <strong>SPFA</strong> 跑最短路的话 <strong>最坏时间复杂度</strong> 为 <code class="language-katex katex-inline">O(n^3m^3)</code> ，但是因为跑不满，并且这题的图是特殊图，所以还不一定能卡，所以也是能过的。</p>
<p>用 <strong>Dijkstra</strong> 加上 <strong>堆</strong> 优化的时间复杂度为 <code class="language-katex katex-inline">O(n^2m^2 \log nm)</code> ，可以 A 掉。</p>
<p>具体细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#define N 100000
#define inf 999999999
struct nodea{ int h,v,q; } a[100001];
struct nodeb{ int x,y,c,g; } b[100001];
char ma[1001][1001];
int dx[4]={1,0,-1,0};
int dy[4]={0,1,0,-1};
int dl[100001],f[100001][3];
int dis[1001][1001],hs[100001][2];
int len2=0,len=0,sx=0,sy=0,ex=0,ey=0,n=0,m=0;
int abs(int x)
{
    return x&gt;=0?x:-x;
}
int min(int x,int y)
{
    return x&lt;y?x:y;
}
//int dis(int ax,int ay,int bx,int by)
//{
//  return abs(ax-bx)+abs(ay-by);
//}
int d(int x,int y)
{
    return x*51+y;
}
void ins(int x,int y,int c)
{
    len2++;
    b[len2].x=x;
    b[len2].y=y;
    b[len2].c=c;
    b[len2].g=a[x].h;
    a[x].h=len2;
}
void init()
{
    for(int i=1;i&lt;=n;i++)
    {
        for(int j=1;j&lt;=m;j++)
        {
            a[d(i,j)].v=0;
            a[d(i,j)].q=inf;
        }
    }
}
void spfa(int st)
{
    int tou=1,wei=2;
    dl[tou]=st;
    a[st].q=0;
    a[st].v=1;
    while(tou!=wei)
    {
        int x=dl[tou];
        for(int i=a[x].h;i&gt;0;i=b[i].g)
        {
            int y=b[i].y;
            if(a[x].q+b[i].c&lt;a[y].q)
            {
                a[y].q=a[x].q+b[i].c;
                if(a[y].v==0)
                {
                    a[y].v=1;
                    dl[wei]=y;
                    wei++;
                    if(wei&gt;N)
                    {
                        wei=1;
                    }
                }
            }
        }
        a[x].v=0;
        tou++;
        if(tou&gt;N)
        {
            tou=1;
        }
    }
}
void bfs()
{
    int tou=1,wei=2;
    f[tou][0]=sx;
    f[tou][1]=sy;
    f[tou][2]=0;
    while(tou!=wei)
    {
        int x=f[tou][0],y=f[tou][1],t=f[tou][2];
        if(x==ex &amp;&amp; y==ey)
        {
            printf(&quot;%d&quot;,t);
            exit(0);
        }
        for(int i=0;i&lt;=3;i++)
        {
            int nx=x+dx[i];
            int ny=y+dy[i];
            if(nx&gt;=1 &amp;&amp; nx&lt;=n &amp;&amp; ny&gt;=1 &amp;&amp; ny&lt;=m &amp;&amp; ma[nx][ny]!=&#039;X&#039; &amp;&amp; ma[nx][ny]!=&#039;*&#039;)
            {
                bool flag=true;
                if(nx!=ex || ny!=ey)
                {
                    if(dis[nx][ny]&lt;=t+1)
                    {
                        flag=false;
                        break;
                    }
                }
                if(flag==false)
                {
                    continue;
                }
                ma[nx][ny]=&#039;X&#039;;
                f[wei][0]=nx;
                f[wei][1]=ny;
                f[wei][2]=t+1;
                wei++;
                if(wei&gt;N)
                {
                    wei=1;
                }
            }
        }
        tou++;
        if(tou&gt;N)
        {
            tou=1;
        }
    }
    printf(&quot;KAKTUS&quot;);
    return ;
}
int main()
{
    scanf(&quot;%d %d&quot;,&amp;n,&amp;m);
    for(int i=1;i&lt;=n;i++)
    {
        scanf(&quot;%s&quot;,ma[i]+1);
        for(int j=1;j&lt;=m;j++)
        {
            if(ma[i][j]==&#039;S&#039;)
            {
                sx=i;
                sy=j;
            }
            else if(ma[i][j]==&#039;D&#039;)
            {
                ex=i;
                ey=j;
            }
            else if(ma[i][j]==&#039;*&#039;)
            {
                hs[++len][0]=i;
                hs[len][1]=j;
            }
        }
    }
    for(int i=1;i&lt;=n;i++)
    {
        for(int j=1;j&lt;=m;j++)
        {
            for(int k=0;k&lt;=3;k++)
            {
                int nx=i+dx[k];
                int ny=j+dy[k];
                if(nx&gt;=1 &amp;&amp; nx&lt;=n &amp;&amp; ny&gt;=1 &amp;&amp; ny&lt;=m &amp;&amp; ma[i][j]!=&#039;X&#039; &amp;&amp; ma[nx][ny]!=&#039;X&#039; &amp;&amp; ma[i][j]!=&#039;D&#039; &amp;&amp; ma[nx][ny]!=&#039;D&#039;)
                {
                    ins(d(i,j),d(nx,ny),1);
                }
            }
        }
    }
    memset(dis,127/3,sizeof(dis));
    for(int k=1;k&lt;=len;k++)
    {
        init();
        spfa( d(hs[k][0],hs[k][1]) );
        for(int i=1;i&lt;=n;i++)
        {
            for(int j=1;j&lt;=m;j++)
            {
                dis[i][j]=min(dis[i][j],a[d(i,j)].q);
            }
        }
    }
    bfs();
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 20:48:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 12:48:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p1235-%e3%80%90%e6%b4%aa%e6%b0%b4%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bfs"><![CDATA[BFS]]></category>
		<category domain="category" nicename="%e5%a0%86"><![CDATA[堆]]></category>
		<category domain="category" nicename="%e6%9c%80%e7%9f%ad%e8%b7%af"><![CDATA[最短路]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dwqr_like]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dwqr_like]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dwqr_like]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P1237 【餐桌】</title>
		<link>http://106.53.21.5/index.php/2019/08/11/gmoj-p1237-%e9%a4%90%e6%a1%8c/</link>
		<pubDate>Sun, 11 Aug 2019 06:50:54 +0000</pubDate>
		<dc:creator><![CDATA[lutaiye]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=85</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>给你一个矩阵，每一位若为 <code><code>&#039;X&#039;</code><code> 则表示障碍，而 </code><code>&#039;.&#039;</code></code> 则表示空白。</p>
<p>现在要求你圈出一个空白矩阵，使得它的周长最长，然后输出 周长减 <code class="language-katex katex-inline">1</code> 的值。</p>
<p><code class="language-katex katex-inline">1 \leqslant r, c \leqslant 2 \times 10^3</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>我们可以很轻易地想到 <code class="language-katex katex-inline">O(n^3)</code> 的算法，即暴力，然后我们可以想一想如何优化。</p>
<p>我们可以使用单调栈，感觉单调队列也可以，不过要慢一点。</p>
<p>我们设 <code class="language-katex katex-inline">u_{i,j}</code> 表示从位置 <code class="language-katex katex-inline">(i, j)</code> 往上，最多有几个空格（包括这个位置）。</p>
<p>我们让这个栈存往 <code class="language-katex katex-inline">u</code> 数组，并且使得栈单调递增。</p>
<p>我们再维护一个数组， <code class="language-katex katex-inline">lt[]</code> ，表示在栈中 <code class="language-katex katex-inline">i</code> 位置的值在那一行最多往左延伸到的位置。</p>
<p>那么对于一个单调栈的栈顶的答案就是：</p>
<pre><code class="language-katex">2 \times (r - lt[top] + 1 + stack[top])</code></pre>
<p>其中 <code class="language-katex katex-inline">stack</code> 表示栈， <code class="language-katex katex-inline">top</code> 表示栈顶的位置。</p>
<p>那么对于入栈操作，我们有两种情况：</p>
<p>1、 <code class="language-katex katex-inline">u_{i, j} > stack[top]</code> ，如果遇到这样的情况，就可以直接入栈了。并且， <code class="language-katex katex-inline">lt[top]=j</code> 即它无法向左延伸（因为它是最大的那一个，左边一位就没有向左连续的高度大于等于它的了）。</p>
<p>2、 <code class="language-katex katex-inline">u_{i, j} \leqslant stack[top]</code> ，那么，我们就先算出栈顶的答案，再弹出栈顶。那么对于新的 <code class="language-katex katex-inline">lt</code> 数组， <code class="language-katex katex-inline">lt[top]</code> 就等于最后一个弹出的数的 <code class="language-katex katex-inline">lt</code> ，因为最后一个弹出的数也是大于等于它的，自然就可以延续了。</p>
<p>在遇到一个位置上为 <code><code>&#039;X&#039;</code></code> 时，就直接将栈算答案、清空，然后下一层循环。</p>
<p>而当所有都算完时（即 <code class="language-katex katex-inline">j=1-m</code> 之后），我们的栈还有东西在里面，这是我们也要算答案、清空。</p>
<p>不过，在算答案的时候，你是在弹出的时候算的，而那时往往都是 <code class="language-katex katex-inline">j=r+1</code> 或 <code class="language-katex katex-inline">m+1=r+1</code> ，其中 <code class="language-katex katex-inline">r</code> 为上述的有边界。</p>
<p>时间复杂度 <code class="language-katex katex-inline">O(n^2)</code>。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt; 
#include &lt;cstring&gt;
#define max(a, b) (a&gt;b?a:b)

int n, m, ans = 0;
int stk[2005], top = 0;
int u[2005][2005];
int lt[2005];
char st[2005];

void Empty (int x) {
    while (top) {
        ans = max (ans, 2 * (stk[top] + x - lt[top]));
        lt[top] = 0;
        stk[top--] = 0;
    }
    return;
}

int main () {
    scanf (&quot;%d %d&quot;, &amp;n, &amp;m);
    memset (u, 0, sizeof (u));
    for (int i = 1;i &lt;= n;i++) {
        scanf (&quot;%s&quot;, st + 1);
        for (int j = 1;j &lt;= m;j++) {
            if (st[j] == &#039;X&#039;) u[i][j] = 0;
            else u[i][j] = u[i - 1][j] + 1;
        }
    }
    for (int i = 1;i &lt;= n;i++) {
        memset (lt, 0, sizeof (lt));
        for (int j = 1;j &lt;= m;j++) {
            if (u[i][j] == 0) {
                Empty (j);
                continue;
            }
            int y = 0, last = 0;
            while (top &amp;&amp; stk[top] &gt;= u[i][j]) {
                y = 1;
                ans = max (ans, 2 * (stk[top] + j - lt[top]));
                last = lt[top];
                lt[top] = 0;
                stk[top--] = 0;
            }
            top++;
            if (!y) lt[top] = j;
            else lt[top] = last;
            stk[top] = u[i][j];
        }
        Empty (m + 1);
    }
    printf (&quot;%d&quot;, ans - 1);
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date><![CDATA[2019-08-11 14:50:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-11 06:50:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p1237-%e9%a4%90%e6%a1%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%8d%95%e8%b0%83%e6%a0%88"><![CDATA[单调栈]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P3192 【球】</title>
		<link>http://106.53.21.5/index.php/2019/08/11/103/</link>
		<pubDate>Sun, 11 Aug 2019 03:13:03 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=103</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>给你三个正整数 <code class="language-katex katex-inline">n,a,b</code> ，请你求出：</p>
<pre><code class="language-katex">\sum_{i=1}^{n} | (i\;\mod\;a) - (i\;\mod\;b) |</code></pre>
<p>。</p>
<p>其中 <code class="language-katex katex-inline">1 \leq n \leq 10^9,1 \leq a,b \leq 10^5</code> ，时限为 <code class="language-katex katex-inline">1</code> 秒。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>找规律</strong> 来解题。</p>
<p>通过打表可以发现，对于很多连续的 <code class="language-katex katex-inline">i</code> ， <code class="language-katex katex-inline">| (i\;\mod\;a) - (i\;\mod\;b) |</code> 的值都是一样的，考虑优化。</p>
<p>于是想到定义 <code class="language-katex katex-inline">j,k</code> 且 <code class="language-katex katex-inline">|j-k|</code> 为这一段的每个 <code class="language-katex katex-inline">i</code> 的贡献，并且定义当前算到第 <code class="language-katex katex-inline">i</code> 个数的贡献了。</p>
<p>为了方便，不妨令 <code class="language-katex katex-inline">p=\min(a-j,b-k)</code> 。</p>
<p>那么显然在 <code class="language-katex katex-inline">i</code> 到 <code class="language-katex katex-inline">(i+p-1)</code> 这一段中每个的点的贡献为 <code class="language-katex katex-inline">|j-k|</code> 。</p>
<p>然后将 <code class="language-katex katex-inline">i,j,k</code> 分别加上 <code class="language-katex katex-inline">p</code> 即可。</p>
<p>若 <code class="language-katex katex-inline">j=a</code> ，那么把 <code class="language-katex katex-inline">j</code> 改为  ，因为开始了新的一个周期。</p>
<p><code class="language-katex katex-inline">k</code> 的处理亦同理。</p>
<p>然后发现 <code class="language-katex katex-inline">1\text{ 到 }lcm(a,b)</code> 和 <code class="language-katex katex-inline">lcm(a,b)+1\text{ 到 }2 \times lcm(a,b)</code> 处的贡献都是一样的。然后就可以根据这个再来优化了。</p>
<p>不过数据很水，没有这个优化也能够通过本题。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
long long min(long long x,long long y)
{
    return x&lt;y?x:y;
}
long long gcd(long long x,long long y)
{
    if(y==0)
    {
        return x;
    }
    else
    {
        return gcd(y,x%y);
    }
}
long long lcm(long long x,long long y)
{
    return x*y/gcd(x,y);
}
int main()
{
    long long ans=0,n=0,a=0,b=0,i=0,j=0,k=0;
    scanf(&quot;%lld %lld %lld&quot;,&amp;n,&amp;a,&amp;b);
    if(n&lt;lcm(a,b))
    {
        while(true)
        {
            long long p=min(a-j,b-k);
            if(i+p&gt;n)
            {
                printf(&quot;%lld&quot;,ans+(n-i)*abs(j-k));
                break;
            }
            ans+=p*abs(j-k);
            i+=p,j+=p,k+=p;
            j%=a,k%=b;
        }
    }
    else
    {
        long long Ans=0;
        long long n2=n%lcm(a,b);
        while(true)
        {
            long long p=min(a-j,b-k);
            if(i+p&gt;n2)
            {
                Ans=ans+(n2-i)*abs(j-k);
                break;
            }
            ans+=p*abs(j-k);
            i+=p,j+=p,k+=p;
            j%=a,k%=b;
        }

        ans=0,i=0,j=0,k=0;
        while(true)
        {
            long long p=min(a-j,b-k);
            if(i+p&gt;(lcm(a,b)))
            {
                Ans+=(n/lcm(a,b))*(ans+(n-i)*abs(j-k));
                break;
            }
            ans+=p*abs(j-k);
            i+=p,j+=p,k+=p;
            j%=a,k%=b;
        }
        printf(&quot;%lld&quot;,Ans);
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date><![CDATA[2019-08-11 11:13:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-11 03:13:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[103]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%89%be%e8%a7%84%e5%be%8b"><![CDATA[找规律]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P1116 【TOY】</title>
		<link>http://106.53.21.5/index.php/2019/08/05/187/</link>
		<pubDate>Sun, 04 Aug 2019 23:50:37 +0000</pubDate>
		<dc:creator><![CDATA[lutaiye]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=187</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>给你 <code class="language-katex katex-inline">n</code> 个物品，第 <code class="language-katex katex-inline">i</code> 个物品的长度为 <code class="language-katex katex-inline">C_i</code> ，现在要将它们所有都放入容器内，而一个容器内两两的玩具都有一个长度为一的填充物。</p>
<p>所以，将 <code class="language-katex katex-inline">i</code> 到 <code class="language-katex katex-inline">j</code> 放入一个容器内的长度为:</p>
<pre><code class="language-katex">\text{x}=j-i+\sum_{k=i}^{j}C_k</code></pre>
<p>而一个容器的代价为 <code class="language-katex katex-inline">(\text{x}-L)^2</code> ，规定物品的次序不能改变。</p>
<p>问你最小代价是多少。</p>
<p><code class="language-katex katex-inline">1 \leq n \leq 50000,1 \leq L,C_i \leq 10^7</code></p>
<!--more-->
<h2>Solution</h2>
<ul>
<li><strong>由于部分式子过长，为了优化您的阅读体验，在式子的下面有含义相同的代码。</strong></li>
</ul>
<p>考虑使用 <strong>DP</strong> 来解题。</p>
<p>这其实是一道斜率优化的裸题，今天听的不太懂，后来又去网上学习了一下，才搞明白是什么东西。</p>
<p>首先， <code class="language-katex katex-inline">n^2</code> 的算法很简单。</p>
<p>设 <code class="language-katex katex-inline">f[i]</code> 表示放好前 <code class="language-katex katex-inline">i</code> 个玩具的最小费用。</p>
<p>可以容易得出转移方程：</p>
<pre><code class="language-katex">f[i] = \min (f[i], f[j] + (i - j - 1 + s[i] - s[j] - l)^2)</code></pre>
<p>伪代码：</p>
<pre><code>for i : 1 ~ n
    for j : 0 ~ i-1
        f[i] = min (f[i], f[j] + sqr(i - j - 1 + s[i] - s[j] - l));</code></pre>
<p>上面代表的是假设 <code class="language-katex katex-inline">(j+1)</code> ~ <code class="language-katex katex-inline">i</code> 是一组，更新的最优解。</p>
<p>嗯，不过，<code class="language-katex katex-inline">1 \leq n \leq 50000</code> ，并且，在 GMOJ 上的数据只有一个可以放 <code class="language-katex katex-inline">O(n^2)</code> 的算法过去，还要开 <code class="language-katex katex-inline">\text{long long}</code> ......</p>
<p>所以，我们要用到————斜率优化！</p>
<p>我们可以发现最后导致结果的点是随着 <code class="language-katex katex-inline">i</code> 的递增而递增的。（我也不知道为什么，我会好好想想的）。</p>
<p>然后我们让每一个 <code class="language-katex katex-inline">s[i]=s[i]+i，l=l+1</code> 。
则可以化简为：</p>
<pre><code class="language-katex">f[j]+(s[i]-s[j]-l)^2</code></pre>
<pre><code>f[j]+sqr(s[i]-s[j]-l)</code></pre>
<p>很好，那么我们想一想当 <code class="language-katex katex-inline">j</code> 比 <code class="language-katex katex-inline">k</code> 优是什么情况。（ <code class="language-katex katex-inline">k \leq j</code> ）
则：</p>
<pre><code class="language-katex">f[j]+(s[i]-s[j]-l)^2 &gt; f[k]+(s[i]-s[k]-l)^2</code></pre>
<pre><code>f[j]+sqr(s[i]-s[j]-l) &gt; f[k]+sqr(s[i]-s[k]-l)</code></pre>
<p>去括号得：</p>
<pre><code class="language-katex">f[j]+s[i]^2+s[j]^2-2s[i]s[j]+l^2-2l \times s[i]+2l \times s[j] \\ &lt; f[k]+s[i]^2+s[k]^2-2s[i]s[k]+l^2-2l \times s[i]+2l \times s[k]</code></pre>
<pre><code>f[j]+sqr(s[i])+sqr(s[j])-2*s[i]*s[j]+sqr(l)-2*l*s[i]+2*l*s[j] &lt; f[k]+sqr(s[i])+sqr(s[k])-2*s[i]*s[k]+sqr(l)-2*l*s[i]+2*l*s[k]</code></pre>
<p>化简得：</p>
<pre><code class="language-katex">f[j]+s[j]^2-2s[i]s[j]+2 \times l \times s[j] \\ &lt; f[k]+s[k]^2-2s[i]s[k]+2 \times l \times s[k]</code></pre>
<pre><code>f[j]+sqr(s[j])-2*s[i]*s[j]+2*l*s[j] &lt; f[k]+sqr(s[k])-2*s[i]*s[k]+2*l*s[k]</code></pre>
<p>再移项、合并同类项得：</p>
<pre><code class="language-katex">f[j]-f[k]+s[j]^2-s[k]^2 &lt; 2 \times s[i] \times (s[j]-s[k]) - 2 \times l \times (s[j]-s[k])</code></pre>
<pre><code>f[j]-f[k]+sqr(s[j])-sqr(s[k]) &lt; 2*s[i]*(s[j]-s[k])-2*l*(s[j]-s[k])</code></pre>
<p>两边同时除以 <code class="language-katex katex-inline">(s[j]-s[k])</code> 得：</p>
<pre><code class="language-katex">\dfrac{(f[j]-f[k]+s[j]^2)-s[k]^2}{s[j]-s[k]} &lt; 2s[i]-2l</code></pre>
<pre><code>(f[j]-f[k]+sqr(s[j])-sqr(s[k]))/(s[j]-s[k])&lt; 2*s[i]-2*l</code></pre>
<p>设 <code class="language-katex katex-inline">v[i]=f[i]+s[i]^2</code> ：</p>
<pre><code class="language-katex">\dfrac{v[j]-v[k]}{s[j]-s[k]} &lt; 2s[i]-2l</code></pre>
<pre><code>(v[j]-v[k])/(s[j]-s[k]) &lt; 2*s[i]-2*l</code></pre>
<p>很好，不过，既然知道斜率优化是要使用单调队列，那么，判断一个点是否从末尾出局要怎么做呢？</p>
<p>既然叫斜率优化，那么就肯定是与平面直角坐标系有关的，我们可以以 <code class="language-katex katex-inline">s</code> 为横坐标， <code class="language-katex katex-inline">v</code> 为纵坐标。</p>
<p>设 <code class="language-katex katex-inline">A,B,C</code> 三点（ <code class="language-katex katex-inline">A < B < C</code> ），将它们以上述条件画在坐标系内。
当 <code class="language-katex katex-inline">B</code> 在 <strong>直线AC</strong>  的 <strong>上方</strong> 时，这是一个 <strong>上凸的凸包</strong> ，由图得：</p>
<pre><code class="language-katex">\dfrac{v[B]-v[A]}{s[B]-s[A]} &gt; \dfrac{v[C]-v[B]}{s[C]-s[B]}</code></pre>
<pre><code>(v[B]-v[A])/(s[B]-s[A]) &gt; (v[C]-v[B])/(s[C]-s[B])</code></pre>
<p>那么，现在对于：</p>
<pre><code class="language-katex">2s[i]-2l</code></pre>
<pre><code>2*s[i]-2*l</code></pre>
<p>有三种情况：</p>
<p>第一种（ B 比 C 优， A 比 B 优）：</p>
<pre><code class="language-katex">\dfrac{v[B]-v[A]}{s[B]-s[A]} &gt; \dfrac{v[C]-v[B]}{s[C]-s[B]} &gt; 2s[i]-2l</code></pre>
<pre><code>(v[B]-v[A])/(s[B]-s[A]) &gt; (v[C]-v[B])/(s[C]-s[B]) &gt; 2*s[i]-2*l</code></pre>
<p>第二种（ C 比 B 优， A 比 B 优）：</p>
<pre><code class="language-katex">\dfrac{v[B]-v[A]}{s[B]-s[A]} &gt; 2s[i]-2l &gt; \dfrac{v[C]-v[B]}{s[C]-s[B]}</code></pre>
<pre><code>(v[B]-v[A])/(s[B]-s[A]) &gt; 2*s[i]-2*l &gt; (v[C]-v[B])/(s[C]-s[B])</code></pre>
<p>第三种（ B 比 A 优， C 比 B 优）：</p>
<pre><code class="language-katex">2s[i]-2l &gt; \dfrac{v[B]-v[A]}{s[B]-s[A]} &gt; \dfrac{v[C]-v[B]}{s[C]-s[B]}</code></pre>
<pre><code>2*s[i]-2*l &gt; (v[B]-v[A])/(s[C]-s[A]) &gt; (v[C]-v[B])/(s[C]-s[B])</code></pre>
<p>可以发现，无论如何，b都不会时最优的，那么，可以证明我们在这道题目要维护一个下凸的凸包。</p>
<p>而判断的条件其实就是从图中得出的条件（就是上面的那一条啦~）：</p>
<pre><code class="language-katex">\dfrac{v[B]-v[A]}{s[B]-s[A]} &gt; \dfrac{v[C]-v[B]}{s[C]-s[B]}</code></pre>
<pre><code>(v[b]-v[a])/(s[b]-s[a]) &gt; (v[c]-v[b])/(s[c]-s[b])</code></pre>
<p>时间复杂度 <code class="language-katex katex-inline">O(n)</code> ,具体细节详见 <strong>代码</strong> 。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#define sqr(x) ((x)*(x))
#define min(a, b) ((a)&lt;(b)?(a):(b))
#define ll long long

ll n, l;
ll a[50005];
ll s[50005];
ll f[50005];
ll v[50005];
ll q[50005], head = 1, tail = 3;

double slo (ll k, ll j) {
    return (v[j] - v[k]) * 1.0 / (s[j] - s[k]);
}

int main () {
    scanf (&quot;%lld %lld&quot;, &amp;n, &amp;l);
    s[0] = 0;
    l++;
    for (ll i = 1;i &lt;= n;i++) {
        scanf (&quot;%lld&quot;, &amp;a[i]);
        s[i] = s[i - 1] + a[i];
    }
    for (ll i = 1;i &lt;= n;i++) {
        s[i] += i;
    }
    memset (f, 0x3f3f3f3f, sizeof (f));
    memset (q, 0, sizeof (q));
    f[0] = 0;
    f[1] = sqr (s[1] - l);
    v[1] = f[1] + sqr (s[1]);
    q[1] = 0;
    q[2] = 1;
    for (ll i = 2;i &lt;= n;i++) {
        while (head &lt; tail - 1 &amp;&amp; slo (q[head], q[head + 1]) &lt;= double (2 * s[i] - 2 * l)) {
            q[head++] = 0;
        }
        f[i] = f[q[head]] + sqr(s[i] - s[q[head]] - l);
        v[i] = f[i] + sqr (s[i]);
        while (head &lt; tail - 1 &amp;&amp; slo (q[tail - 2], q[tail - 1]) &gt;= slo (q[tail - 1], i)) {
            q[tail - 1] = 0;
            tail--;
        }
        q[tail] = i;
        tail++;
    }
    printf (&quot;%lld&quot;, f[n]);
    return 0;
}</code></pre>
<p>蒟蒻写题解，若有错误，敬请回复。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>187</wp:post_id>
		<wp:post_date><![CDATA[2019-08-05 07:50:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-04 23:50:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[187]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dp"><![CDATA[DP]]></category>
		<category domain="category" nicename="%e6%96%9c%e7%8e%87%e4%bc%98%e5%8c%96"><![CDATA[斜率优化]]></category>
		<category domain="post_tag" nicename="%e6%96%9c%e7%8e%87%e4%bc%98%e5%8c%96"><![CDATA[斜率优化]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P1434 【灌水】</title>
		<link>http://106.53.21.5/index.php/2019/08/11/gmoj-p1434-%e3%80%90%e7%81%8c%e6%b0%b4%e3%80%91/</link>
		<pubDate>Sun, 11 Aug 2019 12:58:58 +0000</pubDate>
		<dc:creator><![CDATA[lutaiye]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=192</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>有 <code class="language-katex katex-inline">n</code> 个人，他们的编号为 <code class="language-katex katex-inline">1</code> ~ <code class="language-katex katex-inline">n</code> ，有些人是朋友，他们会互相灌水。</p>
<p>他们按照以下规则灌水：
1、如果 <strong>前一天</strong> 被灌了奇数次的水，他们将会给每个朋友灌一次水；
2、如果 <strong>前一天</strong> 被灌了偶数次的水，他们将会给每个朋友灌两次水。</p>
<p>第一天只有 <code class="language-katex katex-inline">1</code> 号灌水，他会给他的每个朋友灌一次水。</p>
<p>问 <code class="language-katex katex-inline">h</code> 天后一共灌了多少次水。</p>
<p><code class="language-katex katex-inline">1 \leq n \leq 20,1 \leq h \leq 10^9</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>找规律</strong> 来解题。</p>
<p>我们可以看到， <code class="language-katex katex-inline">h</code> 是一个很大的数，直接模拟的时间复杂度是很显然是 <code class="language-katex katex-inline">O(n^2h)</code> 的，过是不可能过的。</p>
<p>于是，我们应该想到如何优化。</p>
<p>我们看向 <code class="language-katex katex-inline">n \leq 20</code> ，嗯，这么小，肯定就是在这入手啦。</p>
<p>然后，想到以前我做过的一道题目，发现这道题目也是可以找周期然后搞过去。</p>
<p>我们可以以所有人在前一天是被灌偶数次还是奇数次为周期，如果遇到相同的情况，那么下一天的情况也是与上一次相同情况的下一天相同的。</p>
<p>简单点说，比如第 <code class="language-katex katex-inline">4</code> 天与第 <code class="language-katex katex-inline">10</code> 天的情况突然相同了，那么第 <code class="language-katex katex-inline">5</code> 天与第 <code class="language-katex katex-inline">11</code> 天的情况也必然相同，这个很容易看出来。</p>
<p>那么这个周期会不会很长呢？不可能的。</p>
<p>因为 <code>$$1 \leq n \leq 20$$ ，所以最多情况数为 </code>$$2 ^ {20}=‭1048576$$` 嗯，是不是很完美？</p>
<p>不过时间复杂度 <code class="language-katex katex-inline">O(2^nn^2)≈ 419430400‬</code> 但是很难卡，于是就过了。</p>
<p><strong>P.S.</strong> :我们假设第 <code class="language-katex katex-inline">x</code> 天的情况与第 <code class="language-katex katex-inline">y</code> 天的情况相同（ <code class="language-katex katex-inline">x < y</code> ），则我们的周期为 <code class="language-katex katex-inline">(x+1)</code> 到 <code class="language-katex katex-inline">y</code> 而并非 <code class="language-katex katex-inline">x</code> 到 <code class="language-katex katex-inline">(y-1)</code> 。因为 <code class="language-katex katex-inline">(x-1)</code> 的情况与 <code class="language-katex katex-inline">(y-1)</code> 的不一定相同，所以可能造成答案的差异，由于 <code class="language-katex katex-inline">(y-1)</code> 才是计入答案的，所以不能用 <code class="language-katex katex-inline">x</code> 到 <code class="language-katex katex-inline">(y-1)</code> 的区间的答案解决问题。</p>
<p>很好问题就这样解决了。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#define two(k) (1&lt;&lt;(k))
#define ll long long

ll n, h;
char s[25];
ll F[25][25];
ll vis[two(20) + 5];
ll ans[two(20) + 5];
ll water1 = 0, water2 = 0;
ll b[1005], bl = 0;

void out(ll x) {
    memset (b, 0, sizeof (b));
    while (x) {
        b[++bl] = x % 2;
        x &gt;&gt;= 1;
    }
    for (int i = 1;i &lt;= n;i++) {
        printf (&quot;%lld&quot;, b[i]);
    }
    return;
}

int main () {
    memset (F, 0, sizeof (F));
    scanf (&quot;%lld %lld&quot;, &amp;n, &amp;h);
    for (ll i = 1;i &lt;= n;i++) {
        scanf (&quot;%s&quot;, s + 1);
        for (ll j = 1;j &lt;= n;j++) {
            F[i][j] = s[j] - &#039;0&#039;;
        }
    }
    memset (vis, 0, sizeof (vis));
    for (ll i = 1;i &lt;= n;i++) {
        if (!F[1][i]) continue;
        ans[1]++;
        water1 |= two(i - 1);
    }
    vis[water1] = 1;
    for (ll DDD = 2;DDD &lt;= h;DDD++) {
        for (ll i = 1;i &lt;= n;i++) {
            ll w = water1&amp;two(i - 1);
            for (ll j = 1;j &lt;= n;j++) {
                if (!F[i][j]) continue;
                if (w) {
                    ans[DDD]++;
                    if (water2&amp;two(j - 1)) water2 -= two(j - 1);
                    else water2 += two(j - 1);
                }
                else {
                    ans[DDD] += 2;
                }
            }
        }
        ans[DDD] += ans[DDD - 1];
        if (vis[water2]) {
            water1 = DDD;
            break;
        }
        vis[water2] = DDD;
        water1 = water2;
        water2 = 0;
    }
    ll Ans = 0;
    if (water1 &lt; h) {
        ll st = vis[water2] + 1, ed = water1;
        ll q = ans[ed] - ans[st - 1];
        Ans += ans[st - 1];
        ll tot = h - st + 1;
        if (tot % (ed - st + 1) == 0) {
            Ans += tot / (ed - st + 1) * q;
        }
        else {
            Ans += tot / (ed - st + 1) * q;
            ll y = tot % (ed - st + 1);
            Ans += ans[st + y - 1] - ans[st - 1];
        }
        printf (&quot;%lld&quot;, Ans);
    }
    else {
        printf (&quot;%lld&quot;, ans[h]);
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>192</wp:post_id>
		<wp:post_date><![CDATA[2019-08-11 20:58:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-11 12:58:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p1434-%e3%80%90%e7%81%8c%e6%b0%b4%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%89%be%e8%a7%84%e5%be%8b"><![CDATA[找规律]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P1011 【Zoo】</title>
		<link>http://106.53.21.5/index.php/2019/08/11/gmoj-p1011-%e3%80%90zoo%e3%80%91/</link>
		<pubDate>Sun, 11 Aug 2019 13:28:54 +0000</pubDate>
		<dc:creator><![CDATA[sun*]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=195</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>给出 <code class="language-katex katex-inline">n</code> 个数字，然后 <code class="language-katex katex-inline">q</code> 个询问，每次求 <code class="language-katex katex-inline">[l,r]</code> 内的第 <code class="language-katex katex-inline">k</code> 大的数的值。</p>
<p>数据保证：<code class="language-katex katex-inline">O(nq)</code> 过不了。</p>
<p>一般情况下： <code class="language-katex katex-inline">1 \leq n,q \leq 10^5</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>作者： <code class="language-katex katex-inline">\text{sun*}</code> 。</p>
<p>修订： <code class="language-katex katex-inline">\text{zhongzijun}</code> 。</p>
<p>保证 <code class="language-katex katex-inline">O(nq)</code> 不能过……</p>
<p>暴力我们不考虑，这个很明显的了。</p>
<p><del><strong>平衡树</strong> 加上 <strong>线段树</strong> ，调的时候你会感受到前所未有的快感</del> 。</p>
<p><img src="https://i.loli.net/2019/08/12/def34wHJzBSEQI7.png" alt="" /></p>
<p>于是，我们就引出了一种新的数据结构： <strong>静态主席树</strong> 。</p>
<p>众所周知， <strong>主席树</strong> 是 <strong>权值线段树</strong> ，所以我们的查找方式就类似于 <strong>二叉查找树</strong> 一样， <del>不会的你可以把你的鼠标移至右上角然后戳一下了</del> 。假设在无限制的情况下， <del>我们可以打暴力</del> ，我们可以构建 <code class="language-katex katex-inline">n</code> 棵线段树来求解，每棵线段树包含前面所有的节点；然后用第 <code class="language-katex katex-inline">r</code> 棵线段树减去第 <code class="language-katex katex-inline">(l-1)</code> 棵线段树。但很明显不允许，这样时间和空间的复杂度都是 <code class="language-katex katex-inline">O(nq)</code> 的。</p>
<p>如图（建n棵）：<img src="https://i.loli.net/2019/08/12/s2tydlO3GmfiFHJ.png" alt="" /></p>
<p>我们考虑优化这个方法。假设我们新加入的节点权值为 3 ，此时我们查找到区间 <code class="language-katex katex-inline">[1,4]</code> 这个。如果我们分别 <strong>DFS</strong> 下去这个时间复杂度很明显是<code class="language-katex katex-inline">O(2n)</code>，这是完全不能接受的。</p>
<p><code class="language-katex katex-inline">left[i]</code> 表示的是编号为 <code class="language-katex katex-inline">i</code> 的点的左儿子的编号。</p>
<p>为了方便表述，下文将用 <code class="language-katex katex-inline">x</code> 表示我们当前要建的这棵树中的某个节点，并用 <code class="language-katex katex-inline">x1</code> 表示上个树中的同位置的节点。</p>
<p>但是研究一下可以发现，我们只要递归区间 <code class="language-katex katex-inline">[3,4]</code> 就可以了。而区间 <code class="language-katex katex-inline">[1,2]</code> 这一个我们不用更新，所以我们可以“借用”上一棵树的这部分，我们只需把 <code class="language-katex katex-inline">left[x]</code> 赋为 <code class="language-katex katex-inline">left[x1]</code> 就行了。然后如此操作，我们每次新建一棵树的时间复杂度就变成了 <code class="language-katex katex-inline">O(\log n)</code> ， <del>这就很快乐了</del> 。</p>
<p>建法如图：<img src="https://i.loli.net/2019/08/12/46dX3ypwHYGaZnE.png" alt="" /></p>
<p>简单来说，就是我们新建的节点只要从根到当前我们要加入的节点就行了，所以只有<code class="language-katex katex-inline">\log n</code>个。然后我们就可以简单粗暴地跑了，无论是建新的树或是查询，单次询问的复杂度都是 <code class="language-katex katex-inline">O(\log n)</code> 。</p>
<p><del>记得要离散化啊亲。</del></p>
<h2>Code</h2>
<pre><code>#include&lt;cstdio&gt;
using namespace std;
int n,tr[2000010],a1[150010],bz[150010],ff[150010];
int m,son[2000010][3],tot,root[2000010],a[200010];
void kp(int l,int r)
{
    int i=l,j=r,mid=a1[l+r&gt;&gt;1];
    while(i&lt;j)
    {
        while(a1[i]&lt;mid)i++;
        while(a1[j]&gt;mid)j--;
        if(i&lt;=j)
        {
            a1[0]=a1[i];a1[i]=a1[j];a1[j]=a1[0];
            bz[0]=bz[i];bz[i]=bz[j];bz[j]=bz[0];
            i++;j--;
        }
    } 
    if(i&lt;r)kp(i,r);if(j&gt;l)kp(l,j);
}
void change(int v,int l,int r,int k,int k1)
{
    tr[k]=tr[k1]+1; 
    if(l==r)return;
    int mid=l+r&gt;&gt;1;
    if(mid&gt;=v)
    {
        son[k][2]=son[k1][2];
        son[k][1]=++tot;
        change(v,l,mid,son[k][1],son[k1][1]);
    }else{
        son[k][1]=son[k1][1];
        son[k][2]=++tot;
        change(v,mid+1,r,son[k][2],son[k1][2]);
    }
}
int query(int x,int x1,int y1,int l,int r)
{
    if(l==r)return l;
    int mid=l+r&gt;&gt;1;
    int ll=tr[son[x1][1]]-tr[son[y1][1]];
    if(x&lt;=ll)query(x,son[x1][1],son[y1][1],l,mid);
    else query(x-ll,son[x1][2],son[y1][2],mid+1,r);
}
int main()
{
    freopen(&quot;zoo.in&quot;,&quot;r&quot;,stdin);
    freopen(&quot;zoo.out&quot;,&quot;w&quot;,stdout);
    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
    for(int i=1;i&lt;=n;i++){scanf(&quot;%d&quot;,&amp;a1[i]);bz[i]=i;}
    kp(1,n);int tot1;
    for(int i=1;i&lt;=n;i++)
    {
        a[bz[i]]=++tot1;
        ff[tot1]=a1[i];
        if(a1[i]==a1[i+1])tot1--;
    }
    for(int i=1;i&lt;=n;i++)
    {
        root[i]=++tot;
        change(a[i],1,tot1,root[i],root[i-1]);
    }
    while(m--)
    {
        int l1,r1,k1;
        scanf(&quot;%d%d%d&quot;,&amp;l1,&amp;r1,&amp;k1);
        printf(&quot;%d\n&quot;,ff[query(k1,root[r1],root[l1-1],1,tot1)]);
    }
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>195</wp:post_id>
		<wp:post_date><![CDATA[2019-08-11 21:28:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-11 13:28:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p1011-%e3%80%90zoo%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e4%b8%bb%e5%b8%ad%e6%a0%91"><![CDATA[主席树]]></category>
		<category domain="category" nicename="%e7%ba%bf%e6%ae%b5%e6%a0%91"><![CDATA[线段树]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e6%9f%90%e6%a0%91]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dwqr_like]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[zhongzijun]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[1174973100@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://106.53.21.5</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[61.142.103.98]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-12 07:26:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-11 23:26:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[儿子好！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[trash]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
				<wp:meta_value><![CDATA[1565565982]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[郑, 岱维]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[3484213118@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[61.142.103.98]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-12 21:55:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-12 13:55:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[建议写一篇能维护历史版本的主席树。
如：询问第k次修改下的区间【L,R】的和。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>4</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>16</wp:comment_id>
			<wp:comment_author><![CDATA[weizexin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[2564092179@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://106.53.21.5</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[61.142.103.98]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-12 22:07:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-12 14:07:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[您好，您提的建议很有代表性，我们会尽快更新的！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[trash]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>15</wp:comment_parent>
			<wp:comment_user_id>3</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
				<wp:meta_value><![CDATA[1565651938]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[zhongzijun]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[1174973100@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://106.53.21.5</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[61.142.103.98]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-13 07:21:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-12 23:21:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[维护历史版本体现在每次查询 [l,r] 中的第 k 大时，找到先前只含有 [l,r] 的线段树，然后求出答案。

Orz sc!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>15</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>18</wp:comment_id>
			<wp:comment_author><![CDATA[sun*]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[1260779759@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[61.142.103.98]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-13 11:27:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-13 03:27:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[如果你要询问k次修改下的区间【L,R】的和，你为什么不打线段树呢……]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>11</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>GMOJ P1432【输油管道】</title>
		<link>http://106.53.21.5/index.php/2019/08/07/gmoj-p1432%e3%80%90%e8%be%93%e6%b2%b9%e7%ae%a1%e9%81%93%e3%80%91/</link>
		<pubDate>Tue, 06 Aug 2019 23:34:38 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=264</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>在一个 <code class="language-katex katex-inline">n \times m</code> 的图上，有一条从M到Z的管道，管道分类如下：</p>
<p><img src="https://i.loli.net/2019/08/07/m23vY5fLZtUWehb.jpg" alt="管道图" /></p>
<p>‘+’型管道比较特殊，可以垂直和水平传输。如下图所示：</p>
<p><img src="http://106.53.21.5/wp-content/uploads/2019/08/管道图2-150x144-150x144-1.jpg" alt="管道图2" /></p>
<p>现在这段管道有一个单元格的管道失踪了，请找出缺失管道的位置和它的类型。</p>
<p>题目保证只有一条管道与M和Z相连，图上的所有管道都会被用上，保证答案唯一。</p>
<p><code class="language-katex katex-inline">1\leq n,m\leq 25</code> 。</p>
<!--more-->
<h2>Solution</h2>
<ul>
<li><strong>方法一</strong></li>
</ul>
<p>考虑使用 <strong>DFS</strong> 来解题。</p>
<p>由于数据小，直接从 <code class="language-katex katex-inline">\text{M}</code> 点出发，然后沿着管道走，走到一个没有管道位置就是答案位置，管道类型判断即可。</p>
<p>时间复杂度 <code class="language-katex katex-inline">O(nm)</code> ，具体细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题就解完了。</p>
<ul>
<li><strong>方法二</strong></li>
</ul>
<p>考虑使用 <strong>模拟</strong> 来解题。</p>
<p>用二进制表示出一个管道能否向 上/下/左/右 走，因此对于一个点 <code class="language-katex katex-inline">(x,y)</code> ，可以求出与它相邻的点，从而求出这个点要放的管道要满足什么要求。</p>
<p><code class="language-katex katex-inline">\text{M}</code> 和 <code class="language-katex katex-inline">\text{Z}</code> 当做 ‘<code><code>+</code></code>’ 号看。</p>
<p>然后还要判断一种情况，读者可以先想想，代码中有。</p>
<p>时间复杂度 <code class="language-katex katex-inline">O(nm)</code> ，具体细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<ul>
<li><strong>方法一代码</strong></li>
</ul>
<pre><code>#include&lt;cmath&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;
int n,m,ma[27][27],sx,sy;
char s[27][27];
void pd(int nx,int ny)
{
    if(ma[nx][ny-1]!=6&amp;&amp;ma[nx][ny-1]!=7&amp;&amp;ma[nx][ny-1]!=1&amp;&amp;ma[nx][ny-1]!=2&amp;&amp;ma[nx][ny+1]!=6&amp;&amp;ma[nx][ny+1]!=7&amp;&amp;ma[nx][ny+1]!=3&amp;&amp;ma[nx][ny+1]!=4)
        printf(&quot;|&quot;);
    else if(ma[nx-1][ny]!=5&amp;&amp;ma[nx-1][ny]!=7&amp;&amp;ma[nx-1][ny]!=1&amp;&amp;ma[nx-1][ny]!=4&amp;&amp;ma[nx+1][ny]!=5&amp;&amp;ma[nx+1][ny]!=7&amp;&amp;ma[nx+1][ny]!=2&amp;&amp;ma[nx+1][ny]!=3)
        printf(&quot;-&quot;);
    else if(ma[nx-1][ny]!=5&amp;&amp;ma[nx-1][ny]!=7&amp;&amp;ma[nx-1][ny]!=1&amp;&amp;ma[nx-1][ny]!=4&amp;&amp;ma[nx][ny-1]!=6&amp;&amp;ma[nx][ny-1]!=7&amp;&amp;ma[nx][ny-1]!=1&amp;&amp;ma[nx][ny-1]!=2)
        printf(&quot;1&quot;);
    else if(ma[nx][ny-1]!=6&amp;&amp;ma[nx][ny-1]!=7&amp;&amp;ma[nx][ny-1]!=1&amp;&amp;ma[nx][ny-1]!=2&amp;&amp;ma[nx+1][ny]!=5&amp;&amp;ma[nx+1][ny]!=7&amp;&amp;ma[nx+1][ny]!=2&amp;&amp;ma[nx+1][ny]!=3)
        printf(&quot;2&quot;);
    else if(ma[nx+1][ny]!=5&amp;&amp;ma[nx+1][ny]!=7&amp;&amp;ma[nx+1][ny]!=2&amp;&amp;ma[nx+1][ny]!=3&amp;&amp;ma[nx][ny+1]!=6&amp;&amp;ma[nx][ny+1]!=7&amp;&amp;ma[nx][ny+1]!=3&amp;&amp;ma[nx][ny+1]!=4)
        printf(&quot;3&quot;);
    else if(ma[nx-1][ny]!=5&amp;&amp;ma[nx-1][ny]!=7&amp;&amp;ma[nx-1][ny]!=1&amp;&amp;ma[nx-1][ny]!=4&amp;&amp;ma[nx][ny+1]!=6&amp;&amp;ma[nx][ny+1]!=7&amp;&amp;ma[nx][ny+1]!=3&amp;&amp;ma[nx][ny+1]!=4)
        printf(&quot;4&quot;);
    else
        printf(&quot;+&quot;);
}
void dfs(int nx,int ny,int tou)
{
    if(ma[nx][ny]==-1)
        return;
    else if(ma[nx][ny]==1)
        if(tou==1)
            dfs(nx,ny+1,4);
        else
            dfs(nx+1,ny,2);
    else if(ma[nx][ny]==2)
        if(tou==2)
            dfs(nx,ny+1,4);
        else
            dfs(nx-1,ny,1);
    else if(ma[nx][ny]==3)
        if(tou==2)
            dfs(nx,ny-1,3);
        else
            dfs(nx-1,ny,1);
    else if(ma[nx][ny]==4)
        if(tou==1)
            dfs(nx,ny-1,3);
        else
            dfs(nx+1,ny,2);
    else if(ma[nx][ny]==5)
        if(tou==1)
            dfs(nx-1,ny,1);
        else
            dfs(nx+1,ny,2);
    else if(ma[nx][ny]==6)
        if(tou==3)
            dfs(nx,ny-1,3);
        else
            dfs(nx,ny+1,4);
    else if(ma[nx][ny]==7)
        if(tou==1)
            dfs(nx-1,ny,1);
        else if(tou==2)
            dfs(nx+1,ny,2);
        else if(tou==3)
            dfs(nx,ny-1,3);
        else
            dfs(nx,ny+1,4);
    else if(ma[nx][ny]==0)
    {
        printf(&quot;%d %d &quot;,nx,ny);
        pd(nx,ny);
        return;
    }
}
int main()
{
    scanf(&quot;%d%d\n&quot;,&amp;n,&amp;m);
    for(int i=1;i&lt;=n;i++)
    {
        scanf(&quot;%s&quot;,s[i]+1);
        for(int j=1;j&lt;=m;j++)
        {
            if(s[i][j]==&#039;|&#039;)
                ma[i][j]=5;
            else if(s[i][j]==&#039;-&#039;)
                ma[i][j]=6;
            else if(s[i][j]==&#039;+&#039;)
                ma[i][j]=7;
            else if(s[i][j]==&#039;1&#039;)
                ma[i][j]=1;
            else if(s[i][j]==&#039;2&#039;)
                ma[i][j]=2;
            else if(s[i][j]==&#039;3&#039;)
                ma[i][j]=3;
            else if(s[i][j]==&#039;4&#039;)
                ma[i][j]=4;
            else if(s[i][j]==&#039;M&#039;)
                ma[i][j]=-1,sx=i,sy=j;
            else if(s[i][j]==&#039;Z&#039;)
                ma[i][j]=-1;
        }
    }
    if(ma[sx-1][sy]==5||ma[sx-1][sy]==1||ma[sx-1][sy]==4||ma[sx-1][sy]==7)
    {
        dfs(sx-1,sy,1);
    }
    else if(ma[sx+1][sy]==5||ma[sx+1][sy]==2||ma[sx+1][sy]==3||ma[sx+1][sy]==7)
    {
        dfs(sx+1,sy,2);
    }
    else if(ma[sx][sy-1]==6||ma[sx][sy-1]==1||ma[sx][sy-1]==2||ma[sx][sy-1]==7)
    {
        dfs(sx,sy-1,3);
    }
    else if(ma[sx][sy+1]==6||ma[sx][sy+1]==3||ma[sx][sy+1]==4||ma[sx][sy+1]==7)
    {
        dfs(sx,sy+1,4);
    }
    return 0;
}</code></pre>
<ul>
<li><strong>方法二代码</strong></li>
</ul>
<pre><code>#include &lt;cstdio&gt;
int st[101][101];
int To[8]={0,5,9,10,6,12,3,15};
int Guan[16]={0,0,0,6,0,1,4,0,0,2,3,0,5,0,0,7};
char ma[101][101];
int change(char x)
{
    if(x&gt;=&#039;1&#039; &amp;&amp; x&lt;=&#039;4&#039;)
    {
        return x-&#039;0&#039;;
    }
    else if(x==&#039;|&#039;)
    {
        return 5;
    }
    else if(x==&#039;-&#039;)
    {
        return 6;
    }
    else if(x==&#039;+&#039;)
    {
        return 7;
    }
    else if(x==&#039;M&#039;)
    {
        return 7;
    }
    else if(x==&#039;Z&#039;)
    {
        return 7;
    }
    return 0;
}
char change2(int x)
{
    if(x&gt;=1 &amp;&amp; x&lt;=4)
    {
        return x+&#039;0&#039;;
    }
    else if(x==5)
    {
        return &#039;|&#039;;
    }
    else if(x==6)
    {
        return &#039;-&#039;;
    }
    else if(x==7)
    {
        return &#039;+&#039;;
    }
    return -1;
}
int main()
{
    int n=0,m=0;
    scanf(&quot;%d %d&quot;,&amp;n,&amp;m);
    for(int i=1;i&lt;=n;i++)
    {
        scanf(&quot;%s&quot;,ma[i]+1);
        for(int j=1;j&lt;=m;j++)
        {
            st[i][j]=change(ma[i][j]);
        }
    }
    int ansx=0,ansy=0;
    char ansc;
    for(int i=1;i&lt;=n;i++)
    {
        for(int j=1;j&lt;=m;j++)
        {
            if(st[i][j]!=0)
            {
                continue;
            }
            int t=0;
            int nx=0,ny=0;
            nx=i-1,ny=j;
            if(nx&gt;=1 &amp;&amp; nx&lt;=n &amp;&amp; ny&gt;=1 &amp;&amp; ny&lt;=m)
            {
                if((To[st[nx][ny]] &amp; 4))
                {if(i==6 &amp;&amp; j==5)
                    {
                        printf(&quot;a\n&quot;);
                    }
                    t+=8;
                }
            }

            nx=i+1,ny=j;
            if(nx&gt;=1 &amp;&amp; nx&lt;=n &amp;&amp; ny&gt;=1 &amp;&amp; ny&lt;=m)
            {
                if((To[st[nx][ny]] &amp; 8))
                {
                    t+=4;
                }
            }

            nx=i,ny=j-1;
            if(nx&gt;=1 &amp;&amp; nx&lt;=n &amp;&amp; ny&gt;=1 &amp;&amp; ny&lt;=m)
            {
                if((To[st[nx][ny]] &amp; 1))
                {
                    t+=2;
                }
            }

            nx=i,ny=j+1;
            if(nx&gt;=1 &amp;&amp; nx&lt;=n &amp;&amp; ny&gt;=1 &amp;&amp; ny&lt;=m)
            {
                if((To[st[nx][ny]] &amp; 2))
                {
                    t+=1;
                }
            }
            if(Guan[t])
            {
                if(ma[i-1][j]!=&#039;M&#039; &amp;&amp; ma[i-1][j]!=&#039;Z&#039; &amp;&amp; ma[i+1][j]!=&#039;M&#039; &amp;&amp; ma[i+1][j]!=&#039;Z&#039; &amp;&amp; ma[i][j-1]!=&#039;M&#039; &amp;&amp; ma[i][j-1]!=&#039;Z&#039; &amp;&amp; ma[i][j+1]!=&#039;M&#039; &amp;&amp; ma[i][j+1]!=&#039;Z&#039;)
                {
                    printf(&quot;%d %d %c&quot;,i,j,change2(Guan[t]));
                    return 0;
                }
                else
                {
                    ansx=i,ansy=j,ansc=change2(Guan[t]);
                }
            }
        }
    }
    printf(&quot;%d %d %c&quot;,ansx,ansy,ansc);
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date><![CDATA[2019-08-07 07:34:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-06 23:34:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p1432%e3%80%90%e8%be%93%e6%b2%b9%e7%ae%a1%e9%81%93%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dfs"><![CDATA[DFS]]></category>
		<category domain="category" nicename="%e6%a8%a1%e6%8b%9f"><![CDATA[模拟]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[264]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P5935 【小凯学数学】</title>
		<link>http://106.53.21.5/index.php/2019/08/12/gmoj-p5935-%e3%80%90%e5%b0%8f%e5%87%af%e5%ad%a6%e6%95%b0%e5%ad%a6%e3%80%91-2__trashed/</link>
		<pubDate>Mon, 12 Aug 2019 12:51:05 +0000</pubDate>
		<dc:creator><![CDATA[weizexin]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=304</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>有 <code class="language-katex katex-inline">n</code> 个整数 <code class="language-katex katex-inline">a_1</code> ~ <code class="language-katex katex-inline">a_n</code> ，每次可以选择两个相邻的数进行合并操作， 一个数 <code class="language-katex katex-inline">x</code> 和 <code class="language-katex katex-inline">y</code> 合并以后会得到一个新数：</p>
<pre><code class="language-katex">\dfrac{(a \land b)+(a \lor b)}{2}</code></pre>
<p>然后把新数插在 <code class="language-katex katex-inline">x</code> 和 <code class="language-katex katex-inline">y</code> 之间，接着把 <code class="language-katex katex-inline">x</code> 和 <code class="language-katex katex-inline">y</code> 删去，就这样不断操作，直到只剩下 <code class="language-katex katex-inline">1</code> 个数为止。</p>
<p>现在请你求出剩下的数可能是什么，现在请你把它们从小到大输出。</p>
<p><code class="language-katex katex-inline">1 \leq n \leq 150,0 \leq a_i \leq 7</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>区间DP</strong> 来解题。</p>
<p>设 <code class="language-katex katex-inline">f[i][j][k]=0/1</code> 表示区间 <code class="language-katex katex-inline">[i,j]</code> 不能/能 够通过合并来产生 <code class="language-katex katex-inline">k</code> 这个数。</p>
<p>转移方程和初始化显然：</p>
<ul><li>转移方程</li>
</ul>
<p><code class="language-katex katex-inline">f[l][r][\frac{1}{2}(x+y)]=f[l][r][\frac{1}{2}(x+y)] \lor (f[l][k][x] \land f[k+1][r][y]) \lor (f[l][k][y] \land f[k+1][r][x])</code></p>
<ul><li>初始化</li>
</ul>
<p><code class="language-katex katex-inline">f[i][i][a_i]=1\quad\quad\quad(1 \leq i \leq n)</code></p>
<p>。</p>
<p>这一段的伪代码如下：</p>
<pre><code>for i : 2 ~ n
    for j : 1 ~ n-i+1
    {
        l=j,r=j+i-1;
        for k : l ~ r-1
            for x : 0 ~ 7
                for y : x ~ 7
                    f[l][r][(x+y)/2]=
                    f[l][r][(x+y)/2]
                  |(f[l][k][x]&amp;f[k+1][r][y])
                  |(f[l][k][y]&amp;f[k+1][r][x]);
    }</code></pre>
<p>。</p>
<p><strong>区间DP</strong> 的套路：</p>
<pre><code>for i : 1 ~ n //枚举区间长度
    for j : 1 ~ n-i+1 //枚举区间起点
    {
        l=j,r=j+i-1; //计算出转移的左边界和右边界
        for k : l ~ r-1 //枚举中间点
            f[l][r]=
            min/max/...(f[l][r],
                        f[l][k] +/-... f[k+1][r] +/-... xxx );
    }</code></pre>
<p>。</p>
<p>上面的模板的时间复杂度是 <code class="language-katex katex-inline">O(n^3)</code> ，其中 <code class="language-katex katex-inline">n</code> 表示的是区间的长度。</p>
<p>本题的时间复杂度为 <code class="language-katex katex-inline">O(n^3)</code> ，具体细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
int f[151][151][8],a[1000001];
int min(int x,int y)
{
    return x&lt;y?x:y;
}
int main()
{
    freopen("math.in","r",stdin);
    freopen("math.out","w",stdout);
    int n=0;
    scanf("%d",&amp;n);
    for(int i=1;i&lt;=n;i++)
    {
        scanf("%d",&amp;a[i]);
        f[i][i][a[i]]=1;
    }
    for(int i=2;i&lt;=n;i++)
    {
        for(int j=1;j&lt;=n-i+1;j++)
        {
            int l=j,r=j+i-1;
            for(int k=l;k&lt;=r-1;k++)
            {
                for(int x=0;x&lt;=7;x++)
                {
                    for(int y=x;y&lt;=7;y++)
                    {
                        f[l][r][(x+y)/2]=f[l][r][(x+y)/2]|(f[l][k][x]&amp;f[k+1][r][y])|(f[l][k][y]&amp;f[k+1][r][x]);
                    }
                }
            }
        }
    }
    for(int i=0;i&lt;=7;i++)
    {
        if(f[1][n][i]==1)
        {
            printf("%d ",i);
        }
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date><![CDATA[2019-08-12 20:51:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-12 12:51:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p5935-%e3%80%90%e5%b0%8f%e5%87%af%e5%ad%a6%e6%95%b0%e5%ad%a6%e3%80%91-2__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1565614278]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[gmoj-p5935-%e3%80%90%e5%b0%8f%e5%87%af%e5%ad%a6%e6%95%b0%e5%ad%a6%e3%80%91-2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P1386 【排序】</title>
		<link>http://106.53.21.5/index.php/2019/08/07/gmoj-p1386-%e3%80%90%e6%8e%92%e5%ba%8f%e3%80%91/</link>
		<pubDate>Wed, 07 Aug 2019 07:42:30 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=309</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>给你一个正整数 <code class="language-katex katex-inline">n</code> 和一个长度为 <code class="language-katex katex-inline">n</code> 的数组 <code class="language-katex katex-inline">a[]</code>，它是 <code class="language-katex katex-inline">1</code> 到 <code class="language-katex katex-inline">n</code> 个一个排列。现在用下面的方法为这个数组排序。</p>
<p>这种排序共有 <code class="language-katex katex-inline">n</code> 个阶段，如果当前阶段为奇数，则把最小的未操作的数移到正确位置上，如果阶段为偶数，则把最大的未操作的数移到正确位置上，交换的方式为交换相邻的两个数。</p>
<p>现在请你计算出每一阶段交换的次数。</p>
<p><code class="language-katex katex-inline">1 \leq a[i] \leq n \leq 10^5</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>树状数组</strong> 来解题。</p>
<p>为了方便表述，我们设 <code class="language-katex katex-inline">b[i]</code> 表示的是 <code class="language-katex katex-inline">i</code> 要在第 <code class="language-katex katex-inline">b[i]</code> 个阶段要归位，并且我们设 <code class="language-katex katex-inline">f(i)</code> 表示在第 <code class="language-katex katex-inline">i</code> 个阶段归位的数是 <code class="language-katex katex-inline">f(i)</code>， <code class="language-katex katex-inline">w[i]</code> 表示第 <code class="language-katex katex-inline">i</code> 个数初始时在 <code class="language-katex katex-inline">w[i]</code> 这个位置，那么显然有：</p>
<p><code class="language-katex katex-inline">f(i)=\left\{\begin{aligned} & \lceil \frac{2}{i} \rceil & \quad\quad\quad i \mod 2 = 1 \\ & n - \lfloor \frac{i}{2} \rfloor + 1 & \quad\quad\quad i \mod 2=0\end{aligned}\right.\\b[\;f(i)\;]=i\\w[\;a[i]\;]=i</code></p>
<p>。</p>
<p>然后我们设 <code class="language-katex katex-inline">l[i]</code> 表示的是在 <code class="language-katex katex-inline">i</code> 号点的左边并且满足 <code class="language-katex katex-inline">b[\;a[j]\;] < b[\;a[i]\;]</code> 以及 <code class="language-katex katex-inline">b[\;a[j]\;] \mod 2 = 0</code> 的数 <code class="language-katex katex-inline">j(1 \leq j \leq n)</code> 的个数。</p>
<p>并且我们设 <code class="language-katex katex-inline">r[i]</code> 表示的是在 <code class="language-katex katex-inline">i</code> 号点的右边并且满足 <code class="language-katex katex-inline">b[\;a[j]\;] < b[\;a[i]\;]</code> 以及 <code class="language-katex katex-inline">b[\;a[j]\;] \mod 2 = 1</code> 的数 <code class="language-katex katex-inline">j(1 \leq j \leq n)</code> 的个数。</p>
<p>那么对于数 <code class="language-katex katex-inline">f(i)</code> ，它归为所需的步数为：</p>
<pre><code class="language-katex">|(f(i) - l[\;w[\;f(i)\;]\;] + r[\;w[\;f(i)\;]\;]) - f(i)|</code></pre>
<p>。</p>
<p>其中 <code class="language-katex katex-inline">|a|</code> 表示的是数 <code class="language-katex katex-inline">a</code> 的绝对值。</p>
<p>时间复杂度 <code class="language-katex katex-inline">O(n \log n)</code> ，具体细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cstring&gt;
int sum1[1000001],sum2[1000001],wz[1000001];
int l[1000001],r[1000001];
int a[1000001],b[1000001];
int n=0;
int abs(int x)
{
    return x&gt;=0?x:-x;
}
int lowbit(int x)
{
    return x &amp; -x;
}
void updata(int x,int k)
{
    int now=x;
    while(x&lt;=n)
    {
        sum1[x]+=k;
        sum2[x]+=(now-1)*k;
        x+=lowbit(x);
    }
}
int sum(int x)
{
    int res=0,now=x;
    while(x&gt;=1)
    {
        res+=now*sum1[x]-sum2[x];
        x-=lowbit(x);
    }
    return res;
}
int main()
{
    scanf(&quot;%d&quot;,&amp;n);
    for(int i=1;i&lt;=n;i++)
    {
        scanf(&quot;%d&quot;,&amp;a[i]);
    }
    for(int i=1;i&lt;=n;i++)
    {
        b[(i%2==1)?(i/2+1):(n-i/2+1)]=i;
    }
    for(int i=1;i&lt;=n;i++)
    {
        a[i]=b[a[i]];
        wz[a[i]]=i;
    }
    for(int i=1;i&lt;=n;i++)
    {
        l[i]=sum(a[i]);
        updata(a[i],((a[i]%2==0)?1:0));
        updata(a[i]+1,-((a[i]%2==0)?1:0));
    }
    memset(sum1,0,sizeof(sum1));
    memset(sum2,0,sizeof(sum2));
    for(int i=n;i&gt;=1;i--)
    {
        r[i]=sum(a[i]);
        updata(a[i],((a[i]%2==1)?1:0));
        updata(a[i]+1,-((a[i]%2==1)?1:0));
    }
    for(int i=1;i&lt;=n;i++)
    {
        int x=(i%2==1)?(i/2+1):(n-i/2+1);
        int dq=abs(x-(wz[i]-l[wz[i]]+r[wz[i]]));
        printf(&quot;%d\n&quot;,dq);
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>309</wp:post_id>
		<wp:post_date><![CDATA[2019-08-07 15:42:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-07 07:42:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p1386-%e3%80%90%e6%8e%92%e5%ba%8f%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84"><![CDATA[树状数组]]></category>
		<category domain="category" nicename="%e7%ba%bf%e6%ae%b5%e6%a0%91"><![CDATA[线段树]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P3405 【舞台表演】</title>
		<link>http://106.53.21.5/index.php/2019/08/05/gmoj-p3405-%e3%80%90%e8%88%9e%e5%8f%b0%e8%a1%a8%e6%bc%94%e3%80%91/</link>
		<pubDate>Sun, 04 Aug 2019 23:06:15 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=345</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>给你一个 <code class="language-katex katex-inline">n \times m</code> 的地图，其中有一些位置是障碍物。</p>
<p>现在有一个点从起点 <code class="language-katex katex-inline">(x,y)</code> 出发，在时间段 <code class="language-katex katex-inline">[s_i,t_i](1 \leq i \leq k)</code> 内沿着 <code class="language-katex katex-inline">d_i(d_i \in \{1,2,3,4\})</code> （分别表示上、下、左、右）方向以 <code class="language-katex katex-inline">1</code> 的速度匀速移动，在运动的过程中可以施展魔法让这个点停止运动 <code class="language-katex katex-inline">1</code> 单位时间，魔法使用的次数不限。</p>
<p>现在问你在这个点不经过障碍物的情况下最多能够走过多少单位长度。</p>
<p><code class="language-katex katex-inline">s_1 =1 , s_i=t_{i-1}(2 \leq i \leq k)</code> 。</p>
<p><code class="language-katex katex-inline">1 \leq n,m,k \leq 200,1 \leq t_i \leq 10^5</code> 。</p>
<!--more-->
<h2>Solution</h2>
<ul>
<li><strong>方法一</strong></li>
</ul>
<p><strong>DP</strong> 加上 <strong>单调队列</strong> 来优化转移，时间复杂度 <code class="language-katex katex-inline">O(nmk)</code> 。</p>
<ul>
<li><strong>方法二</strong></li>
</ul>
<p><strong>注意，这个方法可能会被卡。</strong></p>
<p>考虑使用 <strong>DP</strong> 来解题。</p>
<p>设 <code class="language-katex katex-inline">f[i][j][t]</code> 表示在第 <code class="language-katex katex-inline">t</code> 个时间段走到 <code class="language-katex katex-inline">(x,y)</code> 这个位置的时候在不经过障碍物的情况下最多能够走过的单位长度。</p>
<p>我们设如果这个点在第 <code class="language-katex katex-inline">(t-1)</code> 个时间段能够到达 <code class="language-katex katex-inline">(i,j)</code> ，那么这个点在第 <code class="language-katex katex-inline">t</code> 个时间段最短能够用 <code class="language-katex katex-inline">l</code> 个单位时间能够到达 <code class="language-katex katex-inline">(X,Y)</code> 那么显然有转移和初始化：</p>
<p><code class="language-katex katex-inline">f[X][Y][t+1]=\max(f[X][Y][t+1],f[i][j][t]+l)\\f[x][y][1]=1</code></p>
<p>。</p>
<p>最终的答案为 <code class="language-katex katex-inline">(\max_{i=1}^{n} \max_{j=1}^{m} f[i][j][k+1])</code> 。</p>
<p>时间复杂度 <code class="language-katex katex-inline">O(nmkt)</code> ，但是因为跑不满，多以加了一些优化就可以卡过去了。</p>
<p>具体细节见 <strong>代码</strong> 部分，不过这一道题我的 <strong>代码</strong> 为了跑得快经过了多次修改，所以写的有点乱......</p>
<p>然后这道题目就做完了。</p>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cstring&gt;
char ma[201][201];
int f[201][201][201];
int dx[5]={0,-1,1,0,0};
int dy[5]={0,0,0,-1,1};
int st[201],ed[201],fx[201];
int max(int x,int y)
{
    return x&gt;y?x:y;
}
int cnt(char x)
{
    return x==&#039;x&#039;?1:0;
}
int main()
{
    memset(f,-127/6,sizeof(f));
    int n=0,m=0,x=0,y=0,k=0;
    scanf(&quot;%d %d %d %d %d&quot;,&amp;n,&amp;m,&amp;x,&amp;y,&amp;k);
    for(int i=1;i&lt;=n;i++)
    {
        scanf(&quot;%s&quot;,ma[i]+1);
    }
    f[x][y][1]=0;
    if(ma[x][y]==&#039;x&#039;)
    {
        printf(&quot;0&quot;);
        return 0;
    }
    for(int i=1;i&lt;=k;i++)
    {
        scanf(&quot;%d %d %d&quot;,&amp;st[i],&amp;ed[i],&amp;fx[i]);
        fx[i]=((fx[i]+1)^1)-1;
    }
    for(int t=1;t&lt;=k;t++)
    {
        int cd=ed[t]-st[t]+1;
        for(int i=1;i&lt;=n;i++)
        {
            for(int j=1;j&lt;=m;j++)
            {
                if(f[i][j][t]&lt;0)
                {
                    continue;
                }
                if(ma[i][j]==&#039;x&#039;)
                {
                    continue;
                }
                for(int l=0;l&lt;=cd;l++)
                {
                    int X=i-dx[ fx[t] ] * l,Y=j-dy[ fx[t] ] * l;
                    if(X&lt;1 || Y&lt;1 || X&gt;n || Y&gt;m)
                    {
                        break;
                    }
                    if(ma[X][Y]==&#039;x&#039;)
                    {
                        break;
                    }
                    f[X][Y][t+1]=max(f[X][Y][t+1],f[i][j][t]+l);
                }
            }
        }
    }
    int ans=0;
    for(int i=1;i&lt;=n;i++)
    {
        for(int j=1;j&lt;=m;j++)
        {
            ans=max(ans,f[i][j][k+1]);
        }
    }
    printf(&quot;%d&quot;,ans);
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>345</wp:post_id>
		<wp:post_date><![CDATA[2019-08-05 07:06:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-04 23:06:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p3405-%e3%80%90%e8%88%9e%e5%8f%b0%e8%a1%a8%e6%bc%94%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dp"><![CDATA[DP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GMOJ P1435 【开花】</title>
		<link>http://106.53.21.5/index.php/2019/08/05/gmoj-p1435-%e3%80%90%e5%bc%80%e8%8a%b1%e3%80%91/</link>
		<pubDate>Mon, 05 Aug 2019 10:05:23 +0000</pubDate>
		<dc:creator><![CDATA[zhongzijun]]></dc:creator>
		<guid isPermaLink="false">http://106.53.21.5/?p=347</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Description</h2>
<p>给你一个正整数 <code class="language-katex katex-inline">n</code> ，表示有 <code class="language-katex katex-inline">n</code> 个在平面直角坐标系上的第一象限的矩形，这些矩形按顺序出现，第 <code class="language-katex katex-inline">i</code> 个矩形的高度为 <code class="language-katex katex-inline">i</code> ，这个矩形的底边的横坐标在 <code class="language-katex katex-inline">[l_i,r_i]</code> 这个区间内。</p>
<p>矩形的相交处会产生 <code class="language-katex katex-inline">1</code> 的贡献，给出你 <code class="language-katex katex-inline">l_i,r_i(1 \leq i \leq n)</code> 问你每次出现一个矩形时会增加多少贡献。</p>
<p>特别地，我们在本题中定义区间 <code class="language-katex katex-inline">[a,b]</code> 和 <code class="language-katex katex-inline">[b,c]</code> 不相交。</p>
<p><code class="language-katex katex-inline">1 \leq n \leq 10^5,1 \leq l_i \leq r_i \leq 10^5</code> 。</p>
<!--more-->
<h2>Solution</h2>
<p>考虑使用 <strong>树状数组</strong> 来解题。</p>
<p>学习树状数组： <a href="https://www.cnblogs.com/xenny/p/9739600.html">树状数组详解</a> 。</p>
<p>考虑每次放矩形的操作，由于在本题中区间 <code class="language-katex katex-inline">[a,b]</code> 和 <code class="language-katex katex-inline">[b,c]</code> 不相交，所以我们为了方便，把 <code class="language-katex katex-inline">[l_i+1,r_i-1](1 \leq i \leq n)</code> 这一段加上 <code class="language-katex katex-inline">1</code> 就好了。</p>
<p>考虑怎么统计答案，答案显然为 <code class="language-katex katex-inline">[l_i,l_i]</code> 这一段的和加上 <code class="language-katex katex-inline">[r_i,r_i]</code> 这一段的和，再减去之前这两个点所产生的贡献。</p>
<p>注意是先统计答案再放矩形，时间复杂度 <code class="language-katex katex-inline">O(n\log n)</code> 。</p>
<p>具体细节见 <strong>代码</strong> 部分。</p>
<p>然后这道题目就做完了。</p>
<h2>Code</h2>
<pre><code>#include &lt;cstdio&gt;
#define N 100000
int c[1000001],c2[1000001],tj[1000001];
int lowbit(int x)
{
    return x &amp; -x;
}
void update(int x,int k)
{
    int now=x;
    while(x&lt;=N)
    {
        c[x]+=k;
        c2[x]+=k*(now-1);
        x+=lowbit(x);
    }
}
int sum(int x)
{
    int ans=0,now=x;
    while(x&gt;=1)
    {
        ans+=now*c[x]-c2[x];
        x-=lowbit(x); 
    }
    return ans;
}
int main()
{
    int n=0;
    scanf(&quot;%d&quot;,&amp;n);
    for(int i=1;i&lt;=n;i++)
    {
        int l=0,r=0;
        scanf(&quot;%d %d&quot;,&amp;l,&amp;r);
        printf(&quot;%d\n&quot;,sum(r)-sum(r-1)+sum(l)-sum(l-1)-tj[l]-tj[r]);
        tj[l]=sum(l)-sum(l-1);
        tj[r]=sum(r)-sum(r-1);
        update(l+1,1);
        update((r-1)+1,-1);
    }
    return 0;
}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date><![CDATA[2019-08-05 18:05:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-05 10:05:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmoj-p1435-%e3%80%90%e5%bc%80%e8%8a%b1%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84"><![CDATA[树状数组]]></category>
		<category domain="category" nicename="%e7%ba%bf%e6%ae%b5%e6%a0%91"><![CDATA[线段树]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
